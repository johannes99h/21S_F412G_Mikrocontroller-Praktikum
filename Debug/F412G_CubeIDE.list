
F412G_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009994  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000235c  08009b68  08009b68  00019b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bec4  0800bec4  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800bec4  0800bec4  0001bec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800becc  0800becc  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800becc  0800becc  0001becc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bed0  0800bed0  0001bed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800bed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000268  0800c13c  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800c13c  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf9b  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f2  00000000  00000000  0003c233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  000411c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240a7  00000000  00000000  00042618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001935b  00000000  00000000  000666bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd413  00000000  00000000  0007fa1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ce2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c20  00000000  00000000  0014ce80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000268 	.word	0x20000268
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b4c 	.word	0x08009b4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000026c 	.word	0x2000026c
 800020c:	08009b4c 	.word	0x08009b4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <confAMG>:
	return status;
}


void confAMG()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
	//Initialisierung der I2C-Schnittstelle
 	if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f26:	4826      	ldr	r0, [pc, #152]	; (8000fc0 <confAMG+0xa0>)
 8000f28:	f003 f95c 	bl	80041e4 <HAL_I2C_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <confAMG+0x16>
	{
		UART_I2Cfault();
 8000f32:	f000 fb09 	bl	8001548 <UART_I2Cfault>
	}

	// PCTL-Register
	uint8_t PCTL[2] = {0x00, 0x00};
 8000f36:	2300      	movs	r3, #0
 8000f38:	81bb      	strh	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&hi2c2, (0x69<<1), PCTL, sizeof(PCTL), 100) != HAL_OK)
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2302      	movs	r3, #2
 8000f44:	21d2      	movs	r1, #210	; 0xd2
 8000f46:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <confAMG+0xa0>)
 8000f48:	f003 fa90 	bl	800446c <HAL_I2C_Master_Transmit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <confAMG+0x36>
	{
		UART_I2Cfault();
 8000f52:	f000 faf9 	bl	8001548 <UART_I2Cfault>
	}

	// RST-Register
	uint8_t RST[2] = {0x01, 0x3F};
 8000f56:	f643 7301 	movw	r3, #16129	; 0x3f01
 8000f5a:	813b      	strh	r3, [r7, #8]
	if(HAL_I2C_Master_Transmit(&hi2c2, (0x69<<1), RST, sizeof(RST), 100) != HAL_OK)
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	21d2      	movs	r1, #210	; 0xd2
 8000f68:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <confAMG+0xa0>)
 8000f6a:	f003 fa7f 	bl	800446c <HAL_I2C_Master_Transmit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <confAMG+0x58>
	{
		UART_I2Cfault();
 8000f74:	f000 fae8 	bl	8001548 <UART_I2Cfault>
	}

	// FPSC-Register
	uint8_t FPSC[2] = {0x02, 0x02};
 8000f78:	f240 2302 	movw	r3, #514	; 0x202
 8000f7c:	80bb      	strh	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c2, (0x69<<1), FPSC, sizeof(FPSC), 100) != HAL_OK)
 8000f7e:	1d3a      	adds	r2, r7, #4
 8000f80:	2364      	movs	r3, #100	; 0x64
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2302      	movs	r3, #2
 8000f86:	21d2      	movs	r1, #210	; 0xd2
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <confAMG+0xa0>)
 8000f8a:	f003 fa6f 	bl	800446c <HAL_I2C_Master_Transmit>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <confAMG+0x78>
	{
		UART_I2Cfault();
 8000f94:	f000 fad8 	bl	8001548 <UART_I2Cfault>
	}

	// INTC-Register
	uint8_t INTC[2] = {0x03, 0x01};
 8000f98:	f240 1303 	movw	r3, #259	; 0x103
 8000f9c:	803b      	strh	r3, [r7, #0]
	if(HAL_I2C_Master_Transmit(&hi2c2, (0x69<<1), INTC, sizeof(INTC), 100) != HAL_OK)
 8000f9e:	463a      	mov	r2, r7
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	21d2      	movs	r1, #210	; 0xd2
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <confAMG+0xa0>)
 8000faa:	f003 fa5f 	bl	800446c <HAL_I2C_Master_Transmit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <confAMG+0x98>
	{
		UART_I2Cfault();
 8000fb4:	f000 fac8 	bl	8001548 <UART_I2Cfault>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200004ac 	.word	0x200004ac

08000fc4 <amgGetData>:


uint16_t amgGetData(uint8_t regDataL, uint8_t regDataH)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint16_t 	unconvertedData;
	uint8_t 	dataL, dataH;

	// Auslesen des "niedrigen" & "hohen" Datenregisters
	HAL_I2C_Mem_Read(&hi2c2, (0x69<<1), regDataL, 1, &dataL, sizeof(dataL), 10);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	230a      	movs	r3, #10
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f107 030d 	add.w	r3, r7, #13
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	21d2      	movs	r1, #210	; 0xd2
 8000fea:	480f      	ldr	r0, [pc, #60]	; (8001028 <amgGetData+0x64>)
 8000fec:	f003 fb3c 	bl	8004668 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, (0x69<<1), regDataH, 1, &dataH, sizeof(dataH), 10);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	21d2      	movs	r1, #210	; 0xd2
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <amgGetData+0x64>)
 8001008:	f003 fb2e 	bl	8004668 <HAL_I2C_Mem_Read>

	// Zusammenfügen der beiden 8-Bit Integer zu einem 16-Bit Integer
	unconvertedData = ((dataH << 8) | (dataL));
 800100c:	7b3b      	ldrb	r3, [r7, #12]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7b7b      	ldrb	r3, [r7, #13]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	81fb      	strh	r3, [r7, #14]

	return unconvertedData;
 800101c:	89fb      	ldrh	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200004ac 	.word	0x200004ac

0800102c <amgTranslateDataInt>:


uint16_t amgTranslateDataInt(uint16_t rawData)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
	uint16_t data;

	data = rawData / 4;
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	81fb      	strh	r3, [r7, #14]

	return data;
 800103c:	89fb      	ldrh	r3, [r7, #14]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <amgTranslateDataFloat>:


float amgTranslateDataFloat(uint16_t rawData)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	80fb      	strh	r3, [r7, #6]
	float data;

	data = (float)(rawData) / (float)4;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	ee07 3a90 	vmov	s15, r3
}
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <amgDataToUart>:


void amgDataToUart(float *dataFloat, uint16_t *dataInt)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	; 0x40
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	uint16_t 	tmpFractionalInt;
	uint8_t printBufSize;
	char printBuf[32];			// lediglich die maximale Länge, benötigte Länge wird später mittels sprintf()-Funktion  (stdio.h) bestimmt

	uint8_t zeroCounted = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	// Überprüfung der Datenmatrix auf Null-Einträge, da erfahrungsgemäß jedes zweite Frame aus fehlerhaften Einträgen besteht
	zeroCounted = amgDataPlausibilityCheck(dataInt);
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f000 f87d 	bl	8001190 <amgDataPlausibilityCheck>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(zeroCounted == 0)
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d13e      	bne.n	8001122 <amgDataToUart+0xa2>
	{
		// Iteration über den Inhalt der Matrix, also alle 64 Werte
		int k = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Iteration über die Zeilen der Matrix

		for(int i = 0; i < 8; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80010ac:	e035      	b.n	800111a <amgDataToUart+0x9a>
		{
			// Iteration über die Elemente einer einzelnen Zeile
			for(int j = 0; j < 8; j++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
 80010b2:	e029      	b.n	8001108 <amgDataToUart+0x88>
			{
				// Aufruf der Funktion zur Umwandlung der Nachkommastellen in eine Ganzzahl
				tmpFractionalInt = convertFloatFractionToInt(dataFloat[k]);
 80010b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	f000 f83a 	bl	800113c <convertFloatFractionToInt>
 80010c8:	4603      	mov	r3, r0
 80010ca:	863b      	strh	r3, [r7, #48]	; 0x30

				// Bestimmung der Stringlänge & Definition des auszugebenden Strings
				printBufSize = sprintf(printBuf, "%d.%2d ", dataInt[k], tmpFractionalInt);
 80010cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80010da:	f107 000c 	add.w	r0, r7, #12
 80010de:	4915      	ldr	r1, [pc, #84]	; (8001134 <amgDataToUart+0xb4>)
 80010e0:	f006 fb08 	bl	80076f4 <siprintf>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				k++;
 80010ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ec:	3301      	adds	r3, #1
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c

				// Ausgabe des Strings
				HAL_UART_Transmit(&huart2, (uint8_t *)printBuf, printBufSize, 10);
 80010f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 010c 	add.w	r1, r7, #12
 80010fa:	230a      	movs	r3, #10
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <amgDataToUart+0xb8>)
 80010fe:	f005 fa6a 	bl	80065d6 <HAL_UART_Transmit>
			for(int j = 0; j < 8; j++)
 8001102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001104:	3301      	adds	r3, #1
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	2b07      	cmp	r3, #7
 800110c:	ddd2      	ble.n	80010b4 <amgDataToUart+0x34>
			}

			formatUart(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 fa30 	bl	8001574 <formatUart>
		for(int i = 0; i < 8; i++)
 8001114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001116:	3301      	adds	r3, #1
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
 800111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111c:	2b07      	cmp	r3, #7
 800111e:	ddc6      	ble.n	80010ae <amgDataToUart+0x2e>
 8001120:	e001      	b.n	8001126 <amgDataToUart+0xa6>
		}
	}
	else
	{
		// nur zu Debugzwecken
		UART_faultyFrame();
 8001122:	f000 f9fb 	bl	800151c <UART_faultyFrame>
	}

	formatUart(3);
 8001126:	2003      	movs	r0, #3
 8001128:	f000 fa24 	bl	8001574 <formatUart>
}
 800112c:	bf00      	nop
 800112e:	3740      	adds	r7, #64	; 0x40
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	08009b68 	.word	0x08009b68
 8001138:	200005dc 	.word	0x200005dc

0800113c <convertFloatFractionToInt>:


uint16_t convertFloatFractionToInt(float dataFloat)
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	ed87 0a01 	vstr	s0, [r7, #4]
	double 	tmpFractional, tmpInteger;
	uint16_t tmpFractionalInt;

	// Aufteilung der Gleitkommazahl mittels modf()-Funktion (math.h)
	tmpFractional = modf(dataFloat, &tmpInteger);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fa1e 	bl	8000588 <__aeabi_f2d>
 800114c:	4604      	mov	r4, r0
 800114e:	460d      	mov	r5, r1
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4618      	mov	r0, r3
 8001156:	ec45 4b10 	vmov	d0, r4, r5
 800115a:	f006 fa81 	bl	8007660 <modf>
 800115e:	ed87 0b06 	vstr	d0, [r7, #24]

	// Umwandlung in Integer
	tmpFractionalInt = (uint16_t) (tmpFractional * 100);
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <convertFloatFractionToInt+0x50>)
 8001168:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800116c:	f7ff fa64 	bl	8000638 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fd36 	bl	8000be8 <__aeabi_d2uiz>
 800117c:	4603      	mov	r3, r0
 800117e:	82fb      	strh	r3, [r7, #22]

	return tmpFractionalInt;
 8001180:	8afb      	ldrh	r3, [r7, #22]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	40590000 	.word	0x40590000

08001190 <amgDataPlausibilityCheck>:


int amgDataPlausibilityCheck(uint16_t *rawData)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	uint8_t zeroCounting = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

	for(int l = 0; l < 64; l++)
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	e00c      	b.n	80011bc <amgDataPlausibilityCheck+0x2c>
	{
		// Vergleich der Matrix-Einträge mit Null: falls wahr, wird Zähler inkrementiert
		if( rawData[l] == 0)
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <amgDataPlausibilityCheck+0x26>
		{
			zeroCounting++;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3301      	adds	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
	for(int l = 0; l < 64; l++)
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b3f      	cmp	r3, #63	; 0x3f
 80011c0:	ddef      	ble.n	80011a2 <amgDataPlausibilityCheck+0x12>
		}
	}

	return zeroCounting;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <confLCD>:
/* Wertzuweisungen -----------------------------------------------*/


/* Funktionsdefinitionen -----------------------------------------------*/
void confLCD()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 80011d4:	f002 fa14 	bl	8003600 <BSP_LCD_Init>
	BSP_LCD_Clear(0xFFFF);
 80011d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011dc:	f002 fad6 	bl	800378c <BSP_LCD_Clear>
	BSP_LCD_DisplayChar(0, 0, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2100      	movs	r1, #0
 80011e4:	2000      	movs	r0, #0
 80011e6:	f002 fb07 	bl	80037f8 <BSP_LCD_DisplayChar>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <drawLCD>:


void drawLCD(uint16_t posX, uint16_t posY, uint16_t pixelArrayColor)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	80fb      	strh	r3, [r7, #6]
 80011f8:	460b      	mov	r3, r1
 80011fa:	80bb      	strh	r3, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	807b      	strh	r3, [r7, #2]
	BSP_LCD_SetTextColor(pixelArrayColor);
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4618      	mov	r0, r3
 8001204:	f002 faa2 	bl	800374c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(posX, posY, 30, 30);
 8001208:	88b9      	ldrh	r1, [r7, #4]
 800120a:	88f8      	ldrh	r0, [r7, #6]
 800120c:	231e      	movs	r3, #30
 800120e:	221e      	movs	r2, #30
 8001210:	f002 fb72 	bl	80038f8 <BSP_LCD_FillRect>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <updateLCD>:


void updateLCD(uint16_t *rawData)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	uint16_t posX;
	uint16_t posY;
	uint16_t pixelArrayColor;
	uint8_t zeroCounted = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	74fb      	strb	r3, [r7, #19]

	zeroCounted = amgDataPlausibilityCheck(rawData);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffb1 	bl	8001190 <amgDataPlausibilityCheck>
 800122e:	4603      	mov	r3, r0
 8001230:	74fb      	strb	r3, [r7, #19]

	// Update der farbigen Pixel-Arrays
	if(zeroCounted == 0)
 8001232:	7cfb      	ldrb	r3, [r7, #19]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d134      	bne.n	80012a2 <updateLCD+0x86>
	{
		// Iteration über den Inhalt der Matrix, also alle 64 Pixel
		int k = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]

		// Iteration über die Zeilen
		for(int i = 0; i < 8; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	e02c      	b.n	800129c <updateLCD+0x80>
		{
			// Iteration über den Inhalt der Zeilen
			for(int j = 0; j < 8; j++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e023      	b.n	8001290 <updateLCD+0x74>
			{
				posX = i * 30;
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	823b      	strh	r3, [r7, #16]
				posY = j * 30;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	b29b      	uxth	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	81fb      	strh	r3, [r7, #14]

				// Funktion zum Ermitteln der gewünschten Farbe
				pixelArrayColor = assignColor(rawData[k]);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f81c 	bl	80012ac <assignColor>
 8001274:	4603      	mov	r3, r0
 8001276:	81bb      	strh	r3, [r7, #12]
				k++;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	3301      	adds	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]

				// Einfärben des projizierten Pixels mit der ermittelten Farbe
				drawLCD(posX, posY, pixelArrayColor);
 800127e:	89ba      	ldrh	r2, [r7, #12]
 8001280:	89f9      	ldrh	r1, [r7, #14]
 8001282:	8a3b      	ldrh	r3, [r7, #16]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffb2 	bl	80011ee <drawLCD>
			for(int j = 0; j < 8; j++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2b07      	cmp	r3, #7
 8001294:	ddd8      	ble.n	8001248 <updateLCD+0x2c>
		for(int i = 0; i < 8; i++)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3301      	adds	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b07      	cmp	r3, #7
 80012a0:	ddcf      	ble.n	8001242 <updateLCD+0x26>
			}
		}
	}
}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <assignColor>:


uint16_t assignColor(uint16_t tbdColor)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b091      	sub	sp, #68	; 0x44
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	// Definition der Grundfarben in RGB-Schreibweise
	uint8_t colorWHITE[3] 	= {	0,		0,		0,	};
 80012b6:	4a85      	ldr	r2, [pc, #532]	; (80014cc <assignColor+0x220>)
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	4611      	mov	r1, r2
 80012c0:	8019      	strh	r1, [r3, #0]
 80012c2:	3302      	adds	r3, #2
 80012c4:	0c12      	lsrs	r2, r2, #16
 80012c6:	701a      	strb	r2, [r3, #0]
	uint8_t colorBLUE[3] 	= {	0, 		0,		255	};
 80012c8:	4a81      	ldr	r2, [pc, #516]	; (80014d0 <assignColor+0x224>)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4611      	mov	r1, r2
 80012d2:	8019      	strh	r1, [r3, #0]
 80012d4:	3302      	adds	r3, #2
 80012d6:	0c12      	lsrs	r2, r2, #16
 80012d8:	701a      	strb	r2, [r3, #0]
	uint8_t colorGREEN[3]	= {	0,		255,	0	};
 80012da:	4a7e      	ldr	r2, [pc, #504]	; (80014d4 <assignColor+0x228>)
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	4611      	mov	r1, r2
 80012e4:	8019      	strh	r1, [r3, #0]
 80012e6:	3302      	adds	r3, #2
 80012e8:	0c12      	lsrs	r2, r2, #16
 80012ea:	701a      	strb	r2, [r3, #0]
	uint8_t colorRED[3]		= { 255,	0,		0,	};
 80012ec:	4a7a      	ldr	r2, [pc, #488]	; (80014d8 <assignColor+0x22c>)
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	4611      	mov	r1, r2
 80012f6:	8019      	strh	r1, [r3, #0]
 80012f8:	3302      	adds	r3, #2
 80012fa:	0c12      	lsrs	r2, r2, #16
 80012fc:	701a      	strb	r2, [r3, #0]

	// notwendige lokale Variablen für die Farbwertinterpolation
	uint8_t lowerColor[3] = { 0 };
 80012fe:	4b77      	ldr	r3, [pc, #476]	; (80014dc <assignColor+0x230>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	82bb      	strh	r3, [r7, #20]
 8001304:	2300      	movs	r3, #0
 8001306:	75bb      	strb	r3, [r7, #22]
	uint8_t upperColor[3] = { 0 };
 8001308:	4b74      	ldr	r3, [pc, #464]	; (80014dc <assignColor+0x230>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	823b      	strh	r3, [r7, #16]
 800130e:	2300      	movs	r3, #0
 8001310:	74bb      	strb	r3, [r7, #18]
	uint16_t resultingColor[3];
	float	interpolatedTemp;

	// nach Interpolation zurückgegebener Farbwert
	uint32_t assignedColor = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28

	// Farbwahl
	if(tbdColor > 0 && tbdColor <= 20)
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d031      	beq.n	8001380 <assignColor+0xd4>
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	2b14      	cmp	r3, #20
 8001320:	d82e      	bhi.n	8001380 <assignColor+0xd4>
	{
		for(int i = 0; i < 3; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
 8001326:	e018      	b.n	800135a <assignColor+0xae>
		{
			lowerColor[i] = colorWHITE[i];
 8001328:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800132e:	4413      	add	r3, r2
 8001330:	7819      	ldrb	r1, [r3, #0]
 8001332:	f107 0214 	add.w	r2, r7, #20
 8001336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001338:	4413      	add	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
			upperColor[i] = colorBLUE[i];
 800133e:	f107 0220 	add.w	r2, r7, #32
 8001342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001344:	4413      	add	r3, r2
 8001346:	7819      	ldrb	r1, [r3, #0]
 8001348:	f107 0210 	add.w	r2, r7, #16
 800134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 3; i++)
 8001354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001356:	3301      	adds	r3, #1
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
 800135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135c:	2b02      	cmp	r3, #2
 800135e:	dde3      	ble.n	8001328 <assignColor+0x7c>
		}

		interpolatedTemp = ((float)20 - (float)tbdColor) / (float)20;
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800136e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001372:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800137e:	e06c      	b.n	800145a <assignColor+0x1ae>
	}
	else if(tbdColor > 20 && tbdColor <= 40)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	2b14      	cmp	r3, #20
 8001384:	d931      	bls.n	80013ea <assignColor+0x13e>
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	2b28      	cmp	r3, #40	; 0x28
 800138a:	d82e      	bhi.n	80013ea <assignColor+0x13e>
	{
		for(int i = 0; i < 3; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
 8001390:	e018      	b.n	80013c4 <assignColor+0x118>
		{
			lowerColor[i] = colorBLUE[i];
 8001392:	f107 0220 	add.w	r2, r7, #32
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	4413      	add	r3, r2
 800139a:	7819      	ldrb	r1, [r3, #0]
 800139c:	f107 0214 	add.w	r2, r7, #20
 80013a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a2:	4413      	add	r3, r2
 80013a4:	460a      	mov	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
			upperColor[i] = colorGREEN[i];
 80013a8:	f107 021c 	add.w	r2, r7, #28
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	4413      	add	r3, r2
 80013b0:	7819      	ldrb	r1, [r3, #0]
 80013b2:	f107 0210 	add.w	r2, r7, #16
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 3; i++)
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	3301      	adds	r3, #1
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
 80013c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	dde3      	ble.n	8001392 <assignColor+0xe6>
		}

		interpolatedTemp = ((float)40 - (float)tbdColor) / (float)40;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80014e0 <assignColor+0x234>
 80013d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013dc:	eddf 6a40 	vldr	s13, [pc, #256]	; 80014e0 <assignColor+0x234>
 80013e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80013e8:	e037      	b.n	800145a <assignColor+0x1ae>
	}
	else if(tbdColor > 40 && tbdColor <= 80)
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2b28      	cmp	r3, #40	; 0x28
 80013ee:	d931      	bls.n	8001454 <assignColor+0x1a8>
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	2b50      	cmp	r3, #80	; 0x50
 80013f4:	d82e      	bhi.n	8001454 <assignColor+0x1a8>
	{
		for(int i = 0; i < 3; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
 80013fa:	e018      	b.n	800142e <assignColor+0x182>
		{
			lowerColor[i] = colorGREEN[i];
 80013fc:	f107 021c 	add.w	r2, r7, #28
 8001400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001402:	4413      	add	r3, r2
 8001404:	7819      	ldrb	r1, [r3, #0]
 8001406:	f107 0214 	add.w	r2, r7, #20
 800140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140c:	4413      	add	r3, r2
 800140e:	460a      	mov	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
			upperColor[i] = colorRED[i];
 8001412:	f107 0218 	add.w	r2, r7, #24
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	4413      	add	r3, r2
 800141a:	7819      	ldrb	r1, [r3, #0]
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	4413      	add	r3, r2
 8001424:	460a      	mov	r2, r1
 8001426:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 3; i++)
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	3301      	adds	r3, #1
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
 800142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001430:	2b02      	cmp	r3, #2
 8001432:	dde3      	ble.n	80013fc <assignColor+0x150>
		}

		interpolatedTemp = ((float)80 - (float)tbdColor) / (float)80;
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80014e4 <assignColor+0x238>
 8001442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001446:	eddf 6a27 	vldr	s13, [pc, #156]	; 80014e4 <assignColor+0x238>
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8001452:	e002      	b.n	800145a <assignColor+0x1ae>
	}
	else
	{
		// Fehlerfall -> außerhalb des angegebenen Temperaturbereichs -> schwarzer Pixel
		assignedColor = 0xFFFF;
 8001454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Interpolation für jeden der RGB-Channel
	for(int i = 0; i < 3; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145e:	e022      	b.n	80014a6 <assignColor+0x1fa>
	{
		resultingColor[i] = (lowerColor[i] + upperColor[i]) * interpolatedTemp;
 8001460:	f107 0214 	add.w	r2, r7, #20
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	f107 0210 	add.w	r2, r7, #16
 8001470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	440b      	add	r3, r1
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148c:	ee17 3a90 	vmov	r3, s15
 8001490:	b29a      	uxth	r2, r3
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800149a:	440b      	add	r3, r1
 800149c:	f823 2c38 	strh.w	r2, [r3, #-56]
	for(int i = 0; i < 3; i++)
 80014a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a2:	3301      	adds	r3, #1
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	ddd9      	ble.n	8001460 <assignColor+0x1b4>
	}

	// Zusammenführen der einzelnen Channel zu einer Hexadezimalzahl
	assignedColor = (resultingColor[0] << 16) | (resultingColor[1] << 8) | (resultingColor[2]);
 80014ac:	893b      	ldrh	r3, [r7, #8]
 80014ae:	041a      	lsls	r2, r3, #16
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	4313      	orrs	r3, r2
 80014b6:	89ba      	ldrh	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28

	return assignedColor;
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	b29b      	uxth	r3, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3744      	adds	r7, #68	; 0x44
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	08009b70 	.word	0x08009b70
 80014d0:	08009b74 	.word	0x08009b74
 80014d4:	08009b78 	.word	0x08009b78
 80014d8:	08009b7c 	.word	0x08009b7c
 80014dc:	08009b80 	.word	0x08009b80
 80014e0:	42200000 	.word	0x42200000
 80014e4:	42a00000 	.word	0x42a00000

080014e8 <resetLEDs>:
/* Wertzuweisungen -----------------------------------------------*/


/* Funktionsdefinitionen -----------------------------------------------*/
void 		resetLEDs()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);						// grün
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <resetLEDs+0x30>)
 80014f2:	f002 fe5d 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);						// orange
 80014f6:	2201      	movs	r2, #1
 80014f8:	2102      	movs	r1, #2
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <resetLEDs+0x30>)
 80014fc:	f002 fe58 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);						// rot
 8001500:	2201      	movs	r2, #1
 8001502:	2104      	movs	r1, #4
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <resetLEDs+0x30>)
 8001506:	f002 fe53 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);						// blau
 800150a:	2201      	movs	r2, #1
 800150c:	2108      	movs	r1, #8
 800150e:	4802      	ldr	r0, [pc, #8]	; (8001518 <resetLEDs+0x30>)
 8001510:	f002 fe4e 	bl	80041b0 <HAL_GPIO_WritePin>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <UART_faultyFrame>:


void UART_faultyFrame()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
	uint8_t faultyFrame[12] = "Faulty Frame";
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <UART_faultyFrame+0x24>)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	ca07      	ldmia	r2, {r0, r1, r2}
 8001528:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	HAL_UART_Transmit(&huart2, (uint8_t *)faultyFrame, sizeof(faultyFrame), 10);
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	230a      	movs	r3, #10
 8001530:	220c      	movs	r2, #12
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <UART_faultyFrame+0x28>)
 8001534:	f005 f84f 	bl	80065d6 <HAL_UART_Transmit>
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08009b84 	.word	0x08009b84
 8001544:	200005dc 	.word	0x200005dc

08001548 <UART_I2Cfault>:


void UART_I2Cfault()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
	uint8_t I2C_fault[9] = "I2C fault";
 800154e:	4a07      	ldr	r2, [pc, #28]	; (800156c <UART_I2Cfault+0x24>)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	ca07      	ldmia	r2, {r0, r1, r2}
 8001554:	c303      	stmia	r3!, {r0, r1}
 8001556:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *)I2C_fault, sizeof(I2C_fault), 10);
 8001558:	1d39      	adds	r1, r7, #4
 800155a:	230a      	movs	r3, #10
 800155c:	2209      	movs	r2, #9
 800155e:	4804      	ldr	r0, [pc, #16]	; (8001570 <UART_I2Cfault+0x28>)
 8001560:	f005 f839 	bl	80065d6 <HAL_UART_Transmit>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08009b90 	.word	0x08009b90
 8001570:	200005dc 	.word	0x200005dc

08001574 <formatUart>:


void formatUart(uint8_t numberOfEmptyLines)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	char changeLine[4];
	uint8_t changeLineSize;

	// Ausgabe von leeren Zeilen über UART, um Übersichtlichkeit in der Konsole zu wahren & Datalog zu ermöglichen
	for(int i = 0; i < numberOfEmptyLines; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e012      	b.n	80015aa <formatUart+0x36>
	{
		changeLineSize = sprintf(changeLine, "\n\r");
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <formatUart+0x48>)
 800158a:	4618      	mov	r0, r3
 800158c:	f006 f8b2 	bl	80076f4 <siprintf>
 8001590:	4603      	mov	r3, r0
 8001592:	74fb      	strb	r3, [r7, #19]
		HAL_UART_Transmit(&huart2, (uint8_t *)changeLine, changeLineSize, 10);
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f107 010c 	add.w	r1, r7, #12
 800159c:	230a      	movs	r3, #10
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <formatUart+0x4c>)
 80015a0:	f005 f819 	bl	80065d6 <HAL_UART_Transmit>
	for(int i = 0; i < numberOfEmptyLines; i++)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dbe8      	blt.n	8001584 <formatUart+0x10>
	}
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	08009b9c 	.word	0x08009b9c
 80015c0:	200005dc 	.word	0x200005dc

080015c4 <confWatchdog>:


void confWatchdog()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <confWatchdog+0x24>)
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <confWatchdog+0x28>)
 80015cc:	601a      	str	r2, [r3, #0]

	// Parameter, um Resetintervall auf eine Sekunde festzulegen
	hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <confWatchdog+0x24>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 4095;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <confWatchdog+0x24>)
 80015d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015da:	609a      	str	r2, [r3, #8]

	HAL_IWDG_Init(&hiwdg);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <confWatchdog+0x24>)
 80015de:	f003 fdb0 	bl	8005142 <HAL_IWDG_Init>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200004a0 	.word	0x200004a0
 80015ec:	40003000 	.word	0x40003000

080015f0 <runtimeRoutine>:
static void MX_USART6_UART_Init(void);
static void MX_IWDG_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void runtimeRoutine()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	// alle 64 Pixel des Sensors auslesen
	  for(int i = 0; i < 64; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e038      	b.n	800166e <runtimeRoutine+0x7e>
	  {
		  rawData[i] = amgGetData(regDataL, regDataH);
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <runtimeRoutine+0xa0>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4a24      	ldr	r2, [pc, #144]	; (8001694 <runtimeRoutine+0xa4>)
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fcdc 	bl	8000fc4 <amgGetData>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <runtimeRoutine+0xa8>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  dataInt[i] = amgTranslateDataInt(rawData[i]);
 8001618:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <runtimeRoutine+0xa8>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fd03 	bl	800102c <amgTranslateDataInt>
 8001626:	4603      	mov	r3, r0
 8001628:	4619      	mov	r1, r3
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <runtimeRoutine+0xac>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  dataFloat[i] = amgTranslateDataFloat(rawData[i]);
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <runtimeRoutine+0xa8>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fd05 	bl	800104a <amgTranslateDataFloat>
 8001640:	eef0 7a40 	vmov.f32	s15, s0
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <runtimeRoutine+0xb0>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	edc3 7a00 	vstr	s15, [r3]
		  regDataL += 2;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <runtimeRoutine+0xa0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3302      	adds	r3, #2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <runtimeRoutine+0xa0>)
 800165a:	701a      	strb	r2, [r3, #0]
		  regDataH += 2;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <runtimeRoutine+0xa4>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3302      	adds	r3, #2
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <runtimeRoutine+0xa4>)
 8001666:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 64; i++)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b3f      	cmp	r3, #63	; 0x3f
 8001672:	ddc3      	ble.n	80015fc <runtimeRoutine+0xc>
	  }

	  // Gleitkommazahlen über UART senden
	  amgDataToUart(dataFloat, dataInt);
 8001674:	4909      	ldr	r1, [pc, #36]	; (800169c <runtimeRoutine+0xac>)
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <runtimeRoutine+0xb0>)
 8001678:	f7ff fd02 	bl	8001080 <amgDataToUart>

	  // LCD auf Basis der Integer updaten (Gleitkommazahlen lohnen sich hier nicht wirklich)
	  updateLCD(dataInt);
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <runtimeRoutine+0xac>)
 800167e:	f7ff fdcd 	bl	800121c <updateLCD>

	  HAL_IWDG_Refresh(&hiwdg);
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <runtimeRoutine+0xb4>)
 8001684:	f003 fd9f 	bl	80051c6 <HAL_IWDG_Refresh>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000000 	.word	0x20000000
 8001694:	20000001 	.word	0x20000001
 8001698:	200003a0 	.word	0x200003a0
 800169c:	20000420 	.word	0x20000420
 80016a0:	200002a0 	.word	0x200002a0
 80016a4:	200004a0 	.word	0x200004a0

080016a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	runtimeRoutine();
 80016b0:	f7ff ff9e 	bl	80015f0 <runtimeRoutine>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f002 fa3a 	bl	8003b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f81c 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 f97a 	bl	80019c0 <MX_GPIO_Init>
  MX_FSMC_Init();
 80016cc:	f000 faa4 	bl	8001c18 <MX_FSMC_Init>
  MX_I2C2_Init();
 80016d0:	f000 f88c 	bl	80017ec <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80016d4:	f000 f920 	bl	8001918 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80016d8:	f000 f948 	bl	800196c <MX_USART6_UART_Init>
  MX_IWDG_Init();
 80016dc:	f000 f8b4 	bl	8001848 <MX_IWDG_Init>
  MX_TIM3_Init();
 80016e0:	f000 f8cc 	bl	800187c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Ausschalten aller LEDs
  resetLEDs();
 80016e4:	f7ff ff00 	bl	80014e8 <resetLEDs>

  // Initialisierung des LCDs
  confLCD();
 80016e8:	f7ff fd72 	bl	80011d0 <confLCD>

  // Initialisierung der I2C-Schnittstelle & des Sensors
  confAMG();
 80016ec:	f7ff fc18 	bl	8000f20 <confAMG>

  // Initialisierung des Watchdog-Timers
  confWatchdog();
 80016f0:	f7ff ff68 	bl	80015c4 <confWatchdog>

  // Starten des Timers, der mit einer Frequenz von 10Hz globale Interrupts auslöst
  HAL_TIM_Base_Start_IT(&htim3);
 80016f4:	4801      	ldr	r0, [pc, #4]	; (80016fc <main+0x40>)
 80016f6:	f004 faf3 	bl	8005ce0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <main+0x3e>
 80016fc:	20000550 	.word	0x20000550

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	; 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	2234      	movs	r2, #52	; 0x34
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f005 fb34 	bl	8006d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <SystemClock_Config+0xe4>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <SystemClock_Config+0xe4>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <SystemClock_Config+0xe4>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <SystemClock_Config+0xe8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <SystemClock_Config+0xe8>)
 800174a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <SystemClock_Config+0xe8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800175c:	230b      	movs	r3, #11
 800175e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001760:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001764:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001766:	2301      	movs	r3, #1
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176a:	2310      	movs	r3, #16
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800176e:	2301      	movs	r3, #1
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	2302      	movs	r3, #2
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001780:	2348      	movs	r3, #72	; 0x48
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001784:	2302      	movs	r3, #2
 8001786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001788:	2303      	movs	r3, #3
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800178c:	2302      	movs	r3, #2
 800178e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4618      	mov	r0, r3
 8001796:	f003 ff8b 	bl	80056b0 <HAL_RCC_OscConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80017a0:	f000 fa9c 	bl	8001cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a4:	230f      	movs	r3, #15
 80017a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a8:	2302      	movs	r3, #2
 80017aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	2102      	movs	r1, #2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fd11 	bl	80051e8 <HAL_RCC_ClockConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80017cc:	f000 fa86 	bl	8001cdc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2000      	movs	r0, #0
 80017d6:	f003 fded 	bl	80053b4 <HAL_RCC_MCOConfig>
}
 80017da:	bf00      	nop
 80017dc:	3750      	adds	r7, #80	; 0x50
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000

080017ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C2_Init+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <MX_I2C2_Init+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C2_Init+0x50>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_I2C2_Init+0x58>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C2_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_I2C2_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_I2C2_Init+0x50>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <MX_I2C2_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_I2C2_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <MX_I2C2_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_I2C2_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_I2C2_Init+0x50>)
 800182a:	f002 fcdb 	bl	80041e4 <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 fa52 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200004ac 	.word	0x200004ac
 8001840:	40005800 	.word	0x40005800
 8001844:	000186a0 	.word	0x000186a0

08001848 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_IWDG_Init+0x2c>)
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <MX_IWDG_Init+0x30>)
 8001850:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_IWDG_Init+0x2c>)
 8001854:	2201      	movs	r2, #1
 8001856:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_IWDG_Init+0x2c>)
 800185a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800185e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_IWDG_Init+0x2c>)
 8001862:	f003 fc6e 	bl	8005142 <HAL_IWDG_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800186c:	f000 fa36 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200004a0 	.word	0x200004a0
 8001878:	40003000 	.word	0x40003000

0800187c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_TIM3_Init+0x94>)
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <MX_TIM3_Init+0x98>)
 800189c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_TIM3_Init+0x94>)
 80018a0:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80018a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM3_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_TIM3_Init+0x94>)
 80018ae:	2263      	movs	r2, #99	; 0x63
 80018b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_TIM3_Init+0x94>)
 80018b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM3_Init+0x94>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <MX_TIM3_Init+0x94>)
 80018c2:	f004 f9bd 	bl	8005c40 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80018cc:	f000 fa06 	bl	8001cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4619      	mov	r1, r3
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_TIM3_Init+0x94>)
 80018de:	f004 fb77 	bl	8005fd0 <HAL_TIM_ConfigClockSource>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018e8:	f000 f9f8 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_TIM3_Init+0x94>)
 80018fa:	f004 fd8f 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001904:	f000 f9ea 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000550 	.word	0x20000550
 8001914:	40000400 	.word	0x40000400

08001918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001950:	f004 fdf4 	bl	800653c <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195a:	f000 f9bf 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200005dc 	.word	0x200005dc
 8001968:	40004400 	.word	0x40004400

0800196c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_USART6_UART_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART6_UART_Init+0x4c>)
 80019a4:	f004 fdca 	bl	800653c <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019ae:	f000 f995 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000598 	.word	0x20000598
 80019bc:	40011400 	.word	0x40011400

080019c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08e      	sub	sp, #56	; 0x38
 80019c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	4b87      	ldr	r3, [pc, #540]	; (8001bf8 <MX_GPIO_Init+0x238>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a86      	ldr	r2, [pc, #536]	; (8001bf8 <MX_GPIO_Init+0x238>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <MX_GPIO_Init+0x238>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	4b80      	ldr	r3, [pc, #512]	; (8001bf8 <MX_GPIO_Init+0x238>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a7f      	ldr	r2, [pc, #508]	; (8001bf8 <MX_GPIO_Init+0x238>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a78      	ldr	r2, [pc, #480]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a18:	f043 0320 	orr.w	r3, r3, #32
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a71      	ldr	r2, [pc, #452]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a5c      	ldr	r2, [pc, #368]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a55      	ldr	r2, [pc, #340]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <MX_GPIO_Init+0x238>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	210f      	movs	r1, #15
 8001aba:	4850      	ldr	r0, [pc, #320]	; (8001bfc <MX_GPIO_Init+0x23c>)
 8001abc:	f002 fb78 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8001ac6:	484e      	ldr	r0, [pc, #312]	; (8001c00 <MX_GPIO_Init+0x240>)
 8001ac8:	f002 fb72 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad2:	484c      	ldr	r0, [pc, #304]	; (8001c04 <MX_GPIO_Init+0x244>)
 8001ad4:	f002 fb6c 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8001ad8:	230f      	movs	r3, #15
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001adc:	2311      	movs	r3, #17
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	4843      	ldr	r0, [pc, #268]	; (8001bfc <MX_GPIO_Init+0x23c>)
 8001af0:	f002 f9ca 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 8001af4:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	483c      	ldr	r0, [pc, #240]	; (8001c00 <MX_GPIO_Init+0x240>)
 8001b0e:	f002 f9bb 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <MX_GPIO_Init+0x248>)
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4619      	mov	r1, r3
 8001b24:	4839      	ldr	r0, [pc, #228]	; (8001c0c <MX_GPIO_Init+0x24c>)
 8001b26:	f002 f9af 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 8001b2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4830      	ldr	r0, [pc, #192]	; (8001c00 <MX_GPIO_Init+0x240>)
 8001b40:	f002 f9a2 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin;
 8001b44:	2313      	movs	r3, #19
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	482e      	ldr	r0, [pc, #184]	; (8001c10 <MX_GPIO_Init+0x250>)
 8001b58:	f002 f996 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 8001b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4619      	mov	r1, r3
 8001b78:	4826      	ldr	r0, [pc, #152]	; (8001c14 <MX_GPIO_Init+0x254>)
 8001b7a:	f002 f985 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	481b      	ldr	r0, [pc, #108]	; (8001c04 <MX_GPIO_Init+0x244>)
 8001b98:	f002 f976 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 8001b9c:	2324      	movs	r3, #36	; 0x24
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_GPIO_Init+0x248>)
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	4818      	ldr	r0, [pc, #96]	; (8001c10 <MX_GPIO_Init+0x250>)
 8001bb0:	f002 f96a 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 8001bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <MX_GPIO_Init+0x24c>)
 8001bd2:	f002 f959 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4619      	mov	r1, r3
 8001be8:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_GPIO_Init+0x244>)
 8001bea:	f002 f94d 	bl	8003e88 <HAL_GPIO_Init>

}
 8001bee:	bf00      	nop
 8001bf0:	3738      	adds	r7, #56	; 0x38
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40021400 	.word	0x40021400
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	10110000 	.word	0x10110000
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40021800 	.word	0x40021800
 8001c14:	40020400 	.word	0x40020400

08001c18 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	615a      	str	r2, [r3, #20]
 8001c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c32:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001c36:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001c38:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c3a:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <MX_FSMC_Init+0xc0>)
 8001c3c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001c50:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c52:	2210      	movs	r2, #16
 8001c54:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001c9a:	230f      	movs	r3, #15
 8001c9c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001ca2:	23ff      	movs	r3, #255	; 0xff
 8001ca4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001caa:	2310      	movs	r3, #16
 8001cac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001cae:	2311      	movs	r3, #17
 8001cb0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_FSMC_Init+0xbc>)
 8001cbe:	f003 ff7b 	bl	8005bb8 <HAL_SRAM_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001cc8:	f000 f808 	bl	8001cdc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000500 	.word	0x20000500
 8001cd8:	a0000104 	.word	0xa0000104

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <Error_Handler+0x8>
	...

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_MspInit+0x4c>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <HAL_I2C_MspInit+0xa8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d13d      	bne.n	8001dd6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_I2C_MspInit+0xac>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_I2C_MspInit+0xac>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_I2C_MspInit+0xac>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7c:	2312      	movs	r3, #18
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d80:	2301      	movs	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4815      	ldr	r0, [pc, #84]	; (8001de8 <HAL_I2C_MspInit+0xb0>)
 8001d94:	f002 f878 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9e:	2312      	movs	r3, #18
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001daa:	2309      	movs	r3, #9
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <HAL_I2C_MspInit+0xb0>)
 8001db6:	f002 f867 	bl	8003e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_I2C_MspInit+0xac>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_I2C_MspInit+0xac>)
 8001dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_I2C_MspInit+0xac>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40005800 	.word	0x40005800
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020400 	.word	0x40020400

08001dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_TIM_Base_MspInit+0x48>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d115      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_TIM_Base_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a0c      	ldr	r2, [pc, #48]	; (8001e38 <HAL_TIM_Base_MspInit+0x4c>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_TIM_Base_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201d      	movs	r0, #29
 8001e20:	f001 fffb 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e24:	201d      	movs	r0, #29
 8001e26:	f002 f814 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a32      	ldr	r2, [pc, #200]	; (8001f24 <HAL_UART_MspInit+0xe8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a29      	ldr	r2, [pc, #164]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e96:	230c      	movs	r3, #12
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	481e      	ldr	r0, [pc, #120]	; (8001f2c <HAL_UART_MspInit+0xf0>)
 8001eb2:	f001 ffe9 	bl	8003e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eb6:	e031      	b.n	8001f1c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_UART_MspInit+0xf4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12c      	bne.n	8001f1c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001ecc:	f043 0320 	orr.w	r3, r3, #32
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_UART_MspInit+0xec>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001efa:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <HAL_UART_MspInit+0xf8>)
 8001f18:	f001 ffb6 	bl	8003e88 <HAL_GPIO_Init>
}
 8001f1c:	bf00      	nop
 8001f1e:	3730      	adds	r7, #48	; 0x30
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40004400 	.word	0x40004400
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40011400 	.word	0x40011400
 8001f34:	40021800 	.word	0x40021800

08001f38 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_FSMC_MspInit+0xa8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d140      	bne.n	8001fd6 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_FSMC_MspInit+0xa8>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_FSMC_MspInit+0xac>)
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	4a20      	ldr	r2, [pc, #128]	; (8001fe4 <HAL_FSMC_MspInit+0xac>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6393      	str	r3, [r2, #56]	; 0x38
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_FSMC_MspInit+0xac>)
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 8001f76:	2301      	movs	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f86:	230c      	movs	r3, #12
 8001f88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4816      	ldr	r0, [pc, #88]	; (8001fe8 <HAL_FSMC_MspInit+0xb0>)
 8001f90:	f001 ff7a 	bl	8003e88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001f94:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001f98:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	480f      	ldr	r0, [pc, #60]	; (8001fec <HAL_FSMC_MspInit+0xb4>)
 8001fb0:	f001 ff6a 	bl	8003e88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001fb4:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001fb8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <HAL_FSMC_MspInit+0xb8>)
 8001fd0:	f001 ff5a 	bl	8003e88 <HAL_GPIO_Init>
 8001fd4:	e000      	b.n	8001fd8 <HAL_FSMC_MspInit+0xa0>
    return;
 8001fd6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000284 	.word	0x20000284
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40020c00 	.word	0x40020c00

08001ff4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ffc:	f7ff ff9c 	bl	8001f38 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800200c:	e7fe      	b.n	800200c <NMI_Handler+0x4>

0800200e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <HardFault_Handler+0x4>

08002014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <MemManage_Handler+0x4>

0800201a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <BusFault_Handler+0x4>

08002020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <UsageFault_Handler+0x4>

08002026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002054:	f001 fdc2 	bl	8003bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM3_IRQHandler+0x10>)
 8002062:	f003 fead 	bl	8005dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000550 	.word	0x20000550

08002070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_kill>:

int _kill(int pid, int sig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800208a:	f004 fe4d 	bl	8006d28 <__errno>
 800208e:	4603      	mov	r3, r0
 8002090:	2216      	movs	r2, #22
 8002092:	601a      	str	r2, [r3, #0]
	return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_exit>:

void _exit (int status)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ffe7 	bl	8002080 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020b2:	e7fe      	b.n	80020b2 <_exit+0x12>

080020b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e00a      	b.n	80020dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020c6:	f3af 8000 	nop.w
 80020ca:	4601      	mov	r1, r0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dbf0      	blt.n	80020c6 <_read+0x12>
	}

return len;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e009      	b.n	8002114 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbf1      	blt.n	8002100 <_write+0x12>
	}
	return len;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_close>:

int _close(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
	return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214e:	605a      	str	r2, [r3, #4]
	return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_isatty>:

int _isatty(int file)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	return 1;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <_sbrk+0x5c>)
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <_sbrk+0x60>)
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <_sbrk+0x64>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <_sbrk+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d207      	bcs.n	80021d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c0:	f004 fdb2 	bl	8006d28 <__errno>
 80021c4:	4603      	mov	r3, r0
 80021c6:	220c      	movs	r2, #12
 80021c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	e009      	b.n	80021e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <_sbrk+0x64>)
 80021e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20040000 	.word	0x20040000
 80021f0:	00000400 	.word	0x00000400
 80021f4:	20000288 	.word	0x20000288
 80021f8:	20000640 	.word	0x20000640

080021fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800224a:	f7ff ffd7 	bl	80021fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f004 fd71 	bl	8006d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7ff fa33 	bl	80016bc <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002258:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8002264:	0800bed4 	.word	0x0800bed4
  ldr r2, =_sbss
 8002268:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 800226c:	20000640 	.word	0x20000640

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>

08002272 <ls016b8uy_Init>:
  * @brief  Initialize the LS016B8UY LCD Component.
  * @param  None
  * @retval None
  */
void ls016b8uy_Init(void)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
  uint8_t   parameter[4];
  uint32_t  i;

  /* Initialize LS016B8UY low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002278:	f001 f990 	bl	800359c <LCD_IO_Init>
  
  parameter[0] = 0x00;     /* VSYNC output */
 800227c:	2300      	movs	r3, #0
 800227e:	703b      	strb	r3, [r7, #0]
  ls016b8uy_WriteReg(LCD_CMD_VSYNC_OUTPUT, parameter, 1);
 8002280:	463b      	mov	r3, r7
 8002282:	2201      	movs	r2, #1
 8002284:	4619      	mov	r1, r3
 8002286:	2035      	movs	r0, #53	; 0x35
 8002288:	f000 f9bd 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x06;     /* 18 bits color mode */
 800228c:	2306      	movs	r3, #6
 800228e:	703b      	strb	r3, [r7, #0]
  ls016b8uy_WriteReg(LCD_CMD_COLOR_MODE, parameter, 1);
 8002290:	463b      	mov	r3, r7
 8002292:	2201      	movs	r2, #1
 8002294:	4619      	mov	r1, r3
 8002296:	203a      	movs	r0, #58	; 0x3a
 8002298:	f000 f9b5 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x01;     /* Panel setting command <No.1 UN-Lock> */
 800229c:	2301      	movs	r3, #1
 800229e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xFE;
 80022a0:	23fe      	movs	r3, #254	; 0xfe
 80022a2:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_1, parameter, 2);
 80022a4:	463b      	mov	r3, r7
 80022a6:	2202      	movs	r2, #2
 80022a8:	4619      	mov	r1, r3
 80022aa:	20b0      	movs	r0, #176	; 0xb0
 80022ac:	f000 f9ab 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0xDE;     /* Panel setting command <No.2 UN-Lock> */
 80022b0:	23de      	movs	r3, #222	; 0xde
 80022b2:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x21;
 80022b4:	2321      	movs	r3, #33	; 0x21
 80022b6:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_2, parameter, 2);
 80022b8:	463b      	mov	r3, r7
 80022ba:	2202      	movs	r2, #2
 80022bc:	4619      	mov	r1, r3
 80022be:	20b1      	movs	r0, #177	; 0xb1
 80022c0:	f000 f9a1 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* V-Porch setting */
 80022c4:	2305      	movs	r3, #5
 80022c6:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x33;
 80022c8:	2333      	movs	r3, #51	; 0x33
 80022ca:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_V_PORCH, parameter, 2);
 80022cc:	463b      	mov	r3, r7
 80022ce:	2202      	movs	r2, #2
 80022d0:	4619      	mov	r1, r3
 80022d2:	20b7      	movs	r0, #183	; 0xb7
 80022d4:	f000 f997 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* Idle mode V-Porch setting */
 80022d8:	2305      	movs	r3, #5
 80022da:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x33;
 80022dc:	2333      	movs	r3, #51	; 0x33
 80022de:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_IDLE_V_PORCH, parameter, 2);
 80022e0:	463b      	mov	r3, r7
 80022e2:	2202      	movs	r2, #2
 80022e4:	4619      	mov	r1, r3
 80022e6:	20b8      	movs	r0, #184	; 0xb8
 80022e8:	f000 f98d 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x04;     /* panel timing setting */
 80022ec:	2304      	movs	r3, #4
 80022ee:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x03;
 80022f0:	2303      	movs	r3, #3
 80022f2:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_1, parameter, 2);
 80022f4:	463b      	mov	r3, r7
 80022f6:	2202      	movs	r2, #2
 80022f8:	4619      	mov	r1, r3
 80022fa:	20c8      	movs	r0, #200	; 0xc8
 80022fc:	f000 f983 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x5E;     /* panel timing setting */
 8002300:	235e      	movs	r3, #94	; 0x5e
 8002302:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002304:	2308      	movs	r3, #8
 8002306:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_2, parameter, 2);
 8002308:	463b      	mov	r3, r7
 800230a:	2202      	movs	r2, #2
 800230c:	4619      	mov	r1, r3
 800230e:	20c9      	movs	r0, #201	; 0xc9
 8002310:	f000 f979 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x0A;     /* panel timing setting */
 8002314:	230a      	movs	r3, #10
 8002316:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8002318:	230c      	movs	r3, #12
 800231a:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x02;
 800231c:	2302      	movs	r3, #2
 800231e:	70bb      	strb	r3, [r7, #2]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_3, parameter, 3);
 8002320:	463b      	mov	r3, r7
 8002322:	2203      	movs	r2, #3
 8002324:	4619      	mov	r1, r3
 8002326:	20ca      	movs	r0, #202	; 0xca
 8002328:	f000 f96d 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* panel timing setting */
 800232c:	2303      	movs	r3, #3
 800232e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x04;
 8002330:	2304      	movs	r3, #4
 8002332:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_4, parameter, 2);
 8002334:	463b      	mov	r3, r7
 8002336:	2202      	movs	r2, #2
 8002338:	4619      	mov	r1, r3
 800233a:	20cc      	movs	r0, #204	; 0xcc
 800233c:	f000 f963 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x0C;     /* panel power setting */
 8002340:	230c      	movs	r3, #12
 8002342:	703b      	strb	r3, [r7, #0]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_POWER, parameter, 1);
 8002344:	463b      	mov	r3, r7
 8002346:	2201      	movs	r2, #1
 8002348:	4619      	mov	r1, r3
 800234a:	20d0      	movs	r0, #208	; 0xd0
 800234c:	f000 f95b 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x02;     /* Oscillator Setting = 2MHz */
 8002350:	2302      	movs	r3, #2
 8002352:	703b      	strb	r3, [r7, #0]
  ls016b8uy_WriteReg(LCD_CMD_OSCILLATOR, parameter, 1);
 8002354:	463b      	mov	r3, r7
 8002356:	2201      	movs	r2, #1
 8002358:	4619      	mov	r1, r3
 800235a:	20b3      	movs	r0, #179	; 0xb3
 800235c:	f000 f953 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x53;     /* GVDD = 4.76V setting */
 8002360:	2353      	movs	r3, #83	; 0x53
 8002362:	703b      	strb	r3, [r7, #0]
  ls016b8uy_WriteReg(LCD_CMD_GVDD, parameter, 1);
 8002364:	463b      	mov	r3, r7
 8002366:	2201      	movs	r2, #1
 8002368:	4619      	mov	r1, r3
 800236a:	20c0      	movs	r0, #192	; 0xc0
 800236c:	f000 f94b 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Reload MTP After SLPOUT */
 8002370:	2300      	movs	r3, #0
 8002372:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x45;     /* VCOMH=3.76V */
 8002374:	2345      	movs	r3, #69	; 0x45
 8002376:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_RELOAD_MTP_VCOMH, parameter, 2);
 8002378:	463b      	mov	r3, r7
 800237a:	2202      	movs	r2, #2
 800237c:	4619      	mov	r1, r3
 800237e:	20c5      	movs	r0, #197	; 0xc5
 8002380:	f000 f941 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* OP-Amp Ability. (Normal) */
 8002384:	2303      	movs	r3, #3
 8002386:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x12;     /* Step-up Cycle for AVDD Booster Freq./4 */
 8002388:	2312      	movs	r3, #18
 800238a:	707b      	strb	r3, [r7, #1]
  ls016b8uy_WriteReg(LCD_CMD_OPAMP, parameter, 2);
 800238c:	463b      	mov	r3, r7
 800238e:	2202      	movs	r2, #2
 8002390:	4619      	mov	r1, r3
 8002392:	20c2      	movs	r0, #194	; 0xc2
 8002394:	f000 f937 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Tearing Effect Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
 8002398:	2300      	movs	r3, #0
 800239a:	703b      	strb	r3, [r7, #0]
  ls016b8uy_WriteReg(LCD_CMD_TEARING_EFFECT, parameter, 1);
 800239c:	463b      	mov	r3, r7
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	20dd      	movs	r0, #221	; 0xdd
 80023a4:	f000 f92f 	bl	8002606 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_LOCK, parameter, 0);   /* Panel setting command <Lock> */
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	4619      	mov	r1, r3
 80023ae:	20b4      	movs	r0, #180	; 0xb4
 80023b0:	f000 f929 	bl	8002606 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_OUT, parameter, 0);            /* Sleep Out Command */
 80023b4:	463b      	mov	r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	4619      	mov	r1, r3
 80023ba:	2011      	movs	r0, #17
 80023bc:	f000 f923 	bl	8002606 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 80023c0:	2096      	movs	r0, #150	; 0x96
 80023c2:	f001 f912 	bl	80035ea <LCD_IO_Delay>

  parameter[0] = 0x00;     /* CASET */
 80023c6:	2300      	movs	r3, #0
 80023c8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x1E;
 80023ca:	231e      	movs	r3, #30
 80023cc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xD1;
 80023d2:	23d1      	movs	r3, #209	; 0xd1
 80023d4:	70fb      	strb	r3, [r7, #3]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 80023d6:	463b      	mov	r3, r7
 80023d8:	2204      	movs	r2, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	202a      	movs	r0, #42	; 0x2a
 80023de:	f000 f912 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 80023e2:	2300      	movs	r3, #0
 80023e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xB3;
 80023ee:	23b3      	movs	r3, #179	; 0xb3
 80023f0:	70fb      	strb	r3, [r7, #3]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 80023f2:	463b      	mov	r3, r7
 80023f4:	2204      	movs	r2, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	202b      	movs	r0, #43	; 0x2b
 80023fa:	f000 f904 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x83;     /* Normal display for Driver Down side */
 80023fe:	2383      	movs	r3, #131	; 0x83
 8002400:	703b      	strb	r3, [r7, #0]
  ls016b8uy_WriteReg(LCD_CMD_NORMAL_DISPLAY, parameter, 1);
 8002402:	463b      	mov	r3, r7
 8002404:	2201      	movs	r2, #1
 8002406:	4619      	mov	r1, r3
 8002408:	2036      	movs	r0, #54	; 0x36
 800240a:	f000 f8fc 	bl	8002606 <ls016b8uy_WriteReg>

  ls016b8uy_DisplayOn();   /* Display ON command */
 800240e:	f000 f81b 	bl	8002448 <ls016b8uy_DisplayOn>

  /* Fill LCD frame memory with black pixels */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, parameter, 0);   /* RAM Write Data */
 8002412:	463b      	mov	r3, r7
 8002414:	2200      	movs	r2, #0
 8002416:	4619      	mov	r1, r3
 8002418:	202c      	movs	r0, #44	; 0x2c
 800241a:	f000 f8f4 	bl	8002606 <ls016b8uy_WriteReg>

  for(i = 0; i < (LS016B8UY_LCD_PIXEL_WIDTH * LS016B8UY_LCD_PIXEL_HEIGHT * 3)/2; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	e005      	b.n	8002430 <ls016b8uy_Init+0x1be>
  {
    LCD_IO_WriteData(0x0000);
 8002424:	2000      	movs	r0, #0
 8002426:	f001 f8bf 	bl	80035a8 <LCD_IO_WriteData>
  for(i = 0; i < (LS016B8UY_LCD_PIXEL_WIDTH * LS016B8UY_LCD_PIXEL_HEIGHT * 3)/2; i++)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3301      	adds	r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f64b 52d7 	movw	r2, #48599	; 0xbdd7
 8002436:	4293      	cmp	r3, r2
 8002438:	d9f4      	bls.n	8002424 <ls016b8uy_Init+0x1b2>
  }

  LCD_IO_Delay(20);   /* Wait for 20ms */
 800243a:	2014      	movs	r0, #20
 800243c:	f001 f8d5 	bl	80035ea <LCD_IO_Delay>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <ls016b8uy_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOn(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_ON, (uint8_t*)NULL, 0);    /* Display ON command */
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2029      	movs	r0, #41	; 0x29
 8002452:	f000 f8d8 	bl	8002606 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_IDLE_MODE_OFF, (uint8_t*)NULL, 0); /* Idle mode OFF command */
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2038      	movs	r0, #56	; 0x38
 800245c:	f000 f8d3 	bl	8002606 <ls016b8uy_WriteReg>
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <ls016b8uy_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOff(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_OFF, (uint8_t*)NULL, 0);   /* Display OFF command */
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	2028      	movs	r0, #40	; 0x28
 800246e:	f000 f8ca 	bl	8002606 <ls016b8uy_WriteReg>
  LCD_IO_Delay(20);   /* Wait for 20ms */
 8002472:	2014      	movs	r0, #20
 8002474:	f001 f8b9 	bl	80035ea <LCD_IO_Delay>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_IN, (uint8_t*)NULL, 0);      /* Sleep In Command */
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	2010      	movs	r0, #16
 800247e:	f000 f8c2 	bl	8002606 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 8002482:	2096      	movs	r0, #150	; 0x96
 8002484:	f001 f8b1 	bl	80035ea <LCD_IO_Delay>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <ls016b8uy_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ls016b8uy_GetLcdPixelWidth(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_WIDTH;
 8002490:	23b4      	movs	r3, #180	; 0xb4
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <ls016b8uy_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ls016b8uy_GetLcdPixelHeight(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_HEIGHT;
 80024a0:	23b4      	movs	r3, #180	; 0xb4
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <ls016b8uy_ReadID>:
  * @brief  Get the LS016B8UY ID.
  * @param  None
  * @retval The LS016B8UY ID 
  */
uint16_t ls016b8uy_ReadID(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80024b0:	f001 f874 	bl	800359c <LCD_IO_Init>
  /* TODO : LCD read ID command not known for now, so assumption that the connected LCD is LS016B8UY */
  return (LS016B8UY_ID);
 80024b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}

080024bc <ls016b8uy_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ls016b8uy_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	460a      	mov	r2, r1
 80024c6:	80fb      	strh	r3, [r7, #6]
 80024c8:	4613      	mov	r3, r2
 80024ca:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];

  parameter[0] = 0x00;     /* CASET */
 80024cc:	2300      	movs	r3, #0
 80024ce:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x1E + Xpos;
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	331e      	adds	r3, #30
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xD1 + Xpos;
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3b2f      	subs	r3, #47	; 0x2f
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	2204      	movs	r2, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	202a      	movs	r0, #42	; 0x2a
 80024f2:	f000 f888 	bl	8002606 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 80024f6:	2300      	movs	r3, #0
 80024f8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80024fa:	88bb      	ldrh	r3, [r7, #4]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002500:	2300      	movs	r3, #0
 8002502:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xB3 + Ypos;
 8002504:	88bb      	ldrh	r3, [r7, #4]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3b4d      	subs	r3, #77	; 0x4d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	2204      	movs	r2, #4
 8002514:	4619      	mov	r1, r3
 8002516:	202b      	movs	r0, #43	; 0x2b
 8002518:	f000 f875 	bl	8002606 <ls016b8uy_WriteReg>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <ls016b8uy_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ls016b8uy_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
 800252e:	460b      	mov	r3, r1
 8002530:	80bb      	strh	r3, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	807b      	strh	r3, [r7, #2]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2;

  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	0adb      	lsrs	r3, r3, #11
 800253a:	82fb      	strh	r3, [r7, #22]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	115b      	asrs	r3, r3, #5
 8002540:	b29b      	uxth	r3, r3
 8002542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002546:	82bb      	strh	r3, [r7, #20]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	827b      	strh	r3, [r7, #18]

  /* Prepare data to write with new pixel components and read old pixel component */
  rgb888_part1 = (r << 11) + (g << 2);
 8002550:	8afb      	ldrh	r3, [r7, #22]
 8002552:	02db      	lsls	r3, r3, #11
 8002554:	b29a      	uxth	r2, r3
 8002556:	8abb      	ldrh	r3, [r7, #20]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	b29b      	uxth	r3, r3
 800255c:	4413      	add	r3, r2
 800255e:	823b      	strh	r3, [r7, #16]
  rgb888_part2 = (b << 11);
 8002560:	8a7b      	ldrh	r3, [r7, #18]
 8002562:	02db      	lsls	r3, r3, #11
 8002564:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8002566:	88ba      	ldrh	r2, [r7, #4]
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ffa5 	bl	80024bc <ls016b8uy_SetCursor>

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	f000 f845 	bl	8002606 <ls016b8uy_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(rgb888_part1);
 800257c:	8a3b      	ldrh	r3, [r7, #16]
 800257e:	4618      	mov	r0, r3
 8002580:	f001 f812 	bl	80035a8 <LCD_IO_WriteData>
  LCD_IO_WriteData(rgb888_part2);
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	4618      	mov	r0, r3
 8002588:	f001 f80e 	bl	80035a8 <LCD_IO_WriteData>
}
 800258c:	bf00      	nop
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <ls016b8uy_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ls016b8uy_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	460a      	mov	r2, r1
 800259e:	80fb      	strh	r3, [r7, #6]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80bb      	strh	r3, [r7, #4]
  LS016B8UY_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80025a4:	88ba      	ldrh	r2, [r7, #4]
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff86 	bl	80024bc <ls016b8uy_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ls016b8uy_ReadPixel_rgb888(Xpos, Ypos);
 80025b0:	88ba      	ldrh	r2, [r7, #4]
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f9e2 	bl	8002980 <ls016b8uy_ReadPixel_rgb888>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	733a      	strb	r2, [r7, #12]
 80025c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80025c6:	737a      	strb	r2, [r7, #13]
 80025c8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80025cc:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80025ce:	7b3b      	ldrb	r3, [r7, #12]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	02db      	lsls	r3, r3, #11
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	7dbb      	ldrb	r3, [r7, #22]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	015b      	lsls	r3, r3, #5
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	7d7b      	ldrb	r3, [r7, #21]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80025fc:	8a7b      	ldrh	r3, [r7, #18]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <ls016b8uy_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ls016b8uy_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	6039      	str	r1, [r7, #0]
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	4613      	mov	r3, r2
 8002614:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 ffd2 	bl	80035c2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e00a      	b.n	800263a <ls016b8uy_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 ffba 	bl	80035a8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	3301      	adds	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3f0      	bcc.n	8002624 <ls016b8uy_WriteReg+0x1e>
  }
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <ls016b8uy_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ls016b8uy_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800264c:	b490      	push	{r4, r7}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4604      	mov	r4, r0
 8002654:	4608      	mov	r0, r1
 8002656:	4611      	mov	r1, r2
 8002658:	461a      	mov	r2, r3
 800265a:	4623      	mov	r3, r4
 800265c:	80fb      	strh	r3, [r7, #6]
 800265e:	4603      	mov	r3, r0
 8002660:	80bb      	strh	r3, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	807b      	strh	r3, [r7, #2]
 8002666:	4613      	mov	r3, r2
 8002668:	803b      	strh	r3, [r7, #0]
  if (Xpos < LS016B8UY_LCD_PIXEL_WIDTH)
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	2bb3      	cmp	r3, #179	; 0xb3
 800266e:	d803      	bhi.n	8002678 <ls016b8uy_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <ls016b8uy_SetDisplayWindow+0x94>)
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	8013      	strh	r3, [r2, #0]
 8002676:	e002      	b.n	800267e <ls016b8uy_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <ls016b8uy_SetDisplayWindow+0x94>)
 800267a:	2200      	movs	r2, #0
 800267c:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < LS016B8UY_LCD_PIXEL_HEIGHT)
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	2bb3      	cmp	r3, #179	; 0xb3
 8002682:	d803      	bhi.n	800268c <ls016b8uy_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <ls016b8uy_SetDisplayWindow+0x98>)
 8002686:	88bb      	ldrh	r3, [r7, #4]
 8002688:	8013      	strh	r3, [r2, #0]
 800268a:	e002      	b.n	8002692 <ls016b8uy_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <ls016b8uy_SetDisplayWindow+0x98>)
 800268e:	2200      	movs	r2, #0
 8002690:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= LS016B8UY_LCD_PIXEL_WIDTH)
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	4413      	add	r3, r2
 8002698:	2bb4      	cmp	r3, #180	; 0xb4
 800269a:	dc08      	bgt.n	80026ae <ls016b8uy_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 800269c:	887a      	ldrh	r2, [r7, #2]
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4413      	add	r3, r2
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <ls016b8uy_SetDisplayWindow+0x9c>)
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	e002      	b.n	80026b4 <ls016b8uy_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = LS016B8UY_LCD_PIXEL_WIDTH - 1;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <ls016b8uy_SetDisplayWindow+0x9c>)
 80026b0:	22b3      	movs	r2, #179	; 0xb3
 80026b2:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= LS016B8UY_LCD_PIXEL_HEIGHT)
 80026b4:	883a      	ldrh	r2, [r7, #0]
 80026b6:	88bb      	ldrh	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	2bb4      	cmp	r3, #180	; 0xb4
 80026bc:	dc08      	bgt.n	80026d0 <ls016b8uy_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80026be:	883a      	ldrh	r2, [r7, #0]
 80026c0:	88bb      	ldrh	r3, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <ls016b8uy_SetDisplayWindow+0xa0>)
 80026cc:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
  }
}
 80026ce:	e002      	b.n	80026d6 <ls016b8uy_SetDisplayWindow+0x8a>
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <ls016b8uy_SetDisplayWindow+0xa0>)
 80026d2:	22b3      	movs	r2, #179	; 0xb3
 80026d4:	801a      	strh	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc90      	pop	{r4, r7}
 80026de:	4770      	bx	lr
 80026e0:	2000028c 	.word	0x2000028c
 80026e4:	2000028e 	.word	0x2000028e
 80026e8:	20000040 	.word	0x20000040
 80026ec:	20000042 	.word	0x20000042

080026f0 <ls016b8uy_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4623      	mov	r3, r4
 8002700:	80fb      	strh	r3, [r7, #6]
 8002702:	4603      	mov	r3, r0
 8002704:	80bb      	strh	r3, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	807b      	strh	r3, [r7, #2]
 800270a:	4613      	mov	r3, r2
 800270c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	82fb      	strh	r3, [r7, #22]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2, rgb888_part3;
  
  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	0adb      	lsrs	r3, r3, #11
 8002716:	82bb      	strh	r3, [r7, #20]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	115b      	asrs	r3, r3, #5
 800271c:	b29b      	uxth	r3, r3
 800271e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002722:	827b      	strh	r3, [r7, #18]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	823b      	strh	r3, [r7, #16]

  rgb888_part1 = (r << 11) + (g << 2); /* Build pattern first part to write in LCD RAM */
 800272c:	8abb      	ldrh	r3, [r7, #20]
 800272e:	02db      	lsls	r3, r3, #11
 8002730:	b29a      	uxth	r2, r3
 8002732:	8a7b      	ldrh	r3, [r7, #18]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	b29b      	uxth	r3, r3
 8002738:	4413      	add	r3, r2
 800273a:	81fb      	strh	r3, [r7, #14]
  rgb888_part2 = (b << 11) + (r << 3); /* Build pattern second part to write in LCD RAM */
 800273c:	8a3b      	ldrh	r3, [r7, #16]
 800273e:	02db      	lsls	r3, r3, #11
 8002740:	b29a      	uxth	r2, r3
 8002742:	8abb      	ldrh	r3, [r7, #20]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	b29b      	uxth	r3, r3
 8002748:	4413      	add	r3, r2
 800274a:	81bb      	strh	r3, [r7, #12]
  rgb888_part3 = (g << 10) + (b << 3); /* Build pattern third part to write in LCD RAM */
 800274c:	8a7b      	ldrh	r3, [r7, #18]
 800274e:	029b      	lsls	r3, r3, #10
 8002750:	b29a      	uxth	r2, r3
 8002752:	8a3b      	ldrh	r3, [r7, #16]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	b29b      	uxth	r3, r3
 8002758:	4413      	add	r3, r2
 800275a:	817b      	strh	r3, [r7, #10]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos); 
 800275c:	887a      	ldrh	r2, [r7, #2]
 800275e:	88bb      	ldrh	r3, [r7, #4]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff feaa 	bl	80024bc <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	202c      	movs	r0, #44	; 0x2c
 800276e:	f7ff ff4a 	bl	8002606 <ls016b8uy_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter+=2)
 8002772:	2300      	movs	r3, #0
 8002774:	82fb      	strh	r3, [r7, #22]
 8002776:	e013      	b.n	80027a0 <ls016b8uy_DrawHLine+0xb0>
  {
    /* Write 2 pixels at a time by performing 3 access (pixels coded on 24 bits in LCD RAM whereas access are coded on 16 bits) */
    LCD_IO_WriteData(rgb888_part1);
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 ff14 	bl	80035a8 <LCD_IO_WriteData>
    LCD_IO_WriteData(rgb888_part2);
 8002780:	89bb      	ldrh	r3, [r7, #12]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 ff10 	bl	80035a8 <LCD_IO_WriteData>
    if (counter != (Length-1))  /* When writing last pixel when Length is odd, the third part is not written */
 8002788:	8afa      	ldrh	r2, [r7, #22]
 800278a:	883b      	ldrh	r3, [r7, #0]
 800278c:	3b01      	subs	r3, #1
 800278e:	429a      	cmp	r2, r3
 8002790:	d003      	beq.n	800279a <ls016b8uy_DrawHLine+0xaa>
    {
      LCD_IO_WriteData(rgb888_part3);
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 ff07 	bl	80035a8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter+=2)
 800279a:	8afb      	ldrh	r3, [r7, #22]
 800279c:	3302      	adds	r3, #2
 800279e:	82fb      	strh	r3, [r7, #22]
 80027a0:	8afa      	ldrh	r2, [r7, #22]
 80027a2:	883b      	ldrh	r3, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3e7      	bcc.n	8002778 <ls016b8uy_DrawHLine+0x88>
    }
  }  
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}

080027b2 <ls016b8uy_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80027b2:	b590      	push	{r4, r7, lr}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4604      	mov	r4, r0
 80027ba:	4608      	mov	r0, r1
 80027bc:	4611      	mov	r1, r2
 80027be:	461a      	mov	r2, r3
 80027c0:	4623      	mov	r3, r4
 80027c2:	80fb      	strh	r3, [r7, #6]
 80027c4:	4603      	mov	r3, r0
 80027c6:	80bb      	strh	r3, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	88bb      	ldrh	r3, [r7, #4]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fe6e 	bl	80024bc <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	202c      	movs	r0, #44	; 0x2c
 80027e6:	f7ff ff0e 	bl	8002606 <ls016b8uy_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	81fb      	strh	r3, [r7, #14]
 80027ee:	e00b      	b.n	8002808 <ls016b8uy_DrawVLine+0x56>
  {
    ls016b8uy_WritePixel(Xpos, Ypos + counter, RGBCode);
 80027f0:	887a      	ldrh	r2, [r7, #2]
 80027f2:	89fb      	ldrh	r3, [r7, #14]
 80027f4:	4413      	add	r3, r2
 80027f6:	b299      	uxth	r1, r3
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	88bb      	ldrh	r3, [r7, #4]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fe91 	bl	8002524 <ls016b8uy_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	3301      	adds	r3, #1
 8002806:	81fb      	strh	r3, [r7, #14]
 8002808:	89fa      	ldrh	r2, [r7, #14]
 800280a:	883b      	ldrh	r3, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d3ef      	bcc.n	80027f0 <ls016b8uy_DrawVLine+0x3e>
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}
	...

0800281c <ls016b8uy_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ls016b8uy_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	603a      	str	r2, [r7, #0]
 8002826:	80fb      	strh	r3, [r7, #6]
 8002828:	460b      	mov	r3, r1
 800282a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <ls016b8uy_DrawBitmap+0xe0>)
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <ls016b8uy_DrawBitmap+0xe4>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b29b      	uxth	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <ls016b8uy_DrawBitmap+0xe8>)
 800284a:	881a      	ldrh	r2, [r3, #0]
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <ls016b8uy_DrawBitmap+0xec>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	3302      	adds	r3, #2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	3304      	adds	r3, #4
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	461a      	mov	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	330a      	adds	r3, #10
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	461a      	mov	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	4413      	add	r3, r2
 80028a0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80028a2:	88ba      	ldrh	r2, [r7, #4]
 80028a4:	89bb      	ldrh	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e01d      	b.n	80028e8 <ls016b8uy_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY - 1);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fdff 	bl	80024bc <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b299      	uxth	r1, r3
 80028c6:	89fb      	ldrh	r3, [r7, #14]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	89fa      	ldrh	r2, [r7, #14]
 80028d6:	88f8      	ldrh	r0, [r7, #6]
 80028d8:	f000 f89c 	bl	8002a14 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3301      	adds	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8dd      	bhi.n	80028ac <ls016b8uy_DrawBitmap+0x90>
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000040 	.word	0x20000040
 8002900:	2000028c 	.word	0x2000028c
 8002904:	20000042 	.word	0x20000042
 8002908:	2000028e 	.word	0x2000028e

0800290c <ls016b8uy_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ls016b8uy_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	4604      	mov	r4, r0
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4623      	mov	r3, r4
 800291c:	80fb      	strh	r3, [r7, #6]
 800291e:	4603      	mov	r3, r0
 8002920:	80bb      	strh	r3, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	807b      	strh	r3, [r7, #2]
 8002926:	4613      	mov	r3, r2
 8002928:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800292e:	88bb      	ldrh	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e019      	b.n	8002968 <ls016b8uy_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	b29a      	uxth	r2, r3
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fdbd 	bl	80024bc <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	b299      	uxth	r1, r3
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	4413      	add	r3, r2
 8002954:	887a      	ldrh	r2, [r7, #2]
 8002956:	88f8      	ldrh	r0, [r7, #6]
 8002958:	f000 f85c 	bl	8002a14 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3301      	adds	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3301      	adds	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	88ba      	ldrh	r2, [r7, #4]
 800296a:	883b      	ldrh	r3, [r7, #0]
 800296c:	4413      	add	r3, r2
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4293      	cmp	r3, r2
 8002974:	d3de      	bcc.n	8002934 <ls016b8uy_DrawRGBImage+0x28>
  }
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}

08002980 <ls016b8uy_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static LS016B8UY_Rgb888 ls016b8uy_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	460a      	mov	r2, r1
 800298a:	80fb      	strh	r3, [r7, #6]
 800298c:	4613      	mov	r3, r2
 800298e:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8002990:	88ba      	ldrh	r2, [r7, #4]
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fd90 	bl	80024bc <ls016b8uy_SetCursor>
  /* Prepare to read LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	202e      	movs	r0, #46	; 0x2e
 80029a2:	f7ff fe30 	bl	8002606 <ls016b8uy_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80029a6:	f000 fe19 	bl	80035dc <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80029aa:	f000 fe17 	bl	80035dc <LCD_IO_ReadData>
 80029ae:	4603      	mov	r3, r0
 80029b0:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80029b2:	f000 fe13 	bl	80035dc <LCD_IO_ReadData>
 80029b6:	4603      	mov	r3, r0
 80029b8:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80029ba:	8afb      	ldrh	r3, [r7, #22]
 80029bc:	121b      	asrs	r3, r3, #8
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f023 0303 	bic.w	r3, r3, #3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80029c8:	8afb      	ldrh	r3, [r7, #22]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f023 0303 	bic.w	r3, r3, #3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80029d4:	8abb      	ldrh	r3, [r7, #20]
 80029d6:	121b      	asrs	r3, r3, #8
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	f107 020c 	add.w	r2, r7, #12
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4611      	mov	r1, r2
 80029ee:	8019      	strh	r1, [r3, #0]
 80029f0:	3302      	adds	r3, #2
 80029f2:	0c12      	lsrs	r2, r2, #16
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	7c3a      	ldrb	r2, [r7, #16]
 80029fa:	f362 0307 	bfi	r3, r2, #0, #8
 80029fe:	7c7a      	ldrb	r2, [r7, #17]
 8002a00:	f362 230f 	bfi	r3, r2, #8, #8
 8002a04:	7cba      	ldrb	r2, [r7, #18]
 8002a06:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <ls016b8uy_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ls016b8uy_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	81fb      	strh	r3, [r7, #14]
 8002a20:	460b      	mov	r3, r1
 8002a22:	81bb      	strh	r3, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t posX;
  uint16_t r, g, b;
  uint16_t rgb888_part;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	202c      	movs	r0, #44	; 0x2c
 8002a36:	f7ff fde6 	bl	8002606 <ls016b8uy_WriteReg>

  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	e07b      	b.n	8002b38 <ls016b8uy_DrawRGBHLine+0x124>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <ls016b8uy_DrawRGBHLine+0x140>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d372      	bcc.n	8002b32 <ls016b8uy_DrawRGBHLine+0x11e>
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <ls016b8uy_DrawRGBHLine+0x144>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	89ba      	ldrh	r2, [r7, #12]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d36d      	bcc.n	8002b32 <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <ls016b8uy_DrawRGBHLine+0x148>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d867      	bhi.n	8002b32 <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002a62:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <ls016b8uy_DrawRGBHLine+0x14c>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	89ba      	ldrh	r2, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d862      	bhi.n	8002b32 <ls016b8uy_DrawRGBHLine+0x11e>
    {
      /* Write pixels in LCD RAM after RGB565 -> RGB888 conversion */
      /* As data in LCD RAM are 24bits packed, three 16 bits writes access are needed to transmit 2 pixels data */

      r = (rgb565[i] & 0xF800) >> 11;      /* Extract red component from first RGB565 pixel data */
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	0adb      	lsrs	r3, r3, #11
 8002a78:	837b      	strh	r3, [r7, #26]
      g = (rgb565[i] & 0x07E0) >> 5;       /* Extract green component from first RGB565 pixel data  */
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	115b      	asrs	r3, r3, #5
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8c:	833b      	strh	r3, [r7, #24]
      rgb888_part = (r << 11) + (g << 2);  /* Build data to be written in LCD RAM */
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	02db      	lsls	r3, r3, #11
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	8b3b      	ldrh	r3, [r7, #24]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8002a9e:	8afb      	ldrh	r3, [r7, #22]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fd81 	bl	80035a8 <LCD_IO_WriteData>

      b = (rgb565[i] & 0x001F) >> 0;       /* Extract blue component from first RGB565 pixel data  */
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	82bb      	strh	r3, [r7, #20]
      r = (rgb565[i+1] & 0xF800) >> 11;    /* Extract red component from second RGB565 pixel data  */
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	3301      	adds	r3, #1
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	0adb      	lsrs	r3, r3, #11
 8002ac4:	837b      	strh	r3, [r7, #26]
      rgb888_part = (b << 11) + (r << 3);  /* Build data to be written in LCD RAM */
 8002ac6:	8abb      	ldrh	r3, [r7, #20]
 8002ac8:	02db      	lsls	r3, r3, #11
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	8b7b      	ldrh	r3, [r7, #26]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fd65 	bl	80035a8 <LCD_IO_WriteData>

      if (posX != (Xsize + Xpos - 1))     /* When writing last pixel when size is odd, the third part is not written */
 8002ade:	897a      	ldrh	r2, [r7, #10]
 8002ae0:	89fb      	ldrh	r3, [r7, #14]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d01f      	beq.n	8002b2c <ls016b8uy_DrawRGBHLine+0x118>
      {
        g = (rgb565[i+1] & 0x07E0) >> 5;     /* Extract green component from second RGB565 pixel data */
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	3301      	adds	r3, #1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	115b      	asrs	r3, r3, #5
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b00:	833b      	strh	r3, [r7, #24]
        b = (rgb565[i+1] & 0x001F) >> 0;     /* Extract blue component from second RGB565 pixel data */
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	3301      	adds	r3, #1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	82bb      	strh	r3, [r7, #20]
        rgb888_part = (g << 10) + (b << 3);  /* Build data to be written in LCD RAM */
 8002b14:	8b3b      	ldrh	r3, [r7, #24]
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	8abb      	ldrh	r3, [r7, #20]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	82fb      	strh	r3, [r7, #22]
        LCD_IO_WriteData(rgb888_part);
 8002b24:	8afb      	ldrh	r3, [r7, #22]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fd3e 	bl	80035a8 <LCD_IO_WriteData>
      }

      i += 2;
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	3302      	adds	r3, #2
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	3302      	adds	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
 8002b38:	897a      	ldrh	r2, [r7, #10]
 8002b3a:	89fb      	ldrh	r3, [r7, #14]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	f4ff af7c 	bcc.w	8002a40 <ls016b8uy_DrawRGBHLine+0x2c>
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000028c 	.word	0x2000028c
 8002b58:	2000028e 	.word	0x2000028e
 8002b5c:	20000040 	.word	0x20000040
 8002b60:	20000042 	.word	0x20000042

08002b64 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002b6a:	f000 fd17 	bl	800359c <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2010      	movs	r0, #16
 8002b74:	f000 f9e4 	bl	8002f40 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002b78:	200a      	movs	r0, #10
 8002b7a:	f000 fd36 	bl	80035ea <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2001      	movs	r0, #1
 8002b84:	f000 f9dc 	bl	8002f40 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8002b88:	20c8      	movs	r0, #200	; 0xc8
 8002b8a:	f000 fd2e 	bl	80035ea <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	2011      	movs	r0, #17
 8002b94:	f000 f9d4 	bl	8002f40 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8002b98:	2078      	movs	r0, #120	; 0x78
 8002b9a:	f000 fd26 	bl	80035ea <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	2036      	movs	r0, #54	; 0x36
 8002baa:	f000 f9c9 	bl	8002f40 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002bae:	2305      	movs	r3, #5
 8002bb0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	203a      	movs	r0, #58	; 0x3a
 8002bba:	f000 f9c1 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2021      	movs	r0, #33	; 0x21
 8002bc4:	f000 f9bc 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8002bd4:	23ef      	movs	r3, #239	; 0xef
 8002bd6:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2204      	movs	r2, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	202a      	movs	r0, #42	; 0x2a
 8002be0:	f000 f9ae 	bl	8002f40 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8002be4:	2300      	movs	r3, #0
 8002be6:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002be8:	2300      	movs	r3, #0
 8002bea:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002bec:	2300      	movs	r3, #0
 8002bee:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8002bf0:	23ef      	movs	r3, #239	; 0xef
 8002bf2:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	202b      	movs	r0, #43	; 0x2b
 8002bfc:	f000 f9a0 	bl	8002f40 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8002c00:	230c      	movs	r3, #12
 8002c02:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8002c04:	230c      	movs	r3, #12
 8002c06:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002c0c:	2333      	movs	r3, #51	; 0x33
 8002c0e:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8002c10:	2333      	movs	r3, #51	; 0x33
 8002c12:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8002c14:	463b      	mov	r3, r7
 8002c16:	2205      	movs	r2, #5
 8002c18:	4619      	mov	r1, r3
 8002c1a:	20b2      	movs	r0, #178	; 0xb2
 8002c1c:	f000 f990 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8002c20:	2335      	movs	r3, #53	; 0x35
 8002c22:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8002c24:	463b      	mov	r3, r7
 8002c26:	2201      	movs	r2, #1
 8002c28:	4619      	mov	r1, r3
 8002c2a:	20b7      	movs	r0, #183	; 0xb7
 8002c2c:	f000 f988 	bl	8002f40 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8002c30:	231f      	movs	r3, #31
 8002c32:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8002c34:	463b      	mov	r3, r7
 8002c36:	2201      	movs	r2, #1
 8002c38:	4619      	mov	r1, r3
 8002c3a:	20bb      	movs	r0, #187	; 0xbb
 8002c3c:	f000 f980 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8002c40:	232c      	movs	r3, #44	; 0x2c
 8002c42:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002c44:	463b      	mov	r3, r7
 8002c46:	2201      	movs	r2, #1
 8002c48:	4619      	mov	r1, r3
 8002c4a:	20c0      	movs	r0, #192	; 0xc0
 8002c4c:	f000 f978 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8002c50:	2301      	movs	r3, #1
 8002c52:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8002c54:	23c3      	movs	r3, #195	; 0xc3
 8002c56:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	20c2      	movs	r0, #194	; 0xc2
 8002c60:	f000 f96e 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002c64:	2320      	movs	r3, #32
 8002c66:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002c68:	463b      	mov	r3, r7
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	20c4      	movs	r0, #196	; 0xc4
 8002c70:	f000 f966 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002c74:	230f      	movs	r3, #15
 8002c76:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002c78:	463b      	mov	r3, r7
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	20c6      	movs	r0, #198	; 0xc6
 8002c80:	f000 f95e 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002c84:	23a4      	movs	r3, #164	; 0xa4
 8002c86:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002c88:	23a1      	movs	r3, #161	; 0xa1
 8002c8a:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4619      	mov	r1, r3
 8002c92:	20d0      	movs	r0, #208	; 0xd0
 8002c94:	f000 f954 	bl	8002f40 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002c98:	23d0      	movs	r3, #208	; 0xd0
 8002c9a:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8002ca0:	2311      	movs	r3, #17
 8002ca2:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002ca8:	230c      	movs	r3, #12
 8002caa:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002cac:	2315      	movs	r3, #21
 8002cae:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002cb0:	2339      	movs	r3, #57	; 0x39
 8002cb2:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8002cb4:	2333      	movs	r3, #51	; 0x33
 8002cb6:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002cb8:	2350      	movs	r3, #80	; 0x50
 8002cba:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002cbc:	2336      	movs	r3, #54	; 0x36
 8002cbe:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8002cc0:	2313      	movs	r3, #19
 8002cc2:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002cc4:	2314      	movs	r3, #20
 8002cc6:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002cc8:	2329      	movs	r3, #41	; 0x29
 8002cca:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002ccc:	232d      	movs	r3, #45	; 0x2d
 8002cce:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	220e      	movs	r2, #14
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	20e0      	movs	r0, #224	; 0xe0
 8002cd8:	f000 f932 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002cdc:	23d0      	movs	r3, #208	; 0xd0
 8002cde:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002ce8:	2308      	movs	r3, #8
 8002cea:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002cec:	2306      	movs	r3, #6
 8002cee:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8002cf0:	2306      	movs	r3, #6
 8002cf2:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002cf4:	2339      	movs	r3, #57	; 0x39
 8002cf6:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002cf8:	2344      	movs	r3, #68	; 0x44
 8002cfa:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002cfc:	2351      	movs	r3, #81	; 0x51
 8002cfe:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8002d00:	230b      	movs	r3, #11
 8002d02:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8002d04:	2316      	movs	r3, #22
 8002d06:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002d08:	2314      	movs	r3, #20
 8002d0a:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002d0c:	232f      	movs	r3, #47	; 0x2f
 8002d0e:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8002d10:	2331      	movs	r3, #49	; 0x31
 8002d12:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8002d14:	463b      	mov	r3, r7
 8002d16:	220e      	movs	r2, #14
 8002d18:	4619      	mov	r1, r3
 8002d1a:	20e1      	movs	r0, #225	; 0xe1
 8002d1c:	f000 f910 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8002d20:	f000 f847 	bl	8002db2 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8002d24:	2300      	movs	r3, #0
 8002d26:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002d28:	463b      	mov	r3, r7
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	2035      	movs	r0, #53	; 0x35
 8002d30:	f000 f906 	bl	8002f40 <ST7789H2_WriteReg>

}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	723b      	strb	r3, [r7, #8]
 8002d4e:	e025      	b.n	8002d9c <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d120      	bne.n	8002d98 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002d62:	23f0      	movs	r3, #240	; 0xf0
 8002d64:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002d66:	2300      	movs	r3, #0
 8002d68:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	2206      	movs	r2, #6
 8002d74:	4619      	mov	r1, r3
 8002d76:	2033      	movs	r0, #51	; 0x33
 8002d78:	f000 f8e2 	bl	8002f40 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8002d80:	2350      	movs	r3, #80	; 0x50
 8002d82:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	2202      	movs	r2, #2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	2037      	movs	r0, #55	; 0x37
 8002d8e:	f000 f8d7 	bl	8002f40 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002d92:	23c0      	movs	r3, #192	; 0xc0
 8002d94:	723b      	strb	r3, [r7, #8]
 8002d96:	e001      	b.n	8002d9c <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002d98:	2360      	movs	r3, #96	; 0x60
 8002d9a:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002d9c:	f107 0308 	add.w	r3, r7, #8
 8002da0:	2201      	movs	r2, #1
 8002da2:	4619      	mov	r1, r3
 8002da4:	2036      	movs	r0, #54	; 0x36
 8002da6:	f000 f8cb 	bl	8002f40 <ST7789H2_WriteReg>
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2029      	movs	r0, #41	; 0x29
 8002dbc:	f000 f8c0 	bl	8002f40 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2011      	movs	r0, #17
 8002dc6:	f000 f8bb 	bl	8002f40 <ST7789H2_WriteReg>
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8002dd4:	23fe      	movs	r3, #254	; 0xfe
 8002dd6:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4619      	mov	r1, r3
 8002dde:	20bd      	movs	r0, #189	; 0xbd
 8002de0:	f000 f8ae 	bl	8002f40 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2010      	movs	r0, #16
 8002dea:	f000 f8a9 	bl	8002f40 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002dee:	200a      	movs	r0, #10
 8002df0:	f000 fbfb 	bl	80035ea <LCD_IO_Delay>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002e00:	23f0      	movs	r3, #240	; 0xf0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002e10:	23f0      	movs	r3, #240	; 0xf0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002e20:	f000 fbbc 	bl	800359c <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8002e24:	2004      	movs	r0, #4
 8002e26:	f000 f8ae 	bl	8002f86 <ST7789H2_ReadReg>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29b      	uxth	r3, r3
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	80fb      	strh	r3, [r7, #6]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002e42:	2300      	movs	r3, #0
 8002e44:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	3b11      	subs	r3, #17
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	2204      	movs	r2, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	202a      	movs	r0, #42	; 0x2a
 8002e64:	f000 f86c 	bl	8002f40 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002e6c:	88bb      	ldrh	r3, [r7, #4]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002e76:	88bb      	ldrh	r3, [r7, #4]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3b11      	subs	r3, #17
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	2204      	movs	r2, #4
 8002e86:	4619      	mov	r1, r3
 8002e88:	202b      	movs	r0, #43	; 0x2b
 8002e8a:	f000 f859 	bl	8002f40 <ST7789H2_WriteReg>
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	80fb      	strh	r3, [r7, #6]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	80bb      	strh	r3, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002ea8:	88ba      	ldrh	r2, [r7, #4]
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ffbf 	bl	8002e32 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	202c      	movs	r0, #44	; 0x2c
 8002eba:	f000 f841 	bl	8002f40 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fb71 	bl	80035a8 <LCD_IO_WriteData>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	460a      	mov	r2, r1
 8002ed8:	80fb      	strh	r3, [r7, #6]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002ede:	88ba      	ldrh	r2, [r7, #4]
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ffa4 	bl	8002e32 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002eea:	88ba      	ldrh	r2, [r7, #4]
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f9c3 	bl	800327c <ST7789H2_ReadPixel_rgb888>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	733a      	strb	r2, [r7, #12]
 8002efc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f00:	737a      	strb	r2, [r7, #13]
 8002f02:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002f06:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002f08:	7b3b      	ldrb	r3, [r7, #12]
 8002f0a:	08db      	lsrs	r3, r3, #3
 8002f0c:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002f0e:	7b7b      	ldrb	r3, [r7, #13]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	02db      	lsls	r3, r3, #11
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	7dbb      	ldrb	r3, [r7, #22]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	015b      	lsls	r3, r3, #5
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	7d7b      	ldrb	r3, [r7, #21]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002f36:	8a7b      	ldrh	r3, [r7, #18]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fb35 	bl	80035c2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e00a      	b.n	8002f74 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fb1d 	bl	80035a8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3301      	adds	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	79bb      	ldrb	r3, [r7, #6]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d3f0      	bcc.n	8002f5e <ST7789H2_WriteReg+0x1e>
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fb15 	bl	80035c2 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002f98:	f000 fb20 	bl	80035dc <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002f9c:	f000 fb1e 	bl	80035dc <LCD_IO_ReadData>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	b2db      	uxtb	r3, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002fac:	b490      	push	{r4, r7}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	80fb      	strh	r3, [r7, #6]
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80bb      	strh	r3, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	2bef      	cmp	r3, #239	; 0xef
 8002fce:	d803      	bhi.n	8002fd8 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <ST7789H2_SetDisplayWindow+0x94>)
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	8013      	strh	r3, [r2, #0]
 8002fd6:	e002      	b.n	8002fde <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <ST7789H2_SetDisplayWindow+0x94>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002fde:	88bb      	ldrh	r3, [r7, #4]
 8002fe0:	2bef      	cmp	r3, #239	; 0xef
 8002fe2:	d803      	bhi.n	8002fec <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002fe4:	4a17      	ldr	r2, [pc, #92]	; (8003044 <ST7789H2_SetDisplayWindow+0x98>)
 8002fe6:	88bb      	ldrh	r3, [r7, #4]
 8002fe8:	8013      	strh	r3, [r2, #0]
 8002fea:	e002      	b.n	8002ff2 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <ST7789H2_SetDisplayWindow+0x98>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2bf0      	cmp	r3, #240	; 0xf0
 8002ffa:	dc08      	bgt.n	800300e <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002ffc:	887a      	ldrh	r2, [r7, #2]
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	4413      	add	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <ST7789H2_SetDisplayWindow+0x9c>)
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	e002      	b.n	8003014 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <ST7789H2_SetDisplayWindow+0x9c>)
 8003010:	22ef      	movs	r2, #239	; 0xef
 8003012:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8003014:	883a      	ldrh	r2, [r7, #0]
 8003016:	88bb      	ldrh	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	2bf0      	cmp	r3, #240	; 0xf0
 800301c:	dc08      	bgt.n	8003030 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 800301e:	883a      	ldrh	r2, [r7, #0]
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <ST7789H2_SetDisplayWindow+0xa0>)
 800302c:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 800302e:	e002      	b.n	8003036 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <ST7789H2_SetDisplayWindow+0xa0>)
 8003032:	22ef      	movs	r2, #239	; 0xef
 8003034:	801a      	strh	r2, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bc90      	pop	{r4, r7}
 800303e:	4770      	bx	lr
 8003040:	20000290 	.word	0x20000290
 8003044:	20000292 	.word	0x20000292
 8003048:	2000007c 	.word	0x2000007c
 800304c:	2000007e 	.word	0x2000007e

08003050 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	4604      	mov	r4, r0
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4623      	mov	r3, r4
 8003060:	80fb      	strh	r3, [r7, #6]
 8003062:	4603      	mov	r3, r0
 8003064:	80bb      	strh	r3, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	807b      	strh	r3, [r7, #2]
 800306a:	4613      	mov	r3, r2
 800306c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	88bb      	ldrh	r3, [r7, #4]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff feda 	bl	8002e32 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	202c      	movs	r0, #44	; 0x2c
 8003084:	f7ff ff5c 	bl	8002f40 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8003088:	2300      	movs	r3, #0
 800308a:	81fb      	strh	r3, [r7, #14]
 800308c:	e006      	b.n	800309c <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fa89 	bl	80035a8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8003096:	89fb      	ldrh	r3, [r7, #14]
 8003098:	3301      	adds	r3, #1
 800309a:	81fb      	strh	r3, [r7, #14]
 800309c:	89fa      	ldrh	r2, [r7, #14]
 800309e:	883b      	ldrh	r3, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d3f4      	bcc.n	800308e <ST7789H2_DrawHLine+0x3e>
  }  
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}

080030ae <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4604      	mov	r4, r0
 80030b6:	4608      	mov	r0, r1
 80030b8:	4611      	mov	r1, r2
 80030ba:	461a      	mov	r2, r3
 80030bc:	4623      	mov	r3, r4
 80030be:	80fb      	strh	r3, [r7, #6]
 80030c0:	4603      	mov	r3, r0
 80030c2:	80bb      	strh	r3, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80030d0:	887a      	ldrh	r2, [r7, #2]
 80030d2:	88bb      	ldrh	r3, [r7, #4]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff feab 	bl	8002e32 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80030dc:	2200      	movs	r2, #0
 80030de:	2100      	movs	r1, #0
 80030e0:	202c      	movs	r0, #44	; 0x2c
 80030e2:	f7ff ff2d 	bl	8002f40 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	81fb      	strh	r3, [r7, #14]
 80030ea:	e00b      	b.n	8003104 <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80030ec:	887a      	ldrh	r2, [r7, #2]
 80030ee:	89fb      	ldrh	r3, [r7, #14]
 80030f0:	4413      	add	r3, r2
 80030f2:	b299      	uxth	r1, r3
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fecc 	bl	8002e96 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	3301      	adds	r3, #1
 8003102:	81fb      	strh	r3, [r7, #14]
 8003104:	89fa      	ldrh	r2, [r7, #14]
 8003106:	883b      	ldrh	r3, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d3ef      	bcc.n	80030ec <ST7789H2_DrawVLine+0x3e>
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
	...

08003118 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	603a      	str	r2, [r7, #0]
 8003122:	80fb      	strh	r3, [r7, #6]
 8003124:	460b      	mov	r3, r1
 8003126:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <ST7789H2_DrawBitmap+0xe0>)
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	4b30      	ldr	r3, [pc, #192]	; (80031fc <ST7789H2_DrawBitmap+0xe4>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <ST7789H2_DrawBitmap+0xe8>)
 8003146:	881a      	ldrh	r2, [r3, #0]
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <ST7789H2_DrawBitmap+0xec>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	3302      	adds	r3, #2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3304      	adds	r3, #4
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	461a      	mov	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	330a      	adds	r3, #10
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	461a      	mov	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	4413      	add	r3, r2
 800319c:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800319e:	88ba      	ldrh	r2, [r7, #4]
 80031a0:	89bb      	ldrh	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e01d      	b.n	80031e4 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe3c 	bl	8002e32 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b299      	uxth	r1, r3
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	89fa      	ldrh	r2, [r7, #14]
 80031d2:	88f8      	ldrh	r0, [r7, #6]
 80031d4:	f000 f89c 	bl	8003310 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	3301      	adds	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	88bb      	ldrh	r3, [r7, #4]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d8dd      	bhi.n	80031a8 <ST7789H2_DrawBitmap+0x90>
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000007c 	.word	0x2000007c
 80031fc:	20000290 	.word	0x20000290
 8003200:	2000007e 	.word	0x2000007e
 8003204:	20000292 	.word	0x20000292

08003208 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4623      	mov	r3, r4
 8003218:	80fb      	strh	r3, [r7, #6]
 800321a:	4603      	mov	r3, r0
 800321c:	80bb      	strh	r3, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	807b      	strh	r3, [r7, #2]
 8003222:	4613      	mov	r3, r2
 8003224:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800322a:	88bb      	ldrh	r3, [r7, #4]
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e019      	b.n	8003264 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	b29a      	uxth	r2, r3
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fdfa 	bl	8002e32 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	b299      	uxth	r1, r3
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	4413      	add	r3, r2
 8003250:	887a      	ldrh	r2, [r7, #2]
 8003252:	88f8      	ldrh	r0, [r7, #6]
 8003254:	f000 f85c 	bl	8003310 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3301      	adds	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3301      	adds	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	88ba      	ldrh	r2, [r7, #4]
 8003266:	883b      	ldrh	r3, [r7, #0]
 8003268:	4413      	add	r3, r2
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4293      	cmp	r3, r2
 8003270:	d3de      	bcc.n	8003230 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}

0800327c <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	460a      	mov	r2, r1
 8003286:	80fb      	strh	r3, [r7, #6]
 8003288:	4613      	mov	r3, r2
 800328a:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800328c:	88ba      	ldrh	r2, [r7, #4]
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fdcd 	bl	8002e32 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	202e      	movs	r0, #46	; 0x2e
 800329e:	f7ff fe4f 	bl	8002f40 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80032a2:	f000 f99b 	bl	80035dc <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80032a6:	f000 f999 	bl	80035dc <LCD_IO_ReadData>
 80032aa:	4603      	mov	r3, r0
 80032ac:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80032ae:	f000 f995 	bl	80035dc <LCD_IO_ReadData>
 80032b2:	4603      	mov	r3, r0
 80032b4:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	121b      	asrs	r3, r3, #8
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f023 0303 	bic.w	r3, r3, #3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80032c4:	8afb      	ldrh	r3, [r7, #22]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80032d0:	8abb      	ldrh	r3, [r7, #20]
 80032d2:	121b      	asrs	r3, r3, #8
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	f107 020c 	add.w	r2, r7, #12
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	4611      	mov	r1, r2
 80032ea:	8019      	strh	r1, [r3, #0]
 80032ec:	3302      	adds	r3, #2
 80032ee:	0c12      	lsrs	r2, r2, #16
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	2300      	movs	r3, #0
 80032f4:	7c3a      	ldrb	r2, [r7, #16]
 80032f6:	f362 0307 	bfi	r3, r2, #0, #8
 80032fa:	7c7a      	ldrb	r2, [r7, #17]
 80032fc:	f362 230f 	bfi	r3, r2, #8, #8
 8003300:	7cba      	ldrb	r2, [r7, #18]
 8003302:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	4603      	mov	r3, r0
 800331a:	81fb      	strh	r3, [r7, #14]
 800331c:	460b      	mov	r3, r1
 800331e:	81bb      	strh	r3, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800332c:	2200      	movs	r2, #0
 800332e:	2100      	movs	r1, #0
 8003330:	202c      	movs	r0, #44	; 0x2c
 8003332:	f7ff fe05 	bl	8002f40 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e029      	b.n	8003390 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <ST7789H2_DrawRGBHLine+0x98>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4293      	cmp	r3, r2
 8003346:	d320      	bcc.n	800338a <ST7789H2_DrawRGBHLine+0x7a>
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <ST7789H2_DrawRGBHLine+0x9c>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	89ba      	ldrh	r2, [r7, #12]
 800334e:	429a      	cmp	r2, r3
 8003350:	d31b      	bcc.n	800338a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <ST7789H2_DrawRGBHLine+0xa0>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4293      	cmp	r3, r2
 800335c:	d815      	bhi.n	800338a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <ST7789H2_DrawRGBHLine+0xa4>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	89ba      	ldrh	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d810      	bhi.n	800338a <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003368:	897a      	ldrh	r2, [r7, #10]
 800336a:	89fb      	ldrh	r3, [r7, #14]
 800336c:	441a      	add	r2, r3
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	429a      	cmp	r2, r3
 8003372:	d007      	beq.n	8003384 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f912 	bl	80035a8 <LCD_IO_WriteData>
      }      
      i++;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	3301      	adds	r3, #1
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	897a      	ldrh	r2, [r7, #10]
 8003392:	89fb      	ldrh	r3, [r7, #14]
 8003394:	4413      	add	r3, r2
 8003396:	461a      	mov	r2, r3
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4293      	cmp	r3, r2
 800339c:	d3ce      	bcc.n	800333c <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000290 	.word	0x20000290
 80033ac:	20000292 	.word	0x20000292
 80033b0:	2000007c 	.word	0x2000007c
 80033b4:	2000007e 	.word	0x2000007e

080033b8 <FMC_BANK1_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK1 MSP.
  */
static void FMC_BANK1_MspInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	4a2d      	ldr	r2, [pc, #180]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6393      	str	r3, [r2, #56]	; 0x38
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a26      	ldr	r2, [pc, #152]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 80033e4:	f043 0308 	orr.w	r3, r3, #8
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 8003400:	f043 0310 	orr.w	r3, r3, #16
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 800341c:	f043 0320 	orr.w	r3, r3, #32
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <FMC_BANK1_MspInit+0xc4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003432:	2301      	movs	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003436:	2303      	movs	r3, #3
 8003438:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800343a:	230c      	movs	r3, #12
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 800343e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003442:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	480d      	ldr	r0, [pc, #52]	; (8003480 <FMC_BANK1_MspInit+0xc8>)
 800344c:	f000 fd1c 	bl	8003e88 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8003450:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003454:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	4619      	mov	r1, r3
 800345c:	4809      	ldr	r0, [pc, #36]	; (8003484 <FMC_BANK1_MspInit+0xcc>)
 800345e:	f000 fd13 	bl	8003e88 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 ;  
 8003462:	2301      	movs	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	4806      	ldr	r0, [pc, #24]	; (8003488 <FMC_BANK1_MspInit+0xd0>)
 800346e:	f000 fd0b 	bl	8003e88 <HAL_GPIO_Init>
}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	; 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40021000 	.word	0x40021000
 8003488:	40021400 	.word	0x40021400

0800348c <FMC_BANK1_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
static void FMC_BANK1_Init(void) 
{  
 800348c:	b580      	push	{r7, lr}
 800348e:	b0a2      	sub	sp, #136	; 0x88
 8003490:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8003492:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <FMC_BANK1_Init+0xac>)
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Timing for READING */
  sram_timing.AddressSetupTime      = 9;
 800349c:	2309      	movs	r3, #9
 800349e:	61fb      	str	r3, [r7, #28]
  sram_timing.AddressHoldTime       = 1;
 80034a0:	2301      	movs	r3, #1
 80034a2:	623b      	str	r3, [r7, #32]
  sram_timing.DataSetupTime         = 36;
 80034a4:	2324      	movs	r3, #36	; 0x24
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.BusTurnAroundDuration = 1;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.CLKDivision           = 2;
 80034ac:	2302      	movs	r3, #2
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sram_timing.DataLatency           = 2;
 80034b0:	2302      	movs	r3, #2
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 80034b4:	2300      	movs	r3, #0
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Timing for WRITTING*/
  sram_timing_write.AddressSetupTime      = 1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80034bc:	2301      	movs	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 7;
 80034c0:	2307      	movs	r3, #7
 80034c2:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
  sram_timing_write.CLKDivision           = 2;
 80034c8:	2302      	movs	r3, #2
 80034ca:	613b      	str	r3, [r7, #16]
  sram_timing_write.DataLatency           = 2;
 80034cc:	2302      	movs	r3, #2
 80034ce:	617b      	str	r3, [r7, #20]
  sram_timing_write.AccessMode            = FSMC_ACCESS_MODE_A;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 80034dc:	2300      	movs	r3, #0
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80034e0:	2310      	movs	r3, #16
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80034f0:	2300      	movs	r3, #0
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80034f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f8:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 80034fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003502:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 800350c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003510:	67bb      	str	r3, [r7, #120]	; 0x78
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8003512:	2300      	movs	r3, #0
 8003514:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003516:	2300      	movs	r3, #0
 8003518:	677b      	str	r3, [r7, #116]	; 0x74
  
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800351a:	f7ff ff4d 	bl	80033b8 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800351e:	463a      	mov	r2, r7
 8003520:	f107 011c 	add.w	r1, r7, #28
 8003524:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003528:	4618      	mov	r0, r3
 800352a:	f002 fb45 	bl	8005bb8 <HAL_SRAM_Init>
}
 800352e:	bf00      	nop
 8003530:	3788      	adds	r7, #136	; 0x88
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	a0000104 	.word	0xa0000104

0800353c <FMC_BANK1_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK1_WriteData(uint16_t Data) 
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1->RAM = Data;
 8003546:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800354e:	f3bf 8f4f 	dsb	sy
}
 8003552:	bf00      	nop
  __DSB();
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <FMC_BANK1_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK1_WriteReg(uint8_t Reg) 
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1->REG = Reg;
 800356a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800356e:	79fa      	ldrb	r2, [r7, #7]
 8003570:	b292      	uxth	r2, r2
 8003572:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003574:	f3bf 8f4f 	dsb	sy
}
 8003578:	bf00      	nop
  __DSB();
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <FMC_BANK1_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void) 
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  return FMC_BANK1->RAM;
 800358a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800358e:	885b      	ldrh	r3, [r3, #2]
 8003590:	b29b      	uxth	r3, r3
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 80035a0:	f7ff ff74 	bl	800348c <FMC_BANK1_Init>
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ffc1 	bl	800353c <FMC_BANK1_WriteData>
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4603      	mov	r3, r0
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ffc6 	bl	8003560 <FMC_BANK1_WriteReg>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 80035e0:	f7ff ffd1 	bl	8003586 <FMC_BANK1_ReadData>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	bd80      	pop	{r7, pc}

080035ea <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fb12 	bl	8003c1c <HAL_Delay>
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8003604:	2001      	movs	r0, #1
 8003606:	f000 f803 	bl	8003610 <BSP_LCD_InitEx>
 800360a:	4603      	mov	r3, r0
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}

08003610 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800361c:	4b37      	ldr	r3, [pc, #220]	; (80036fc <BSP_LCD_InitEx+0xec>)
 800361e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003622:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <BSP_LCD_InitEx+0xec>)
 8003626:	4a36      	ldr	r2, [pc, #216]	; (8003700 <BSP_LCD_InitEx+0xf0>)
 8003628:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <BSP_LCD_InitEx+0xec>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8003630:	f000 f98c 	bl	800394c <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003634:	2201      	movs	r2, #1
 8003636:	2120      	movs	r1, #32
 8003638:	4832      	ldr	r0, [pc, #200]	; (8003704 <BSP_LCD_InitEx+0xf4>)
 800363a:	f000 fdb9 	bl	80041b0 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800363e:	2200      	movs	r2, #0
 8003640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003644:	4830      	ldr	r0, [pc, #192]	; (8003708 <BSP_LCD_InitEx+0xf8>)
 8003646:	f000 fdb3 	bl	80041b0 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800364a:	2005      	movs	r0, #5
 800364c:	f000 fae6 	bl	8003c1c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003650:	2201      	movs	r2, #1
 8003652:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003656:	482c      	ldr	r0, [pc, #176]	; (8003708 <BSP_LCD_InitEx+0xf8>)
 8003658:	f000 fdaa 	bl	80041b0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800365c:	200a      	movs	r0, #10
 800365e:	f000 fadd 	bl	8003c1c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8003662:	2200      	movs	r2, #0
 8003664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003668:	4827      	ldr	r0, [pc, #156]	; (8003708 <BSP_LCD_InitEx+0xf8>)
 800366a:	f000 fda1 	bl	80041b0 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800366e:	2014      	movs	r0, #20
 8003670:	f000 fad4 	bl	8003c1c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003674:	2201      	movs	r2, #1
 8003676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800367a:	4823      	ldr	r0, [pc, #140]	; (8003708 <BSP_LCD_InitEx+0xf8>)
 800367c:	f000 fd98 	bl	80041b0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8003680:	200a      	movs	r0, #10
 8003682:	f000 facb 	bl	8003c1c <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <BSP_LCD_InitEx+0xfc>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4798      	blx	r3
 800368c:	4603      	mov	r3, r0
 800368e:	2b85      	cmp	r3, #133	; 0x85
 8003690:	d119      	bne.n	80036c6 <BSP_LCD_InitEx+0xb6>
  {    
    LcdDrv = &ST7789H2_drv;
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <BSP_LCD_InitEx+0x100>)
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <BSP_LCD_InitEx+0xfc>)
 8003696:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <BSP_LCD_InitEx+0x100>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7ff fb48 	bl	8002d3c <ST7789H2_SetOrientation>
 80036ac:	e005      	b.n	80036ba <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d102      	bne.n	80036ba <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80036b4:	2002      	movs	r0, #2
 80036b6:	f7ff fb41 	bl	8002d3c <ST7789H2_SetOrientation>
    {
      /* Default landscape orientation is selected */
    }

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036ba:	4816      	ldr	r0, [pc, #88]	; (8003714 <BSP_LCD_InitEx+0x104>)
 80036bc:	f000 f856 	bl	800376c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e014      	b.n	80036f0 <BSP_LCD_InitEx+0xe0>
  }
  else if(ls016b8uy_drv.ReadID() == LS016B8UY_ID)
 80036c6:	4b14      	ldr	r3, [pc, #80]	; (8003718 <BSP_LCD_InitEx+0x108>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4798      	blx	r3
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10b      	bne.n	80036f0 <BSP_LCD_InitEx+0xe0>
  {
    LcdDrv = &ls016b8uy_drv;
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <BSP_LCD_InitEx+0x100>)
 80036da:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <BSP_LCD_InitEx+0x108>)
 80036dc:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <BSP_LCD_InitEx+0x100>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036e6:	480b      	ldr	r0, [pc, #44]	; (8003714 <BSP_LCD_InitEx+0x104>)
 80036e8:	f000 f840 	bl	800376c <BSP_LCD_SetFont>
    
    ret = LCD_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000620 	.word	0x20000620
 8003700:	20000080 	.word	0x20000080
 8003704:	40021400 	.word	0x40021400
 8003708:	40020c00 	.word	0x40020c00
 800370c:	20000044 	.word	0x20000044
 8003710:	20000294 	.word	0x20000294
 8003714:	20000088 	.word	0x20000088
 8003718:	20000008 	.word	0x20000008

0800371c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.   
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <BSP_LCD_GetXSize+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	4798      	blx	r3
 8003728:	4603      	mov	r3, r0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000294 	.word	0x20000294

08003734 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <BSP_LCD_GetYSize+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4798      	blx	r3
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000294 	.word	0x20000294

0800374c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	4a03      	ldr	r2, [pc, #12]	; (8003768 <BSP_LCD_SetTextColor+0x1c>)
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20000620 	.word	0x20000620

0800376c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <BSP_LCD_SetFont+0x1c>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6093      	str	r3, [r2, #8]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000620 	.word	0x20000620

0800378c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <BSP_LCD_Clear+0x68>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <BSP_LCD_Clear+0x68>)
 80037a8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80037aa:	f7ff ffc3 	bl	8003734 <BSP_LCD_GetYSize>
 80037ae:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e00d      	b.n	80037d2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	b29c      	uxth	r4, r3
 80037ba:	f7ff ffaf 	bl	800371c <BSP_LCD_GetXSize>
 80037be:	4603      	mov	r3, r0
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	4621      	mov	r1, r4
 80037c6:	2000      	movs	r0, #0
 80037c8:	f000 f85c 	bl	8003884 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3301      	adds	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d3ed      	bcc.n	80037b6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 80037da:	4a06      	ldr	r2, [pc, #24]	; (80037f4 <BSP_LCD_Clear+0x68>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <BSP_LCD_Clear+0x68>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ffb0 	bl	800374c <BSP_LCD_SetTextColor>
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd90      	pop	{r4, r7, pc}
 80037f4:	20000620 	.word	0x20000620

080037f8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *         This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	80fb      	strh	r3, [r7, #6]
 8003802:	460b      	mov	r3, r1
 8003804:	80bb      	strh	r3, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <BSP_LCD_DisplayChar+0x50>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <BSP_LCD_DisplayChar+0x50>)
 8003816:	6889      	ldr	r1, [r1, #8]
 8003818:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800381a:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <BSP_LCD_DisplayChar+0x50>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	889b      	ldrh	r3, [r3, #4]
 8003824:	3307      	adds	r3, #7
 8003826:	2b00      	cmp	r3, #0
 8003828:	da00      	bge.n	800382c <BSP_LCD_DisplayChar+0x34>
 800382a:	3307      	adds	r3, #7
 800382c:	10db      	asrs	r3, r3, #3
 800382e:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003832:	441a      	add	r2, r3
 8003834:	88b9      	ldrh	r1, [r7, #4]
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f8e3 	bl	8003a04 <DrawChar>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000620 	.word	0x20000620

0800384c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
 8003856:	460b      	mov	r3, r1
 8003858:	80bb      	strh	r3, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <BSP_LCD_DrawPixel+0x34>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <BSP_LCD_DrawPixel+0x34>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	88b9      	ldrh	r1, [r7, #4]
 8003872:	88f8      	ldrh	r0, [r7, #6]
 8003874:	4798      	blx	r3
  }
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000294 	.word	0x20000294

08003884 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
 800388e:	460b      	mov	r3, r1
 8003890:	80bb      	strh	r3, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <BSP_LCD_DrawHLine+0x6c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80038a4:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <BSP_LCD_DrawHLine+0x6c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a1c      	ldr	r4, [r3, #32]
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <BSP_LCD_DrawHLine+0x70>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b298      	uxth	r0, r3
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	88ba      	ldrh	r2, [r7, #4]
 80038b4:	88f9      	ldrh	r1, [r7, #6]
 80038b6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80038b8:	e015      	b.n	80038e6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e00e      	b.n	80038de <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	4413      	add	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <BSP_LCD_DrawHLine+0x70>)
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	b292      	uxth	r2, r2
 80038d0:	88b9      	ldrh	r1, [r7, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ffba 	bl	800384c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d3ec      	bcc.n	80038c0 <BSP_LCD_DrawHLine+0x3c>
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000294 	.word	0x20000294
 80038f4:	20000620 	.word	0x20000620

080038f8 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4623      	mov	r3, r4
 8003908:	80fb      	strh	r3, [r7, #6]
 800390a:	4603      	mov	r3, r0
 800390c:	80bb      	strh	r3, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	807b      	strh	r3, [r7, #2]
 8003912:	4613      	mov	r3, r2
 8003914:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <BSP_LCD_FillRect+0x50>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff15 	bl	800374c <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8003922:	88bb      	ldrh	r3, [r7, #4]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	80ba      	strh	r2, [r7, #4]
 8003928:	887a      	ldrh	r2, [r7, #2]
 800392a:	88f8      	ldrh	r0, [r7, #6]
 800392c:	4619      	mov	r1, r3
 800392e:	f7ff ffa9 	bl	8003884 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8003932:	883b      	ldrh	r3, [r7, #0]
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	803a      	strh	r2, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f2      	bne.n	8003922 <BSP_LCD_FillRect+0x2a>
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	20000620 	.word	0x20000620

0800394c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 8003978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 8003994:	f043 0320 	orr.w	r3, r3, #32
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <BSP_LCD_MspInit+0xa8>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 80039a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80039b0:	2302      	movs	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039b4:	2301      	movs	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	4619      	mov	r1, r3
 80039be:	480e      	ldr	r0, [pc, #56]	; (80039f8 <BSP_LCD_MspInit+0xac>)
 80039c0:	f000 fa62 	bl	8003e88 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80039c4:	2308      	movs	r3, #8
 80039c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	4619      	mov	r1, r3
 80039d2:	480a      	ldr	r0, [pc, #40]	; (80039fc <BSP_LCD_MspInit+0xb0>)
 80039d4:	f000 fa58 	bl	8003e88 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80039d8:	2320      	movs	r3, #32
 80039da:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039dc:	2301      	movs	r3, #1
 80039de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4619      	mov	r1, r3
 80039e6:	4806      	ldr	r0, [pc, #24]	; (8003a00 <BSP_LCD_MspInit+0xb4>)
 80039e8:	f000 fa4e 	bl	8003e88 <HAL_GPIO_Init>
}
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40021400 	.word	0x40021400

08003a04 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	603a      	str	r2, [r7, #0]
 8003a0e:	80fb      	strh	r3, [r7, #6]
 8003a10:	460b      	mov	r3, r1
 8003a12:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003a1c:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <DrawChar+0x130>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	88db      	ldrh	r3, [r3, #6]
 8003a22:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8003a24:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <DrawChar+0x130>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	889b      	ldrh	r3, [r3, #4]
 8003a2a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003a2c:	8a3b      	ldrh	r3, [r7, #16]
 8003a2e:	3307      	adds	r3, #7
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	da00      	bge.n	8003a36 <DrawChar+0x32>
 8003a34:	3307      	adds	r3, #7
 8003a36:	10db      	asrs	r3, r3, #3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	8a3b      	ldrh	r3, [r7, #16]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e069      	b.n	8003b20 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003a4c:	8a3b      	ldrh	r3, [r7, #16]
 8003a4e:	3307      	adds	r3, #7
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da00      	bge.n	8003a56 <DrawChar+0x52>
 8003a54:	3307      	adds	r3, #7
 8003a56:	10db      	asrs	r3, r3, #3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fb03 f302 	mul.w	r3, r3, r2
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003a66:	8a3b      	ldrh	r3, [r7, #16]
 8003a68:	3307      	adds	r3, #7
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da00      	bge.n	8003a70 <DrawChar+0x6c>
 8003a6e:	3307      	adds	r3, #7
 8003a70:	10db      	asrs	r3, r3, #3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d002      	beq.n	8003a7c <DrawChar+0x78>
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d004      	beq.n	8003a84 <DrawChar+0x80>
 8003a7a:	e00c      	b.n	8003a96 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	617b      	str	r3, [r7, #20]
      break;    
 8003a82:	e016      	b.n	8003ab2 <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	3201      	adds	r2, #1
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
      break;
 8003a94:	e00d      	b.n	8003ab2 <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	041a      	lsls	r2, r3, #16
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	3202      	adds	r2, #2
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
      break;
 8003ab0:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e029      	b.n	8003b0c <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003ab8:	8a3a      	ldrh	r2, [r7, #16]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	1ad2      	subs	r2, r2, r3
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	4413      	add	r3, r2
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <DrawChar+0x130>)
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	88b9      	ldrh	r1, [r7, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff feb0 	bl	800384c <BSP_LCD_DrawPixel>
 8003aec:	e00b      	b.n	8003b06 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	4413      	add	r3, r2
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <DrawChar+0x130>)
 8003afa:	6852      	ldr	r2, [r2, #4]
 8003afc:	b292      	uxth	r2, r2
 8003afe:	88b9      	ldrh	r1, [r7, #4]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fea3 	bl	800384c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	8a3b      	ldrh	r3, [r7, #16]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3d1      	bcc.n	8003ab8 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8003b14:	88bb      	ldrh	r3, [r7, #4]
 8003b16:	3301      	adds	r3, #1
 8003b18:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	8a7b      	ldrh	r3, [r7, #18]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d391      	bcc.n	8003a4c <DrawChar+0x48>
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000620 	.word	0x20000620

08003b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <HAL_Init+0x40>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <HAL_Init+0x40>)
 8003b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_Init+0x40>)
 8003b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_Init+0x40>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b60:	2003      	movs	r0, #3
 8003b62:	f000 f94f 	bl	8003e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f000 f808 	bl	8003b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b6c:	f7fe f8bc 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023c00 	.word	0x40023c00

08003b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_InitTick+0x54>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_InitTick+0x58>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f967 	bl	8003e6e <HAL_SYSTICK_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00e      	b.n	8003bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d80a      	bhi.n	8003bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f000 f92f 	bl	8003e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bbc:	4a06      	ldr	r2, [pc, #24]	; (8003bd8 <HAL_InitTick+0x5c>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	20000094 	.word	0x20000094
 8003bd8:	20000090 	.word	0x20000090

08003bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_IncTick+0x20>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_IncTick+0x24>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_IncTick+0x24>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000094 	.word	0x20000094
 8003c00:	2000062c 	.word	0x2000062c

08003c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_GetTick+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	2000062c 	.word	0x2000062c

08003c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff ffee 	bl	8003c04 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d005      	beq.n	8003c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_Delay+0x44>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c42:	bf00      	nop
 8003c44:	f7ff ffde 	bl	8003c04 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d8f7      	bhi.n	8003c44 <HAL_Delay+0x28>
  {
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000094 	.word	0x20000094

08003c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c80:	4013      	ands	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	60d3      	str	r3, [r2, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 0307 	and.w	r3, r3, #7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0b      	blt.n	8003cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <__NVIC_EnableIRQ+0x38>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2001      	movs	r0, #1
 8003cea:	fa00 f202 	lsl.w	r2, r0, r2
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db0a      	blt.n	8003d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	490c      	ldr	r1, [pc, #48]	; (8003d50 <__NVIC_SetPriority+0x4c>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	440b      	add	r3, r1
 8003d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d2c:	e00a      	b.n	8003d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4908      	ldr	r1, [pc, #32]	; (8003d54 <__NVIC_SetPriority+0x50>)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3b04      	subs	r3, #4
 8003d3c:	0112      	lsls	r2, r2, #4
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	440b      	add	r3, r1
 8003d42:	761a      	strb	r2, [r3, #24]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f1c3 0307 	rsb	r3, r3, #7
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	bf28      	it	cs
 8003d76:	2304      	movcs	r3, #4
 8003d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d902      	bls.n	8003d88 <NVIC_EncodePriority+0x30>
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3b03      	subs	r3, #3
 8003d86:	e000      	b.n	8003d8a <NVIC_EncodePriority+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da0:	f04f 31ff 	mov.w	r1, #4294967295
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	43d9      	mvns	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	4313      	orrs	r3, r2
         );
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd0:	d301      	bcc.n	8003dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00f      	b.n	8003df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <SysTick_Config+0x40>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dde:	210f      	movs	r1, #15
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	f7ff ff8e 	bl	8003d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <SysTick_Config+0x40>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <SysTick_Config+0x40>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010

08003e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff29 	bl	8003c64 <__NVIC_SetPriorityGrouping>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2c:	f7ff ff3e 	bl	8003cac <__NVIC_GetPriorityGrouping>
 8003e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff ff8e 	bl	8003d58 <NVIC_EncodePriority>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff5d 	bl	8003d04 <__NVIC_SetPriority>
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff31 	bl	8003cc8 <__NVIC_EnableIRQ>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ffa2 	bl	8003dc0 <SysTick_Config>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e165      	b.n	8004170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	f040 8154 	bne.w	800416a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d005      	beq.n	8003eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d130      	bne.n	8003f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f10:	2201      	movs	r2, #1
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 0201 	and.w	r2, r3, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d017      	beq.n	8003f78 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d123      	bne.n	8003fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3208      	adds	r2, #8
 8003f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	08da      	lsrs	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3208      	adds	r2, #8
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0203 	and.w	r2, r3, #3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80ae 	beq.w	800416a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	4b5d      	ldr	r3, [pc, #372]	; (8004188 <HAL_GPIO_Init+0x300>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	4a5c      	ldr	r2, [pc, #368]	; (8004188 <HAL_GPIO_Init+0x300>)
 8004018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401c:	6453      	str	r3, [r2, #68]	; 0x44
 800401e:	4b5a      	ldr	r3, [pc, #360]	; (8004188 <HAL_GPIO_Init+0x300>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800402a:	4a58      	ldr	r2, [pc, #352]	; (800418c <HAL_GPIO_Init+0x304>)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3302      	adds	r3, #2
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	220f      	movs	r2, #15
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4f      	ldr	r2, [pc, #316]	; (8004190 <HAL_GPIO_Init+0x308>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x21a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4e      	ldr	r2, [pc, #312]	; (8004194 <HAL_GPIO_Init+0x30c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x216>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4d      	ldr	r2, [pc, #308]	; (8004198 <HAL_GPIO_Init+0x310>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x212>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4c      	ldr	r2, [pc, #304]	; (800419c <HAL_GPIO_Init+0x314>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x20e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4b      	ldr	r2, [pc, #300]	; (80041a0 <HAL_GPIO_Init+0x318>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x20a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4a      	ldr	r2, [pc, #296]	; (80041a4 <HAL_GPIO_Init+0x31c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x206>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a49      	ldr	r2, [pc, #292]	; (80041a8 <HAL_GPIO_Init+0x320>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x202>
 8004086:	2306      	movs	r3, #6
 8004088:	e00c      	b.n	80040a4 <HAL_GPIO_Init+0x21c>
 800408a:	2307      	movs	r3, #7
 800408c:	e00a      	b.n	80040a4 <HAL_GPIO_Init+0x21c>
 800408e:	2305      	movs	r3, #5
 8004090:	e008      	b.n	80040a4 <HAL_GPIO_Init+0x21c>
 8004092:	2304      	movs	r3, #4
 8004094:	e006      	b.n	80040a4 <HAL_GPIO_Init+0x21c>
 8004096:	2303      	movs	r3, #3
 8004098:	e004      	b.n	80040a4 <HAL_GPIO_Init+0x21c>
 800409a:	2302      	movs	r3, #2
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_Init+0x21c>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_GPIO_Init+0x21c>
 80040a2:	2300      	movs	r3, #0
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	4093      	lsls	r3, r2
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b4:	4935      	ldr	r1, [pc, #212]	; (800418c <HAL_GPIO_Init+0x304>)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3302      	adds	r3, #2
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c2:	4b3a      	ldr	r3, [pc, #232]	; (80041ac <HAL_GPIO_Init+0x324>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e6:	4a31      	ldr	r2, [pc, #196]	; (80041ac <HAL_GPIO_Init+0x324>)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040ec:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_GPIO_Init+0x324>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004110:	4a26      	ldr	r2, [pc, #152]	; (80041ac <HAL_GPIO_Init+0x324>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004116:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_GPIO_Init+0x324>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_GPIO_Init+0x324>)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_GPIO_Init+0x324>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004164:	4a11      	ldr	r2, [pc, #68]	; (80041ac <HAL_GPIO_Init+0x324>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	f67f ae96 	bls.w	8003ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3724      	adds	r7, #36	; 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	40013800 	.word	0x40013800
 8004190:	40020000 	.word	0x40020000
 8004194:	40020400 	.word	0x40020400
 8004198:	40020800 	.word	0x40020800
 800419c:	40020c00 	.word	0x40020c00
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40021400 	.word	0x40021400
 80041a8:	40021800 	.word	0x40021800
 80041ac:	40013c00 	.word	0x40013c00

080041b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
 80041bc:	4613      	mov	r3, r2
 80041be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c0:	787b      	ldrb	r3, [r7, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041cc:	e003      	b.n	80041d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ce:	887b      	ldrh	r3, [r7, #2]
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	619a      	str	r2, [r3, #24]
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e12b      	b.n	800444e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd fd94 	bl	8001d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004248:	f001 fa0a 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 800424c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4a81      	ldr	r2, [pc, #516]	; (8004458 <HAL_I2C_Init+0x274>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d807      	bhi.n	8004268 <HAL_I2C_Init+0x84>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a80      	ldr	r2, [pc, #512]	; (800445c <HAL_I2C_Init+0x278>)
 800425c:	4293      	cmp	r3, r2
 800425e:	bf94      	ite	ls
 8004260:	2301      	movls	r3, #1
 8004262:	2300      	movhi	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e006      	b.n	8004276 <HAL_I2C_Init+0x92>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a7d      	ldr	r2, [pc, #500]	; (8004460 <HAL_I2C_Init+0x27c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	bf94      	ite	ls
 8004270:	2301      	movls	r3, #1
 8004272:	2300      	movhi	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0e7      	b.n	800444e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a78      	ldr	r2, [pc, #480]	; (8004464 <HAL_I2C_Init+0x280>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	0c9b      	lsrs	r3, r3, #18
 8004288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_I2C_Init+0x274>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d802      	bhi.n	80042b8 <HAL_I2C_Init+0xd4>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	3301      	adds	r3, #1
 80042b6:	e009      	b.n	80042cc <HAL_I2C_Init+0xe8>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	4a69      	ldr	r2, [pc, #420]	; (8004468 <HAL_I2C_Init+0x284>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	3301      	adds	r3, #1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	495c      	ldr	r1, [pc, #368]	; (8004458 <HAL_I2C_Init+0x274>)
 80042e8:	428b      	cmp	r3, r1
 80042ea:	d819      	bhi.n	8004320 <HAL_I2C_Init+0x13c>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1e59      	subs	r1, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004300:	400b      	ands	r3, r1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_I2C_Init+0x138>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1e59      	subs	r1, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fbb1 f3f3 	udiv	r3, r1, r3
 8004314:	3301      	adds	r3, #1
 8004316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431a:	e051      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 800431c:	2304      	movs	r3, #4
 800431e:	e04f      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d111      	bne.n	800434c <HAL_I2C_Init+0x168>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1e58      	subs	r0, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	440b      	add	r3, r1
 8004336:	fbb0 f3f3 	udiv	r3, r0, r3
 800433a:	3301      	adds	r3, #1
 800433c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e012      	b.n	8004372 <HAL_I2C_Init+0x18e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1e58      	subs	r0, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	0099      	lsls	r1, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004362:	3301      	adds	r3, #1
 8004364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Init+0x196>
 8004376:	2301      	movs	r3, #1
 8004378:	e022      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10e      	bne.n	80043a0 <HAL_I2C_Init+0x1bc>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e58      	subs	r0, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6859      	ldr	r1, [r3, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	440b      	add	r3, r1
 8004390:	fbb0 f3f3 	udiv	r3, r0, r3
 8004394:	3301      	adds	r3, #1
 8004396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	e00f      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1e58      	subs	r0, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	0099      	lsls	r1, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	6809      	ldr	r1, [r1, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6911      	ldr	r1, [r2, #16]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68d2      	ldr	r2, [r2, #12]
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	430b      	orrs	r3, r1
 8004402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	000186a0 	.word	0x000186a0
 800445c:	001e847f 	.word	0x001e847f
 8004460:	003d08ff 	.word	0x003d08ff
 8004464:	431bde83 	.word	0x431bde83
 8004468:	10624dd3 	.word	0x10624dd3

0800446c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	460b      	mov	r3, r1
 800447a:	817b      	strh	r3, [r7, #10]
 800447c:	4613      	mov	r3, r2
 800447e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004480:	f7ff fbc0 	bl	8003c04 <HAL_GetTick>
 8004484:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b20      	cmp	r3, #32
 8004490:	f040 80e0 	bne.w	8004654 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2319      	movs	r3, #25
 800449a:	2201      	movs	r2, #1
 800449c:	4970      	ldr	r1, [pc, #448]	; (8004660 <HAL_I2C_Master_Transmit+0x1f4>)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fc72 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0d3      	b.n	8004656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_I2C_Master_Transmit+0x50>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e0cc      	b.n	8004656 <HAL_I2C_Master_Transmit+0x1ea>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d007      	beq.n	80044e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2221      	movs	r2, #33	; 0x21
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2210      	movs	r2, #16
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	893a      	ldrh	r2, [r7, #8]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a50      	ldr	r2, [pc, #320]	; (8004664 <HAL_I2C_Master_Transmit+0x1f8>)
 8004522:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004524:	8979      	ldrh	r1, [r7, #10]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6a3a      	ldr	r2, [r7, #32]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fac2 	bl	8004ab4 <I2C_MasterRequestWrite>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e08d      	b.n	8004656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004550:	e066      	b.n	8004620 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	6a39      	ldr	r1, [r7, #32]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fcec 	bl	8004f34 <I2C_WaitOnTXEFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b04      	cmp	r3, #4
 8004568:	d107      	bne.n	800457a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06b      	b.n	8004656 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d11b      	bne.n	80045f4 <HAL_I2C_Master_Transmit+0x188>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d017      	beq.n	80045f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	6a39      	ldr	r1, [r7, #32]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fcdc 	bl	8004fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b04      	cmp	r3, #4
 800460a:	d107      	bne.n	800461c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e01a      	b.n	8004656 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d194      	bne.n	8004552 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	00100002 	.word	0x00100002
 8004664:	ffff0000 	.word	0xffff0000

08004668 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08c      	sub	sp, #48	; 0x30
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004682:	f7ff fabf 	bl	8003c04 <HAL_GetTick>
 8004686:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b20      	cmp	r3, #32
 8004692:	f040 8208 	bne.w	8004aa6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2319      	movs	r3, #25
 800469c:	2201      	movs	r2, #1
 800469e:	497b      	ldr	r1, [pc, #492]	; (800488c <HAL_I2C_Mem_Read+0x224>)
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fb71 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
 80046ae:	e1fb      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_I2C_Mem_Read+0x56>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e1f4      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d007      	beq.n	80046e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2222      	movs	r2, #34	; 0x22
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a5b      	ldr	r2, [pc, #364]	; (8004890 <HAL_I2C_Mem_Read+0x228>)
 8004724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004726:	88f8      	ldrh	r0, [r7, #6]
 8004728:	893a      	ldrh	r2, [r7, #8]
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4603      	mov	r3, r0
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa3e 	bl	8004bb8 <I2C_RequestMemoryRead>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e1b0      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d113      	bne.n	8004776 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e184      	b.n	8004a80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	2b01      	cmp	r3, #1
 800477c:	d11b      	bne.n	80047b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e164      	b.n	8004a80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d11b      	bne.n	80047f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	e144      	b.n	8004a80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800480c:	e138      	b.n	8004a80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	2b03      	cmp	r3, #3
 8004814:	f200 80f1 	bhi.w	80049fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	2b01      	cmp	r3, #1
 800481e:	d123      	bne.n	8004868 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fc07 	bl	8005038 <I2C_WaitOnRXNEFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e139      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004866:	e10b      	b.n	8004a80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486c:	2b02      	cmp	r3, #2
 800486e:	d14e      	bne.n	800490e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	2200      	movs	r2, #0
 8004878:	4906      	ldr	r1, [pc, #24]	; (8004894 <HAL_I2C_Mem_Read+0x22c>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fa84 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e10e      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
 800488a:	bf00      	nop
 800488c:	00100002 	.word	0x00100002
 8004890:	ffff0000 	.word	0xffff0000
 8004894:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800490c:	e0b8      	b.n	8004a80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	2200      	movs	r2, #0
 8004916:	4966      	ldr	r1, [pc, #408]	; (8004ab0 <HAL_I2C_Mem_Read+0x448>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fa35 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0bf      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	2200      	movs	r2, #0
 8004972:	494f      	ldr	r1, [pc, #316]	; (8004ab0 <HAL_I2C_Mem_Read+0x448>)
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fa07 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e091      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049f8:	e042      	b.n	8004a80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb1a 	bl	8005038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e04c      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d118      	bne.n	8004a80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f aec2 	bne.w	800480e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3728      	adds	r7, #40	; 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	00010004 	.word	0x00010004

08004ab4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d006      	beq.n	8004ade <I2C_MasterRequestWrite+0x2a>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d003      	beq.n	8004ade <I2C_MasterRequestWrite+0x2a>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004adc:	d108      	bne.n	8004af0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e00b      	b.n	8004b08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	2b12      	cmp	r3, #18
 8004af6:	d107      	bne.n	8004b08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f937 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2e:	d103      	bne.n	8004b38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e035      	b.n	8004ba8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b44:	d108      	bne.n	8004b58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b54:	611a      	str	r2, [r3, #16]
 8004b56:	e01b      	b.n	8004b90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b58:	897b      	ldrh	r3, [r7, #10]
 8004b5a:	11db      	asrs	r3, r3, #7
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 0306 	and.w	r3, r3, #6
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f063 030f 	orn	r3, r3, #15
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <I2C_MasterRequestWrite+0xfc>)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f95d 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e010      	b.n	8004ba8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b86:	897b      	ldrh	r3, [r7, #10]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4907      	ldr	r1, [pc, #28]	; (8004bb4 <I2C_MasterRequestWrite+0x100>)
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f94d 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	00010008 	.word	0x00010008
 8004bb4:	00010002 	.word	0x00010002

08004bb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	817b      	strh	r3, [r7, #10]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	813b      	strh	r3, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004be0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f8c2 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d103      	bne.n	8004c22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0aa      	b.n	8004d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c26:	897b      	ldrh	r3, [r7, #10]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	4952      	ldr	r1, [pc, #328]	; (8004d84 <I2C_RequestMemoryRead+0x1cc>)
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f8fa 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e097      	b.n	8004d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	6a39      	ldr	r1, [r7, #32]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f964 	bl	8004f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d107      	bne.n	8004c8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e076      	b.n	8004d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c94:	893b      	ldrh	r3, [r7, #8]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]
 8004c9e:	e021      	b.n	8004ce4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ca0:	893b      	ldrh	r3, [r7, #8]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	6a39      	ldr	r1, [r7, #32]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f93e 	bl	8004f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00d      	beq.n	8004cda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d107      	bne.n	8004cd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e050      	b.n	8004d7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cda:	893b      	ldrh	r3, [r7, #8]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce6:	6a39      	ldr	r1, [r7, #32]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f923 	bl	8004f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00d      	beq.n	8004d10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d107      	bne.n	8004d0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e035      	b.n	8004d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f82b 	bl	8004d88 <I2C_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00d      	beq.n	8004d54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	d103      	bne.n	8004d50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e013      	b.n	8004d7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d54:	897b      	ldrh	r3, [r7, #10]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	6a3a      	ldr	r2, [r7, #32]
 8004d68:	4906      	ldr	r1, [pc, #24]	; (8004d84 <I2C_RequestMemoryRead+0x1cc>)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f863 	bl	8004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	00010002 	.word	0x00010002

08004d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d98:	e025      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d021      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fe ff2f 	bl	8003c04 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d116      	bne.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e023      	b.n	8004e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10d      	bne.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	43da      	mvns	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	e00c      	b.n	8004e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	43da      	mvns	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4013      	ands	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bf0c      	ite	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	2300      	movne	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d0b6      	beq.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e44:	e051      	b.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d123      	bne.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0204 	orr.w	r2, r3, #4
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e046      	b.n	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d021      	beq.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fe fead 	bl	8003c04 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e020      	b.n	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10c      	bne.n	8004f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	43da      	mvns	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e00b      	b.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d18d      	bne.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f40:	e02d      	b.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f8ce 	bl	80050e4 <I2C_IsAcknowledgeFailed>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e02d      	b.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d021      	beq.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5a:	f7fe fe53 	bl	8003c04 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d302      	bcc.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d116      	bne.n	8004f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e007      	b.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d1ca      	bne.n	8004f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fc2:	e02d      	b.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f88d 	bl	80050e4 <I2C_IsAcknowledgeFailed>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e02d      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d021      	beq.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fdc:	f7fe fe12 	bl	8003c04 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d302      	bcc.n	8004ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d116      	bne.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e007      	b.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d1ca      	bne.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005044:	e042      	b.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b10      	cmp	r3, #16
 8005052:	d119      	bne.n	8005088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0210 	mvn.w	r2, #16
 800505c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e029      	b.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005088:	f7fe fdbc 	bl	8003c04 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d116      	bne.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e007      	b.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d1b5      	bne.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d11b      	bne.n	8005134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f043 0204 	orr.w	r2, r3, #4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e034      	b.n	80051be <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800515c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f245 5255 	movw	r2, #21845	; 0x5555
 8005166:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6852      	ldr	r2, [r2, #4]
 8005170:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6892      	ldr	r2, [r2, #8]
 800517a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800517c:	f7fe fd42 	bl	8003c04 <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005182:	e00f      	b.n	80051a4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005184:	f7fe fd3e 	bl	8003c04 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b30      	cmp	r3, #48	; 0x30
 8005190:	d908      	bls.n	80051a4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e00c      	b.n	80051be <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e8      	bne.n	8005184 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80051ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80051d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0cc      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051fc:	4b68      	ldr	r3, [pc, #416]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d90c      	bls.n	8005224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b63      	ldr	r3, [pc, #396]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0b8      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d020      	beq.n	8005272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800523c:	4b59      	ldr	r3, [pc, #356]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4a58      	ldr	r2, [pc, #352]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4a52      	ldr	r2, [pc, #328]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800525e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005260:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	494d      	ldr	r1, [pc, #308]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d044      	beq.n	8005308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d107      	bne.n	8005296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	4b47      	ldr	r3, [pc, #284]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d119      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e07f      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d003      	beq.n	80052a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d107      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e06f      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b6:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e067      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052c6:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4934      	ldr	r1, [pc, #208]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052d8:	f7fe fc94 	bl	8003c04 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e0:	f7fe fc90 	bl	8003c04 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e04f      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f6:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 020c 	and.w	r2, r3, #12
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	429a      	cmp	r2, r3
 8005306:	d1eb      	bne.n	80052e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005308:	4b25      	ldr	r3, [pc, #148]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d20c      	bcs.n	8005330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531e:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e032      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4916      	ldr	r1, [pc, #88]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	490e      	ldr	r1, [pc, #56]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800536e:	f000 f889 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005372:	4602      	mov	r2, r0
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	490a      	ldr	r1, [pc, #40]	; (80053a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005380:	5ccb      	ldrb	r3, [r1, r3]
 8005382:	fa22 f303 	lsr.w	r3, r2, r3
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <HAL_RCC_ClockConfig+0x1c8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fbf4 	bl	8003b7c <HAL_InitTick>

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40023c00 	.word	0x40023c00
 80053a4:	40023800 	.word	0x40023800
 80053a8:	08009ba0 	.word	0x08009ba0
 80053ac:	20000004 	.word	0x20000004
 80053b0:	20000090 	.word	0x20000090

080053b4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	; 0x30
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d129      	bne.n	800541a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	4a2a      	ldr	r2, [pc, #168]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6313      	str	r3, [r2, #48]	; 0x30
 80053d6:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80053e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ec:	2303      	movs	r3, #3
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80053f8:	f107 031c 	add.w	r3, r7, #28
 80053fc:	4619      	mov	r1, r3
 80053fe:	481f      	ldr	r0, [pc, #124]	; (800547c <HAL_RCC_MCOConfig+0xc8>)
 8005400:	f7fe fd42 	bl	8003e88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	430b      	orrs	r3, r1
 8005412:	4919      	ldr	r1, [pc, #100]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 8005414:	4313      	orrs	r3, r2
 8005416:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005418:	e029      	b.n	800546e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	4a15      	ldr	r2, [pc, #84]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 8005424:	f043 0304 	orr.w	r3, r3, #4
 8005428:	6313      	str	r3, [r2, #48]	; 0x30
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800543a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543c:	2302      	movs	r3, #2
 800543e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005440:	2303      	movs	r3, #3
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005444:	2300      	movs	r3, #0
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005448:	2300      	movs	r3, #0
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800544c:	f107 031c 	add.w	r3, r7, #28
 8005450:	4619      	mov	r1, r3
 8005452:	480b      	ldr	r0, [pc, #44]	; (8005480 <HAL_RCC_MCOConfig+0xcc>)
 8005454:	f7fe fd18 	bl	8003e88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005458:	4b07      	ldr	r3, [pc, #28]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	00d9      	lsls	r1, r3, #3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	430b      	orrs	r3, r1
 8005468:	4903      	ldr	r1, [pc, #12]	; (8005478 <HAL_RCC_MCOConfig+0xc4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	608b      	str	r3, [r1, #8]
}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	; 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	40020000 	.word	0x40020000
 8005480:	40020800 	.word	0x40020800

08005484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800549c:	4b67      	ldr	r3, [pc, #412]	; (800563c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d00d      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x40>
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	f200 80bd 	bhi.w	8005628 <HAL_RCC_GetSysClockFreq+0x1a4>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x34>
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d003      	beq.n	80054be <HAL_RCC_GetSysClockFreq+0x3a>
 80054b6:	e0b7      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b61      	ldr	r3, [pc, #388]	; (8005640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054ba:	60bb      	str	r3, [r7, #8]
       break;
 80054bc:	e0b7      	b.n	800562e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054be:	4b61      	ldr	r3, [pc, #388]	; (8005644 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80054c0:	60bb      	str	r3, [r7, #8]
      break;
 80054c2:	e0b4      	b.n	800562e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c4:	4b5d      	ldr	r3, [pc, #372]	; (800563c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ce:	4b5b      	ldr	r3, [pc, #364]	; (800563c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d04d      	beq.n	8005576 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	4b58      	ldr	r3, [pc, #352]	; (800563c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	461a      	mov	r2, r3
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	ea02 0800 	and.w	r8, r2, r0
 80054f2:	ea03 0901 	and.w	r9, r3, r1
 80054f6:	4640      	mov	r0, r8
 80054f8:	4649      	mov	r1, r9
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	014b      	lsls	r3, r1, #5
 8005504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005508:	0142      	lsls	r2, r0, #5
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	ebb0 0008 	subs.w	r0, r0, r8
 8005512:	eb61 0109 	sbc.w	r1, r1, r9
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	018b      	lsls	r3, r1, #6
 8005520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005524:	0182      	lsls	r2, r0, #6
 8005526:	1a12      	subs	r2, r2, r0
 8005528:	eb63 0301 	sbc.w	r3, r3, r1
 800552c:	f04f 0000 	mov.w	r0, #0
 8005530:	f04f 0100 	mov.w	r1, #0
 8005534:	00d9      	lsls	r1, r3, #3
 8005536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800553a:	00d0      	lsls	r0, r2, #3
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	eb12 0208 	adds.w	r2, r2, r8
 8005544:	eb43 0309 	adc.w	r3, r3, r9
 8005548:	f04f 0000 	mov.w	r0, #0
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	0259      	lsls	r1, r3, #9
 8005552:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005556:	0250      	lsls	r0, r2, #9
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4610      	mov	r0, r2
 800555e:	4619      	mov	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	461a      	mov	r2, r3
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	f7fb fb5e 	bl	8000c28 <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4613      	mov	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e04a      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005576:	4b31      	ldr	r3, [pc, #196]	; (800563c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	461a      	mov	r2, r3
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005586:	f04f 0100 	mov.w	r1, #0
 800558a:	ea02 0400 	and.w	r4, r2, r0
 800558e:	ea03 0501 	and.w	r5, r3, r1
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	014b      	lsls	r3, r1, #5
 80055a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055a4:	0142      	lsls	r2, r0, #5
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	1b00      	subs	r0, r0, r4
 80055ac:	eb61 0105 	sbc.w	r1, r1, r5
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	018b      	lsls	r3, r1, #6
 80055ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055be:	0182      	lsls	r2, r0, #6
 80055c0:	1a12      	subs	r2, r2, r0
 80055c2:	eb63 0301 	sbc.w	r3, r3, r1
 80055c6:	f04f 0000 	mov.w	r0, #0
 80055ca:	f04f 0100 	mov.w	r1, #0
 80055ce:	00d9      	lsls	r1, r3, #3
 80055d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055d4:	00d0      	lsls	r0, r2, #3
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	1912      	adds	r2, r2, r4
 80055dc:	eb45 0303 	adc.w	r3, r5, r3
 80055e0:	f04f 0000 	mov.w	r0, #0
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	0299      	lsls	r1, r3, #10
 80055ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055ee:	0290      	lsls	r0, r2, #10
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	f7fb fb12 	bl	8000c28 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4613      	mov	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	3301      	adds	r3, #1
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	60bb      	str	r3, [r7, #8]
      break;
 8005626:	e002      	b.n	800562e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800562a:	60bb      	str	r3, [r7, #8]
      break;
 800562c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800562e:	68bb      	ldr	r3, [r7, #8]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800
 8005640:	00f42400 	.word	0x00f42400
 8005644:	007a1200 	.word	0x007a1200

08005648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <HAL_RCC_GetHCLKFreq+0x14>)
 800564e:	681b      	ldr	r3, [r3, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000004 	.word	0x20000004

08005660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005664:	f7ff fff0 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0a9b      	lsrs	r3, r3, #10
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4903      	ldr	r1, [pc, #12]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40023800 	.word	0x40023800
 8005684:	08009bb0 	.word	0x08009bb0

08005688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800568c:	f7ff ffdc 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005690:	4602      	mov	r2, r0
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	0b5b      	lsrs	r3, r3, #13
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	4903      	ldr	r1, [pc, #12]	; (80056ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800569e:	5ccb      	ldrb	r3, [r1, r3]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40023800 	.word	0x40023800
 80056ac:	08009bb0 	.word	0x08009bb0

080056b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e270      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d075      	beq.n	80057ba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056ce:	4ba3      	ldr	r3, [pc, #652]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00c      	beq.n	80056f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056da:	4ba0      	ldr	r3, [pc, #640]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d112      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e6:	4b9d      	ldr	r3, [pc, #628]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056f2:	d10b      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	4b99      	ldr	r3, [pc, #612]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05b      	beq.n	80057b8 <HAL_RCC_OscConfig+0x108>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d157      	bne.n	80057b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e24b      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005714:	d106      	bne.n	8005724 <HAL_RCC_OscConfig+0x74>
 8005716:	4b91      	ldr	r3, [pc, #580]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a90      	ldr	r2, [pc, #576]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e01d      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x98>
 800572e:	4b8b      	ldr	r3, [pc, #556]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a8a      	ldr	r2, [pc, #552]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b88      	ldr	r3, [pc, #544]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a87      	ldr	r2, [pc, #540]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005748:	4b84      	ldr	r3, [pc, #528]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a83      	ldr	r2, [pc, #524]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b81      	ldr	r3, [pc, #516]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a80      	ldr	r2, [pc, #512]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800575a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800575e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fe fa4c 	bl	8003c04 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005770:	f7fe fa48 	bl	8003c04 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e210      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b76      	ldr	r3, [pc, #472]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0xc0>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fe fa38 	bl	8003c04 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005798:	f7fe fa34 	bl	8003c04 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1fc      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	4b6c      	ldr	r3, [pc, #432]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0xe8>
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d063      	beq.n	800588e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057c6:	4b65      	ldr	r3, [pc, #404]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d2:	4b62      	ldr	r3, [pc, #392]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11c      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057de:	4b5f      	ldr	r3, [pc, #380]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	4b5c      	ldr	r3, [pc, #368]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e1d0      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	4b56      	ldr	r3, [pc, #344]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4952      	ldr	r1, [pc, #328]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	e03a      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005820:	4b4f      	ldr	r3, [pc, #316]	; (8005960 <HAL_RCC_OscConfig+0x2b0>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005826:	f7fe f9ed 	bl	8003c04 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800582e:	f7fe f9e9 	bl	8003c04 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1b1      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005840:	4b46      	ldr	r3, [pc, #280]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584c:	4b43      	ldr	r3, [pc, #268]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4940      	ldr	r1, [pc, #256]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
 8005860:	e015      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005862:	4b3f      	ldr	r3, [pc, #252]	; (8005960 <HAL_RCC_OscConfig+0x2b0>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fe f9cc 	bl	8003c04 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005870:	f7fe f9c8 	bl	8003c04 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e190      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005882:	4b36      	ldr	r3, [pc, #216]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d030      	beq.n	80058fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a2:	4b30      	ldr	r3, [pc, #192]	; (8005964 <HAL_RCC_OscConfig+0x2b4>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a8:	f7fe f9ac 	bl	8003c04 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b0:	f7fe f9a8 	bl	8003c04 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e170      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c2:	4b26      	ldr	r3, [pc, #152]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0x200>
 80058ce:	e015      	b.n	80058fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d0:	4b24      	ldr	r3, [pc, #144]	; (8005964 <HAL_RCC_OscConfig+0x2b4>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d6:	f7fe f995 	bl	8003c04 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058de:	f7fe f991 	bl	8003c04 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e159      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f0:	4b1a      	ldr	r3, [pc, #104]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 80058f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f0      	bne.n	80058de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80a0 	beq.w	8005a4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590a:	2300      	movs	r3, #0
 800590c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590e:	4b13      	ldr	r3, [pc, #76]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	4b0f      	ldr	r3, [pc, #60]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	4a0e      	ldr	r2, [pc, #56]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 8005924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005928:	6413      	str	r3, [r2, #64]	; 0x40
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <HAL_RCC_OscConfig+0x2ac>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_OscConfig+0x2b8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d121      	bne.n	800598a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <HAL_RCC_OscConfig+0x2b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a07      	ldr	r2, [pc, #28]	; (8005968 <HAL_RCC_OscConfig+0x2b8>)
 800594c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005952:	f7fe f957 	bl	8003c04 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005958:	e011      	b.n	800597e <HAL_RCC_OscConfig+0x2ce>
 800595a:	bf00      	nop
 800595c:	40023800 	.word	0x40023800
 8005960:	42470000 	.word	0x42470000
 8005964:	42470e80 	.word	0x42470e80
 8005968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596c:	f7fe f94a 	bl	8003c04 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e112      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597e:	4b8b      	ldr	r3, [pc, #556]	; (8005bac <HAL_RCC_OscConfig+0x4fc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d106      	bne.n	80059a0 <HAL_RCC_OscConfig+0x2f0>
 8005992:	4b87      	ldr	r3, [pc, #540]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	4a86      	ldr	r2, [pc, #536]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	6713      	str	r3, [r2, #112]	; 0x70
 800599e:	e01c      	b.n	80059da <HAL_RCC_OscConfig+0x32a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b05      	cmp	r3, #5
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCC_OscConfig+0x312>
 80059a8:	4b81      	ldr	r3, [pc, #516]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	4a80      	ldr	r2, [pc, #512]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059ae:	f043 0304 	orr.w	r3, r3, #4
 80059b2:	6713      	str	r3, [r2, #112]	; 0x70
 80059b4:	4b7e      	ldr	r3, [pc, #504]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a7d      	ldr	r2, [pc, #500]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	6713      	str	r3, [r2, #112]	; 0x70
 80059c0:	e00b      	b.n	80059da <HAL_RCC_OscConfig+0x32a>
 80059c2:	4b7b      	ldr	r3, [pc, #492]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4a7a      	ldr	r2, [pc, #488]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	6713      	str	r3, [r2, #112]	; 0x70
 80059ce:	4b78      	ldr	r3, [pc, #480]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a77      	ldr	r2, [pc, #476]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 80059d4:	f023 0304 	bic.w	r3, r3, #4
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d015      	beq.n	8005a0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e2:	f7fe f90f 	bl	8003c04 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e8:	e00a      	b.n	8005a00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ea:	f7fe f90b 	bl	8003c04 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0d1      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a00:	4b6b      	ldr	r3, [pc, #428]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ee      	beq.n	80059ea <HAL_RCC_OscConfig+0x33a>
 8005a0c:	e014      	b.n	8005a38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0e:	f7fe f8f9 	bl	8003c04 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a14:	e00a      	b.n	8005a2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a16:	f7fe f8f5 	bl	8003c04 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e0bb      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2c:	4b60      	ldr	r3, [pc, #384]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1ee      	bne.n	8005a16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d105      	bne.n	8005a4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a3e:	4b5c      	ldr	r3, [pc, #368]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	4a5b      	ldr	r2, [pc, #364]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80a7 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a54:	4b56      	ldr	r3, [pc, #344]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d060      	beq.n	8005b22 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d145      	bne.n	8005af4 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a68:	4b52      	ldr	r3, [pc, #328]	; (8005bb4 <HAL_RCC_OscConfig+0x504>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fe f8c9 	bl	8003c04 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a76:	f7fe f8c5 	bl	8003c04 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e08d      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a88:	4b49      	ldr	r3, [pc, #292]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f0      	bne.n	8005a76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	019b      	lsls	r3, r3, #6
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	3b01      	subs	r3, #1
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	061b      	lsls	r3, r3, #24
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	071b      	lsls	r3, r3, #28
 8005ac0:	493b      	ldr	r1, [pc, #236]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac6:	4b3b      	ldr	r3, [pc, #236]	; (8005bb4 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fe f89a 	bl	8003c04 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad4:	f7fe f896 	bl	8003c04 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e05e      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae6:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f0      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x424>
 8005af2:	e056      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af4:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <HAL_RCC_OscConfig+0x504>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fe f883 	bl	8003c04 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b02:	f7fe f87f 	bl	8003c04 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e047      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b14:	4b26      	ldr	r3, [pc, #152]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <HAL_RCC_OscConfig+0x452>
 8005b20:	e03f      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e03a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b2e:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_RCC_OscConfig+0x500>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d030      	beq.n	8005b9e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d129      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d122      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b5e:	4013      	ands	r3, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d119      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d10f      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d001      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	42470060 	.word	0x42470060

08005bb8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e034      	b.n	8005c38 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7fc fa06 	bl	8001ff4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 ff94 	bl	8006b20 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	461a      	mov	r2, r3
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	f000 fffc 	bl	8006c00 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6858      	ldr	r0, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	f001 f847 	bl	8006ca8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	6892      	ldr	r2, [r2, #8]
 8005c22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	f041 0101 	orr.w	r1, r1, #1
 8005c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e041      	b.n	8005cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc f8c0 	bl	8001dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f000 fa92 	bl	80061a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d001      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e04e      	b.n	8005d96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d022      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d22:	d01d      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <HAL_TIM_Base_Start_IT+0xcc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a19      	ldr	r2, [pc, #100]	; (8005db8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <HAL_TIM_Base_Start_IT+0xdc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d111      	bne.n	8005d84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d010      	beq.n	8005d94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d82:	e007      	b.n	8005d94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40010400 	.word	0x40010400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40001800 	.word	0x40001800

08005dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d122      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d11b      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0202 	mvn.w	r2, #2
 8005dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f9b2 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9a4 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f9b5 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d122      	bne.n	8005e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d11b      	bne.n	8005e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0204 	mvn.w	r2, #4
 8005e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f988 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f97a 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f98b 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d122      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0208 	mvn.w	r2, #8
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2204      	movs	r2, #4
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f95e 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f950 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f961 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d122      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d11b      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0210 	mvn.w	r2, #16
 8005ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2208      	movs	r2, #8
 8005eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f934 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f926 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f937 	bl	8006180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0201 	mvn.w	r2, #1
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb fbb2 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b80      	cmp	r3, #128	; 0x80
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fadc 	bl	8006528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f8fc 	bl	8006194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0220 	mvn.w	r2, #32
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 faa6 	bl	8006514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIM_ConfigClockSource+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e0b3      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x180>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006020:	d03e      	beq.n	80060a0 <HAL_TIM_ConfigClockSource+0xd0>
 8006022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006026:	f200 8087 	bhi.w	8006138 <HAL_TIM_ConfigClockSource+0x168>
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602e:	f000 8085 	beq.w	800613c <HAL_TIM_ConfigClockSource+0x16c>
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006036:	d87f      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
 8006038:	2b70      	cmp	r3, #112	; 0x70
 800603a:	d01a      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0xa2>
 800603c:	2b70      	cmp	r3, #112	; 0x70
 800603e:	d87b      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
 8006040:	2b60      	cmp	r3, #96	; 0x60
 8006042:	d050      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x116>
 8006044:	2b60      	cmp	r3, #96	; 0x60
 8006046:	d877      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
 8006048:	2b50      	cmp	r3, #80	; 0x50
 800604a:	d03c      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0xf6>
 800604c:	2b50      	cmp	r3, #80	; 0x50
 800604e:	d873      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	d058      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x136>
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d86f      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
 8006058:	2b30      	cmp	r3, #48	; 0x30
 800605a:	d064      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x156>
 800605c:	2b30      	cmp	r3, #48	; 0x30
 800605e:	d86b      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
 8006060:	2b20      	cmp	r3, #32
 8006062:	d060      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x156>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d867      	bhi.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
 8006068:	2b00      	cmp	r3, #0
 800606a:	d05c      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x156>
 800606c:	2b10      	cmp	r3, #16
 800606e:	d05a      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006070:	e062      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6899      	ldr	r1, [r3, #8]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f000 f9ab 	bl	80063dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006094:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	609a      	str	r2, [r3, #8]
      break;
 800609e:	e04e      	b.n	800613e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6899      	ldr	r1, [r3, #8]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f000 f994 	bl	80063dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060c2:	609a      	str	r2, [r3, #8]
      break;
 80060c4:	e03b      	b.n	800613e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 f908 	bl	80062e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2150      	movs	r1, #80	; 0x50
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f961 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 80060e4:	e02b      	b.n	800613e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6859      	ldr	r1, [r3, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f000 f927 	bl	8006346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2160      	movs	r1, #96	; 0x60
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f951 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8006104:	e01b      	b.n	800613e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6859      	ldr	r1, [r3, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	461a      	mov	r2, r3
 8006114:	f000 f8e8 	bl	80062e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2140      	movs	r1, #64	; 0x40
 800611e:	4618      	mov	r0, r3
 8006120:	f000 f941 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8006124:	e00b      	b.n	800613e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f000 f938 	bl	80063a6 <TIM_ITRx_SetConfig>
        break;
 8006136:	e002      	b.n	800613e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006138:	bf00      	nop
 800613a:	e000      	b.n	800613e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800613c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a40      	ldr	r2, [pc, #256]	; (80062bc <TIM_Base_SetConfig+0x114>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d013      	beq.n	80061e8 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c6:	d00f      	beq.n	80061e8 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3d      	ldr	r2, [pc, #244]	; (80062c0 <TIM_Base_SetConfig+0x118>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00b      	beq.n	80061e8 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3c      	ldr	r2, [pc, #240]	; (80062c4 <TIM_Base_SetConfig+0x11c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d007      	beq.n	80061e8 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3b      	ldr	r2, [pc, #236]	; (80062c8 <TIM_Base_SetConfig+0x120>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a3a      	ldr	r2, [pc, #232]	; (80062cc <TIM_Base_SetConfig+0x124>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d108      	bne.n	80061fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2f      	ldr	r2, [pc, #188]	; (80062bc <TIM_Base_SetConfig+0x114>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d02b      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d027      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2c      	ldr	r2, [pc, #176]	; (80062c0 <TIM_Base_SetConfig+0x118>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d023      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2b      	ldr	r2, [pc, #172]	; (80062c4 <TIM_Base_SetConfig+0x11c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01f      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <TIM_Base_SetConfig+0x120>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01b      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a29      	ldr	r2, [pc, #164]	; (80062cc <TIM_Base_SetConfig+0x124>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d017      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a28      	ldr	r2, [pc, #160]	; (80062d0 <TIM_Base_SetConfig+0x128>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a27      	ldr	r2, [pc, #156]	; (80062d4 <TIM_Base_SetConfig+0x12c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00f      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a26      	ldr	r2, [pc, #152]	; (80062d8 <TIM_Base_SetConfig+0x130>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a25      	ldr	r2, [pc, #148]	; (80062dc <TIM_Base_SetConfig+0x134>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <TIM_Base_SetConfig+0x138>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <TIM_Base_SetConfig+0x13c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d108      	bne.n	800626c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <TIM_Base_SetConfig+0x114>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <TIM_Base_SetConfig+0xf8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a0c      	ldr	r2, [pc, #48]	; (80062cc <TIM_Base_SetConfig+0x124>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d103      	bne.n	80062a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	615a      	str	r2, [r3, #20]
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40000c00 	.word	0x40000c00
 80062cc:	40010400 	.word	0x40010400
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800
 80062dc:	40001800 	.word	0x40001800
 80062e0:	40001c00 	.word	0x40001c00
 80062e4:	40002000 	.word	0x40002000

080062e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 030a 	bic.w	r3, r3, #10
 8006324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006346:	b480      	push	{r7}
 8006348:	b087      	sub	sp, #28
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f023 0210 	bic.w	r2, r3, #16
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f043 0307 	orr.w	r3, r3, #7
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	431a      	orrs	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006430:	2302      	movs	r3, #2
 8006432:	e05a      	b.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d022      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006480:	d01d      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d018      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1a      	ldr	r2, [pc, #104]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a17      	ldr	r2, [pc, #92]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d10c      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40010400 	.word	0x40010400
 800650c:	40014000 	.word	0x40014000
 8006510:	40001800 	.word	0x40001800

08006514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e03f      	b.n	80065ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb fc6a 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	; 0x24
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f905 	bl	8006790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b08a      	sub	sp, #40	; 0x28
 80065da:	af02      	add	r7, sp, #8
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	4613      	mov	r3, r2
 80065e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d17c      	bne.n	80066f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_UART_Transmit+0x2c>
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e075      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_UART_Transmit+0x3e>
 8006610:	2302      	movs	r3, #2
 8006612:	e06e      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2221      	movs	r2, #33	; 0x21
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800662a:	f7fd faeb 	bl	8003c04 <HAL_GetTick>
 800662e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d108      	bne.n	8006658 <HAL_UART_Transmit+0x82>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e003      	b.n	8006660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006668:	e02a      	b.n	80066c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f840 	bl	80066fa <UART_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e036      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	3302      	adds	r3, #2
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e007      	b.n	80066b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3301      	adds	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1cf      	bne.n	800666a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2200      	movs	r2, #0
 80066d2:	2140      	movs	r1, #64	; 0x40
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f810 	bl	80066fa <UART_WaitOnFlagUntilTimeout>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e006      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e000      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670a:	e02c      	b.n	8006766 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d028      	beq.n	8006766 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <UART_WaitOnFlagUntilTimeout+0x30>
 800671a:	f7fd fa73 	bl	8003c04 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	429a      	cmp	r2, r3
 8006728:	d21d      	bcs.n	8006766 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006738:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e00f      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4013      	ands	r3, r2
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	429a      	cmp	r2, r3
 8006782:	d0c3      	beq.n	800670c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	b09f      	sub	sp, #124	; 0x7c
 8006796:	af00      	add	r7, sp, #0
 8006798:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800679a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a6:	68d9      	ldr	r1, [r3, #12]
 80067a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	ea40 0301 	orr.w	r3, r0, r1
 80067b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80067ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067d4:	f021 010c 	bic.w	r1, r1, #12
 80067d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067de:	430b      	orrs	r3, r1
 80067e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ee:	6999      	ldr	r1, [r3, #24]
 80067f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	ea40 0301 	orr.w	r3, r0, r1
 80067f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4bc5      	ldr	r3, [pc, #788]	; (8006b14 <UART_SetConfig+0x384>)
 8006800:	429a      	cmp	r2, r3
 8006802:	d004      	beq.n	800680e <UART_SetConfig+0x7e>
 8006804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4bc3      	ldr	r3, [pc, #780]	; (8006b18 <UART_SetConfig+0x388>)
 800680a:	429a      	cmp	r2, r3
 800680c:	d103      	bne.n	8006816 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800680e:	f7fe ff3b 	bl	8005688 <HAL_RCC_GetPCLK2Freq>
 8006812:	6778      	str	r0, [r7, #116]	; 0x74
 8006814:	e002      	b.n	800681c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006816:	f7fe ff23 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 800681a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800681c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006824:	f040 80b6 	bne.w	8006994 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800682a:	461c      	mov	r4, r3
 800682c:	f04f 0500 	mov.w	r5, #0
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	1891      	adds	r1, r2, r2
 8006836:	6439      	str	r1, [r7, #64]	; 0x40
 8006838:	415b      	adcs	r3, r3
 800683a:	647b      	str	r3, [r7, #68]	; 0x44
 800683c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006840:	1912      	adds	r2, r2, r4
 8006842:	eb45 0303 	adc.w	r3, r5, r3
 8006846:	f04f 0000 	mov.w	r0, #0
 800684a:	f04f 0100 	mov.w	r1, #0
 800684e:	00d9      	lsls	r1, r3, #3
 8006850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006854:	00d0      	lsls	r0, r2, #3
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	1911      	adds	r1, r2, r4
 800685c:	6639      	str	r1, [r7, #96]	; 0x60
 800685e:	416b      	adcs	r3, r5
 8006860:	667b      	str	r3, [r7, #100]	; 0x64
 8006862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	461a      	mov	r2, r3
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	1891      	adds	r1, r2, r2
 800686e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006870:	415b      	adcs	r3, r3
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006878:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800687c:	f7fa f9d4 	bl	8000c28 <__aeabi_uldivmod>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4ba5      	ldr	r3, [pc, #660]	; (8006b1c <UART_SetConfig+0x38c>)
 8006886:	fba3 2302 	umull	r2, r3, r3, r2
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	011e      	lsls	r6, r3, #4
 800688e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006890:	461c      	mov	r4, r3
 8006892:	f04f 0500 	mov.w	r5, #0
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	1891      	adds	r1, r2, r2
 800689c:	6339      	str	r1, [r7, #48]	; 0x30
 800689e:	415b      	adcs	r3, r3
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
 80068a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068a6:	1912      	adds	r2, r2, r4
 80068a8:	eb45 0303 	adc.w	r3, r5, r3
 80068ac:	f04f 0000 	mov.w	r0, #0
 80068b0:	f04f 0100 	mov.w	r1, #0
 80068b4:	00d9      	lsls	r1, r3, #3
 80068b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068ba:	00d0      	lsls	r0, r2, #3
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	1911      	adds	r1, r2, r4
 80068c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80068c4:	416b      	adcs	r3, r5
 80068c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	461a      	mov	r2, r3
 80068ce:	f04f 0300 	mov.w	r3, #0
 80068d2:	1891      	adds	r1, r2, r2
 80068d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80068d6:	415b      	adcs	r3, r3
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80068e2:	f7fa f9a1 	bl	8000c28 <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4b8c      	ldr	r3, [pc, #560]	; (8006b1c <UART_SetConfig+0x38c>)
 80068ec:	fba3 1302 	umull	r1, r3, r3, r2
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	2164      	movs	r1, #100	; 0x64
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	3332      	adds	r3, #50	; 0x32
 80068fe:	4a87      	ldr	r2, [pc, #540]	; (8006b1c <UART_SetConfig+0x38c>)
 8006900:	fba2 2303 	umull	r2, r3, r2, r3
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800690c:	441e      	add	r6, r3
 800690e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006910:	4618      	mov	r0, r3
 8006912:	f04f 0100 	mov.w	r1, #0
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	1894      	adds	r4, r2, r2
 800691c:	623c      	str	r4, [r7, #32]
 800691e:	415b      	adcs	r3, r3
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
 8006922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006926:	1812      	adds	r2, r2, r0
 8006928:	eb41 0303 	adc.w	r3, r1, r3
 800692c:	f04f 0400 	mov.w	r4, #0
 8006930:	f04f 0500 	mov.w	r5, #0
 8006934:	00dd      	lsls	r5, r3, #3
 8006936:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800693a:	00d4      	lsls	r4, r2, #3
 800693c:	4622      	mov	r2, r4
 800693e:	462b      	mov	r3, r5
 8006940:	1814      	adds	r4, r2, r0
 8006942:	653c      	str	r4, [r7, #80]	; 0x50
 8006944:	414b      	adcs	r3, r1
 8006946:	657b      	str	r3, [r7, #84]	; 0x54
 8006948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	461a      	mov	r2, r3
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	1891      	adds	r1, r2, r2
 8006954:	61b9      	str	r1, [r7, #24]
 8006956:	415b      	adcs	r3, r3
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800695e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006962:	f7fa f961 	bl	8000c28 <__aeabi_uldivmod>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4b6c      	ldr	r3, [pc, #432]	; (8006b1c <UART_SetConfig+0x38c>)
 800696c:	fba3 1302 	umull	r1, r3, r3, r2
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	2164      	movs	r1, #100	; 0x64
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	3332      	adds	r3, #50	; 0x32
 800697e:	4a67      	ldr	r2, [pc, #412]	; (8006b1c <UART_SetConfig+0x38c>)
 8006980:	fba2 2303 	umull	r2, r3, r2, r3
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	f003 0207 	and.w	r2, r3, #7
 800698a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4432      	add	r2, r6
 8006990:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006992:	e0b9      	b.n	8006b08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006996:	461c      	mov	r4, r3
 8006998:	f04f 0500 	mov.w	r5, #0
 800699c:	4622      	mov	r2, r4
 800699e:	462b      	mov	r3, r5
 80069a0:	1891      	adds	r1, r2, r2
 80069a2:	6139      	str	r1, [r7, #16]
 80069a4:	415b      	adcs	r3, r3
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069ac:	1912      	adds	r2, r2, r4
 80069ae:	eb45 0303 	adc.w	r3, r5, r3
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f04f 0100 	mov.w	r1, #0
 80069ba:	00d9      	lsls	r1, r3, #3
 80069bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069c0:	00d0      	lsls	r0, r2, #3
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	eb12 0804 	adds.w	r8, r2, r4
 80069ca:	eb43 0905 	adc.w	r9, r3, r5
 80069ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f04f 0100 	mov.w	r1, #0
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	008b      	lsls	r3, r1, #2
 80069e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069e6:	0082      	lsls	r2, r0, #2
 80069e8:	4640      	mov	r0, r8
 80069ea:	4649      	mov	r1, r9
 80069ec:	f7fa f91c 	bl	8000c28 <__aeabi_uldivmod>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4b49      	ldr	r3, [pc, #292]	; (8006b1c <UART_SetConfig+0x38c>)
 80069f6:	fba3 2302 	umull	r2, r3, r3, r2
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	011e      	lsls	r6, r3, #4
 80069fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a00:	4618      	mov	r0, r3
 8006a02:	f04f 0100 	mov.w	r1, #0
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	1894      	adds	r4, r2, r2
 8006a0c:	60bc      	str	r4, [r7, #8]
 8006a0e:	415b      	adcs	r3, r3
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a16:	1812      	adds	r2, r2, r0
 8006a18:	eb41 0303 	adc.w	r3, r1, r3
 8006a1c:	f04f 0400 	mov.w	r4, #0
 8006a20:	f04f 0500 	mov.w	r5, #0
 8006a24:	00dd      	lsls	r5, r3, #3
 8006a26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a2a:	00d4      	lsls	r4, r2, #3
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	462b      	mov	r3, r5
 8006a30:	1814      	adds	r4, r2, r0
 8006a32:	64bc      	str	r4, [r7, #72]	; 0x48
 8006a34:	414b      	adcs	r3, r1
 8006a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f04f 0100 	mov.w	r1, #0
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	008b      	lsls	r3, r1, #2
 8006a4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a50:	0082      	lsls	r2, r0, #2
 8006a52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a56:	f7fa f8e7 	bl	8000c28 <__aeabi_uldivmod>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	; (8006b1c <UART_SetConfig+0x38c>)
 8006a60:	fba3 1302 	umull	r1, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2164      	movs	r1, #100	; 0x64
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	3332      	adds	r3, #50	; 0x32
 8006a72:	4a2a      	ldr	r2, [pc, #168]	; (8006b1c <UART_SetConfig+0x38c>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a7e:	441e      	add	r6, r3
 8006a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a82:	4618      	mov	r0, r3
 8006a84:	f04f 0100 	mov.w	r1, #0
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	1894      	adds	r4, r2, r2
 8006a8e:	603c      	str	r4, [r7, #0]
 8006a90:	415b      	adcs	r3, r3
 8006a92:	607b      	str	r3, [r7, #4]
 8006a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a98:	1812      	adds	r2, r2, r0
 8006a9a:	eb41 0303 	adc.w	r3, r1, r3
 8006a9e:	f04f 0400 	mov.w	r4, #0
 8006aa2:	f04f 0500 	mov.w	r5, #0
 8006aa6:	00dd      	lsls	r5, r3, #3
 8006aa8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006aac:	00d4      	lsls	r4, r2, #3
 8006aae:	4622      	mov	r2, r4
 8006ab0:	462b      	mov	r3, r5
 8006ab2:	eb12 0a00 	adds.w	sl, r2, r0
 8006ab6:	eb43 0b01 	adc.w	fp, r3, r1
 8006aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f04f 0100 	mov.w	r1, #0
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	008b      	lsls	r3, r1, #2
 8006ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ad2:	0082      	lsls	r2, r0, #2
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	f7fa f8a6 	bl	8000c28 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <UART_SetConfig+0x38c>)
 8006ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2164      	movs	r1, #100	; 0x64
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	3332      	adds	r3, #50	; 0x32
 8006af4:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <UART_SetConfig+0x38c>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4432      	add	r2, r6
 8006b06:	609a      	str	r2, [r3, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	377c      	adds	r7, #124	; 0x7c
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	bf00      	nop
 8006b14:	40011000 	.word	0x40011000
 8006b18:	40011400 	.word	0x40011400
 8006b1c:	51eb851f 	.word	0x51eb851f

08006b20 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b38:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	; (8006bfc <FSMC_NORSRAM_Init+0xdc>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b4a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006b50:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006b56:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006b5c:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8006b62:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006b68:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006b6e:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006b74:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006b7a:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006b80:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8006b86:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006b8c:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8006b92:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d103      	bne.n	8006baa <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d10a      	bne.n	8006bd6 <FSMC_NORSRAM_Init+0xb6>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d006      	beq.n	8006bec <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	ffc00480 	.word	0xffc00480

08006c00 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006c22:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c2e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c36:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c3e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c48:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	3b02      	subs	r3, #2
 8006c50:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c52:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c78:	d10e      	bne.n	8006c98 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c82:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	051b      	lsls	r3, r3, #20
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc0:	d122      	bne.n	8006d08 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cca:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cde:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006ce6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006cee:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006cf4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6979      	ldr	r1, [r7, #20]
 8006d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d06:	e005      	b.n	8006d14 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	cff00000 	.word	0xcff00000

08006d28 <__errno>:
 8006d28:	4b01      	ldr	r3, [pc, #4]	; (8006d30 <__errno+0x8>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000098 	.word	0x20000098

08006d34 <__libc_init_array>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4d0d      	ldr	r5, [pc, #52]	; (8006d6c <__libc_init_array+0x38>)
 8006d38:	4c0d      	ldr	r4, [pc, #52]	; (8006d70 <__libc_init_array+0x3c>)
 8006d3a:	1b64      	subs	r4, r4, r5
 8006d3c:	10a4      	asrs	r4, r4, #2
 8006d3e:	2600      	movs	r6, #0
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	d109      	bne.n	8006d58 <__libc_init_array+0x24>
 8006d44:	4d0b      	ldr	r5, [pc, #44]	; (8006d74 <__libc_init_array+0x40>)
 8006d46:	4c0c      	ldr	r4, [pc, #48]	; (8006d78 <__libc_init_array+0x44>)
 8006d48:	f002 ff00 	bl	8009b4c <_init>
 8006d4c:	1b64      	subs	r4, r4, r5
 8006d4e:	10a4      	asrs	r4, r4, #2
 8006d50:	2600      	movs	r6, #0
 8006d52:	42a6      	cmp	r6, r4
 8006d54:	d105      	bne.n	8006d62 <__libc_init_array+0x2e>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5c:	4798      	blx	r3
 8006d5e:	3601      	adds	r6, #1
 8006d60:	e7ee      	b.n	8006d40 <__libc_init_array+0xc>
 8006d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d66:	4798      	blx	r3
 8006d68:	3601      	adds	r6, #1
 8006d6a:	e7f2      	b.n	8006d52 <__libc_init_array+0x1e>
 8006d6c:	0800becc 	.word	0x0800becc
 8006d70:	0800becc 	.word	0x0800becc
 8006d74:	0800becc 	.word	0x0800becc
 8006d78:	0800bed0 	.word	0x0800bed0

08006d7c <memset>:
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <__cvt>:
 8006d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	ec55 4b10 	vmov	r4, r5, d0
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	460e      	mov	r6, r1
 8006d98:	4619      	mov	r1, r3
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	bfbb      	ittet	lt
 8006d9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006da2:	461d      	movlt	r5, r3
 8006da4:	2300      	movge	r3, #0
 8006da6:	232d      	movlt	r3, #45	; 0x2d
 8006da8:	700b      	strb	r3, [r1, #0]
 8006daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006db0:	4691      	mov	r9, r2
 8006db2:	f023 0820 	bic.w	r8, r3, #32
 8006db6:	bfbc      	itt	lt
 8006db8:	4622      	movlt	r2, r4
 8006dba:	4614      	movlt	r4, r2
 8006dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc0:	d005      	beq.n	8006dce <__cvt+0x42>
 8006dc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dc6:	d100      	bne.n	8006dca <__cvt+0x3e>
 8006dc8:	3601      	adds	r6, #1
 8006dca:	2102      	movs	r1, #2
 8006dcc:	e000      	b.n	8006dd0 <__cvt+0x44>
 8006dce:	2103      	movs	r1, #3
 8006dd0:	ab03      	add	r3, sp, #12
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	ab02      	add	r3, sp, #8
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	ec45 4b10 	vmov	d0, r4, r5
 8006ddc:	4653      	mov	r3, sl
 8006dde:	4632      	mov	r2, r6
 8006de0:	f000 fd36 	bl	8007850 <_dtoa_r>
 8006de4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006de8:	4607      	mov	r7, r0
 8006dea:	d102      	bne.n	8006df2 <__cvt+0x66>
 8006dec:	f019 0f01 	tst.w	r9, #1
 8006df0:	d022      	beq.n	8006e38 <__cvt+0xac>
 8006df2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006df6:	eb07 0906 	add.w	r9, r7, r6
 8006dfa:	d110      	bne.n	8006e1e <__cvt+0x92>
 8006dfc:	783b      	ldrb	r3, [r7, #0]
 8006dfe:	2b30      	cmp	r3, #48	; 0x30
 8006e00:	d10a      	bne.n	8006e18 <__cvt+0x8c>
 8006e02:	2200      	movs	r2, #0
 8006e04:	2300      	movs	r3, #0
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8006e0e:	b918      	cbnz	r0, 8006e18 <__cvt+0x8c>
 8006e10:	f1c6 0601 	rsb	r6, r6, #1
 8006e14:	f8ca 6000 	str.w	r6, [sl]
 8006e18:	f8da 3000 	ldr.w	r3, [sl]
 8006e1c:	4499      	add	r9, r3
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2300      	movs	r3, #0
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 fe6f 	bl	8000b08 <__aeabi_dcmpeq>
 8006e2a:	b108      	cbz	r0, 8006e30 <__cvt+0xa4>
 8006e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e30:	2230      	movs	r2, #48	; 0x30
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	454b      	cmp	r3, r9
 8006e36:	d307      	bcc.n	8006e48 <__cvt+0xbc>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e3c:	1bdb      	subs	r3, r3, r7
 8006e3e:	4638      	mov	r0, r7
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	b004      	add	sp, #16
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	9103      	str	r1, [sp, #12]
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e7f0      	b.n	8006e32 <__cvt+0xa6>

08006e50 <__exponent>:
 8006e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e52:	4603      	mov	r3, r0
 8006e54:	2900      	cmp	r1, #0
 8006e56:	bfb8      	it	lt
 8006e58:	4249      	neglt	r1, r1
 8006e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e5e:	bfb4      	ite	lt
 8006e60:	222d      	movlt	r2, #45	; 0x2d
 8006e62:	222b      	movge	r2, #43	; 0x2b
 8006e64:	2909      	cmp	r1, #9
 8006e66:	7042      	strb	r2, [r0, #1]
 8006e68:	dd2a      	ble.n	8006ec0 <__exponent+0x70>
 8006e6a:	f10d 0407 	add.w	r4, sp, #7
 8006e6e:	46a4      	mov	ip, r4
 8006e70:	270a      	movs	r7, #10
 8006e72:	46a6      	mov	lr, r4
 8006e74:	460a      	mov	r2, r1
 8006e76:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e7a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e7e:	3530      	adds	r5, #48	; 0x30
 8006e80:	2a63      	cmp	r2, #99	; 0x63
 8006e82:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	dcf1      	bgt.n	8006e72 <__exponent+0x22>
 8006e8e:	3130      	adds	r1, #48	; 0x30
 8006e90:	f1ae 0502 	sub.w	r5, lr, #2
 8006e94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e98:	1c44      	adds	r4, r0, #1
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4561      	cmp	r1, ip
 8006e9e:	d30a      	bcc.n	8006eb6 <__exponent+0x66>
 8006ea0:	f10d 0209 	add.w	r2, sp, #9
 8006ea4:	eba2 020e 	sub.w	r2, r2, lr
 8006ea8:	4565      	cmp	r5, ip
 8006eaa:	bf88      	it	hi
 8006eac:	2200      	movhi	r2, #0
 8006eae:	4413      	add	r3, r2
 8006eb0:	1a18      	subs	r0, r3, r0
 8006eb2:	b003      	add	sp, #12
 8006eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ebe:	e7ed      	b.n	8006e9c <__exponent+0x4c>
 8006ec0:	2330      	movs	r3, #48	; 0x30
 8006ec2:	3130      	adds	r1, #48	; 0x30
 8006ec4:	7083      	strb	r3, [r0, #2]
 8006ec6:	70c1      	strb	r1, [r0, #3]
 8006ec8:	1d03      	adds	r3, r0, #4
 8006eca:	e7f1      	b.n	8006eb0 <__exponent+0x60>

08006ecc <_printf_float>:
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	ed2d 8b02 	vpush	{d8}
 8006ed4:	b08d      	sub	sp, #52	; 0x34
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006edc:	4616      	mov	r6, r2
 8006ede:	461f      	mov	r7, r3
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	f001 faa1 	bl	8008428 <_localeconv_r>
 8006ee6:	f8d0 a000 	ldr.w	sl, [r0]
 8006eea:	4650      	mov	r0, sl
 8006eec:	f7f9 f990 	bl	8000210 <strlen>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	9305      	str	r3, [sp, #20]
 8006ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8006efc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f00:	3307      	adds	r3, #7
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	f103 0208 	add.w	r2, r3, #8
 8006f0a:	f8c8 2000 	str.w	r2, [r8]
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f1e:	9307      	str	r3, [sp, #28]
 8006f20:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f24:	ee08 0a10 	vmov	s16, r0
 8006f28:	4b9f      	ldr	r3, [pc, #636]	; (80071a8 <_printf_float+0x2dc>)
 8006f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f32:	f7f9 fe1b 	bl	8000b6c <__aeabi_dcmpun>
 8006f36:	bb88      	cbnz	r0, 8006f9c <_printf_float+0xd0>
 8006f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f3c:	4b9a      	ldr	r3, [pc, #616]	; (80071a8 <_printf_float+0x2dc>)
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	f7f9 fdf5 	bl	8000b30 <__aeabi_dcmple>
 8006f46:	bb48      	cbnz	r0, 8006f9c <_printf_float+0xd0>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 fde4 	bl	8000b1c <__aeabi_dcmplt>
 8006f54:	b110      	cbz	r0, 8006f5c <_printf_float+0x90>
 8006f56:	232d      	movs	r3, #45	; 0x2d
 8006f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5c:	4b93      	ldr	r3, [pc, #588]	; (80071ac <_printf_float+0x2e0>)
 8006f5e:	4894      	ldr	r0, [pc, #592]	; (80071b0 <_printf_float+0x2e4>)
 8006f60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f64:	bf94      	ite	ls
 8006f66:	4698      	movls	r8, r3
 8006f68:	4680      	movhi	r8, r0
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	9b05      	ldr	r3, [sp, #20]
 8006f70:	f023 0204 	bic.w	r2, r3, #4
 8006f74:	6022      	str	r2, [r4, #0]
 8006f76:	f04f 0900 	mov.w	r9, #0
 8006f7a:	9700      	str	r7, [sp, #0]
 8006f7c:	4633      	mov	r3, r6
 8006f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f9d8 	bl	8007338 <_printf_common>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f040 8090 	bne.w	80070ae <_printf_float+0x1e2>
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	b00d      	add	sp, #52	; 0x34
 8006f94:	ecbd 8b02 	vpop	{d8}
 8006f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 fde2 	bl	8000b6c <__aeabi_dcmpun>
 8006fa8:	b140      	cbz	r0, 8006fbc <_printf_float+0xf0>
 8006faa:	464b      	mov	r3, r9
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bfbc      	itt	lt
 8006fb0:	232d      	movlt	r3, #45	; 0x2d
 8006fb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fb6:	487f      	ldr	r0, [pc, #508]	; (80071b4 <_printf_float+0x2e8>)
 8006fb8:	4b7f      	ldr	r3, [pc, #508]	; (80071b8 <_printf_float+0x2ec>)
 8006fba:	e7d1      	b.n	8006f60 <_printf_float+0x94>
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fc2:	9206      	str	r2, [sp, #24]
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	d13f      	bne.n	8007048 <_printf_float+0x17c>
 8006fc8:	2306      	movs	r3, #6
 8006fca:	6063      	str	r3, [r4, #4]
 8006fcc:	9b05      	ldr	r3, [sp, #20]
 8006fce:	6861      	ldr	r1, [r4, #4]
 8006fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	ab0a      	add	r3, sp, #40	; 0x28
 8006fda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fde:	ab09      	add	r3, sp, #36	; 0x24
 8006fe0:	ec49 8b10 	vmov	d0, r8, r9
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	6022      	str	r2, [r4, #0]
 8006fe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fec:	4628      	mov	r0, r5
 8006fee:	f7ff fecd 	bl	8006d8c <__cvt>
 8006ff2:	9b06      	ldr	r3, [sp, #24]
 8006ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff6:	2b47      	cmp	r3, #71	; 0x47
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	d108      	bne.n	800700e <_printf_float+0x142>
 8006ffc:	1cc8      	adds	r0, r1, #3
 8006ffe:	db02      	blt.n	8007006 <_printf_float+0x13a>
 8007000:	6863      	ldr	r3, [r4, #4]
 8007002:	4299      	cmp	r1, r3
 8007004:	dd41      	ble.n	800708a <_printf_float+0x1be>
 8007006:	f1ab 0b02 	sub.w	fp, fp, #2
 800700a:	fa5f fb8b 	uxtb.w	fp, fp
 800700e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007012:	d820      	bhi.n	8007056 <_printf_float+0x18a>
 8007014:	3901      	subs	r1, #1
 8007016:	465a      	mov	r2, fp
 8007018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800701c:	9109      	str	r1, [sp, #36]	; 0x24
 800701e:	f7ff ff17 	bl	8006e50 <__exponent>
 8007022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007024:	1813      	adds	r3, r2, r0
 8007026:	2a01      	cmp	r2, #1
 8007028:	4681      	mov	r9, r0
 800702a:	6123      	str	r3, [r4, #16]
 800702c:	dc02      	bgt.n	8007034 <_printf_float+0x168>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	07d2      	lsls	r2, r2, #31
 8007032:	d501      	bpl.n	8007038 <_printf_float+0x16c>
 8007034:	3301      	adds	r3, #1
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800703c:	2b00      	cmp	r3, #0
 800703e:	d09c      	beq.n	8006f7a <_printf_float+0xae>
 8007040:	232d      	movs	r3, #45	; 0x2d
 8007042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007046:	e798      	b.n	8006f7a <_printf_float+0xae>
 8007048:	9a06      	ldr	r2, [sp, #24]
 800704a:	2a47      	cmp	r2, #71	; 0x47
 800704c:	d1be      	bne.n	8006fcc <_printf_float+0x100>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1bc      	bne.n	8006fcc <_printf_float+0x100>
 8007052:	2301      	movs	r3, #1
 8007054:	e7b9      	b.n	8006fca <_printf_float+0xfe>
 8007056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800705a:	d118      	bne.n	800708e <_printf_float+0x1c2>
 800705c:	2900      	cmp	r1, #0
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	dd0b      	ble.n	800707a <_printf_float+0x1ae>
 8007062:	6121      	str	r1, [r4, #16]
 8007064:	b913      	cbnz	r3, 800706c <_printf_float+0x1a0>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	07d0      	lsls	r0, r2, #31
 800706a:	d502      	bpl.n	8007072 <_printf_float+0x1a6>
 800706c:	3301      	adds	r3, #1
 800706e:	440b      	add	r3, r1
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	65a1      	str	r1, [r4, #88]	; 0x58
 8007074:	f04f 0900 	mov.w	r9, #0
 8007078:	e7de      	b.n	8007038 <_printf_float+0x16c>
 800707a:	b913      	cbnz	r3, 8007082 <_printf_float+0x1b6>
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	07d2      	lsls	r2, r2, #31
 8007080:	d501      	bpl.n	8007086 <_printf_float+0x1ba>
 8007082:	3302      	adds	r3, #2
 8007084:	e7f4      	b.n	8007070 <_printf_float+0x1a4>
 8007086:	2301      	movs	r3, #1
 8007088:	e7f2      	b.n	8007070 <_printf_float+0x1a4>
 800708a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800708e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007090:	4299      	cmp	r1, r3
 8007092:	db05      	blt.n	80070a0 <_printf_float+0x1d4>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	6121      	str	r1, [r4, #16]
 8007098:	07d8      	lsls	r0, r3, #31
 800709a:	d5ea      	bpl.n	8007072 <_printf_float+0x1a6>
 800709c:	1c4b      	adds	r3, r1, #1
 800709e:	e7e7      	b.n	8007070 <_printf_float+0x1a4>
 80070a0:	2900      	cmp	r1, #0
 80070a2:	bfd4      	ite	le
 80070a4:	f1c1 0202 	rsble	r2, r1, #2
 80070a8:	2201      	movgt	r2, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	e7e0      	b.n	8007070 <_printf_float+0x1a4>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	055a      	lsls	r2, r3, #21
 80070b2:	d407      	bmi.n	80070c4 <_printf_float+0x1f8>
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	4642      	mov	r2, r8
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	d12c      	bne.n	800711c <_printf_float+0x250>
 80070c2:	e764      	b.n	8006f8e <_printf_float+0xc2>
 80070c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070c8:	f240 80e0 	bls.w	800728c <_printf_float+0x3c0>
 80070cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070d0:	2200      	movs	r2, #0
 80070d2:	2300      	movs	r3, #0
 80070d4:	f7f9 fd18 	bl	8000b08 <__aeabi_dcmpeq>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d034      	beq.n	8007146 <_printf_float+0x27a>
 80070dc:	4a37      	ldr	r2, [pc, #220]	; (80071bc <_printf_float+0x2f0>)
 80070de:	2301      	movs	r3, #1
 80070e0:	4631      	mov	r1, r6
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b8      	blx	r7
 80070e6:	3001      	adds	r0, #1
 80070e8:	f43f af51 	beq.w	8006f8e <_printf_float+0xc2>
 80070ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f0:	429a      	cmp	r2, r3
 80070f2:	db02      	blt.n	80070fa <_printf_float+0x22e>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	07d8      	lsls	r0, r3, #31
 80070f8:	d510      	bpl.n	800711c <_printf_float+0x250>
 80070fa:	ee18 3a10 	vmov	r3, s16
 80070fe:	4652      	mov	r2, sl
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	f43f af41 	beq.w	8006f8e <_printf_float+0xc2>
 800710c:	f04f 0800 	mov.w	r8, #0
 8007110:	f104 091a 	add.w	r9, r4, #26
 8007114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007116:	3b01      	subs	r3, #1
 8007118:	4543      	cmp	r3, r8
 800711a:	dc09      	bgt.n	8007130 <_printf_float+0x264>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	079b      	lsls	r3, r3, #30
 8007120:	f100 8105 	bmi.w	800732e <_printf_float+0x462>
 8007124:	68e0      	ldr	r0, [r4, #12]
 8007126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007128:	4298      	cmp	r0, r3
 800712a:	bfb8      	it	lt
 800712c:	4618      	movlt	r0, r3
 800712e:	e730      	b.n	8006f92 <_printf_float+0xc6>
 8007130:	2301      	movs	r3, #1
 8007132:	464a      	mov	r2, r9
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f af27 	beq.w	8006f8e <_printf_float+0xc2>
 8007140:	f108 0801 	add.w	r8, r8, #1
 8007144:	e7e6      	b.n	8007114 <_printf_float+0x248>
 8007146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	dc39      	bgt.n	80071c0 <_printf_float+0x2f4>
 800714c:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <_printf_float+0x2f0>)
 800714e:	2301      	movs	r3, #1
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af19 	beq.w	8006f8e <_printf_float+0xc2>
 800715c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007160:	4313      	orrs	r3, r2
 8007162:	d102      	bne.n	800716a <_printf_float+0x29e>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	07d9      	lsls	r1, r3, #31
 8007168:	d5d8      	bpl.n	800711c <_printf_float+0x250>
 800716a:	ee18 3a10 	vmov	r3, s16
 800716e:	4652      	mov	r2, sl
 8007170:	4631      	mov	r1, r6
 8007172:	4628      	mov	r0, r5
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	f43f af09 	beq.w	8006f8e <_printf_float+0xc2>
 800717c:	f04f 0900 	mov.w	r9, #0
 8007180:	f104 0a1a 	add.w	sl, r4, #26
 8007184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007186:	425b      	negs	r3, r3
 8007188:	454b      	cmp	r3, r9
 800718a:	dc01      	bgt.n	8007190 <_printf_float+0x2c4>
 800718c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718e:	e792      	b.n	80070b6 <_printf_float+0x1ea>
 8007190:	2301      	movs	r3, #1
 8007192:	4652      	mov	r2, sl
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	f43f aef7 	beq.w	8006f8e <_printf_float+0xc2>
 80071a0:	f109 0901 	add.w	r9, r9, #1
 80071a4:	e7ee      	b.n	8007184 <_printf_float+0x2b8>
 80071a6:	bf00      	nop
 80071a8:	7fefffff 	.word	0x7fefffff
 80071ac:	0800bae8 	.word	0x0800bae8
 80071b0:	0800baec 	.word	0x0800baec
 80071b4:	0800baf4 	.word	0x0800baf4
 80071b8:	0800baf0 	.word	0x0800baf0
 80071bc:	0800baf8 	.word	0x0800baf8
 80071c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071c4:	429a      	cmp	r2, r3
 80071c6:	bfa8      	it	ge
 80071c8:	461a      	movge	r2, r3
 80071ca:	2a00      	cmp	r2, #0
 80071cc:	4691      	mov	r9, r2
 80071ce:	dc37      	bgt.n	8007240 <_printf_float+0x374>
 80071d0:	f04f 0b00 	mov.w	fp, #0
 80071d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d8:	f104 021a 	add.w	r2, r4, #26
 80071dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	eba3 0309 	sub.w	r3, r3, r9
 80071e4:	455b      	cmp	r3, fp
 80071e6:	dc33      	bgt.n	8007250 <_printf_float+0x384>
 80071e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ec:	429a      	cmp	r2, r3
 80071ee:	db3b      	blt.n	8007268 <_printf_float+0x39c>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07da      	lsls	r2, r3, #31
 80071f4:	d438      	bmi.n	8007268 <_printf_float+0x39c>
 80071f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f8:	9b05      	ldr	r3, [sp, #20]
 80071fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	eba2 0901 	sub.w	r9, r2, r1
 8007202:	4599      	cmp	r9, r3
 8007204:	bfa8      	it	ge
 8007206:	4699      	movge	r9, r3
 8007208:	f1b9 0f00 	cmp.w	r9, #0
 800720c:	dc35      	bgt.n	800727a <_printf_float+0x3ae>
 800720e:	f04f 0800 	mov.w	r8, #0
 8007212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007216:	f104 0a1a 	add.w	sl, r4, #26
 800721a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	eba3 0309 	sub.w	r3, r3, r9
 8007224:	4543      	cmp	r3, r8
 8007226:	f77f af79 	ble.w	800711c <_printf_float+0x250>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	f43f aeaa 	beq.w	8006f8e <_printf_float+0xc2>
 800723a:	f108 0801 	add.w	r8, r8, #1
 800723e:	e7ec      	b.n	800721a <_printf_float+0x34e>
 8007240:	4613      	mov	r3, r2
 8007242:	4631      	mov	r1, r6
 8007244:	4642      	mov	r2, r8
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	d1c0      	bne.n	80071d0 <_printf_float+0x304>
 800724e:	e69e      	b.n	8006f8e <_printf_float+0xc2>
 8007250:	2301      	movs	r3, #1
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	9205      	str	r2, [sp, #20]
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f ae97 	beq.w	8006f8e <_printf_float+0xc2>
 8007260:	9a05      	ldr	r2, [sp, #20]
 8007262:	f10b 0b01 	add.w	fp, fp, #1
 8007266:	e7b9      	b.n	80071dc <_printf_float+0x310>
 8007268:	ee18 3a10 	vmov	r3, s16
 800726c:	4652      	mov	r2, sl
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	d1be      	bne.n	80071f6 <_printf_float+0x32a>
 8007278:	e689      	b.n	8006f8e <_printf_float+0xc2>
 800727a:	9a05      	ldr	r2, [sp, #20]
 800727c:	464b      	mov	r3, r9
 800727e:	4442      	add	r2, r8
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	d1c1      	bne.n	800720e <_printf_float+0x342>
 800728a:	e680      	b.n	8006f8e <_printf_float+0xc2>
 800728c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800728e:	2a01      	cmp	r2, #1
 8007290:	dc01      	bgt.n	8007296 <_printf_float+0x3ca>
 8007292:	07db      	lsls	r3, r3, #31
 8007294:	d538      	bpl.n	8007308 <_printf_float+0x43c>
 8007296:	2301      	movs	r3, #1
 8007298:	4642      	mov	r2, r8
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	f43f ae74 	beq.w	8006f8e <_printf_float+0xc2>
 80072a6:	ee18 3a10 	vmov	r3, s16
 80072aa:	4652      	mov	r2, sl
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f ae6b 	beq.w	8006f8e <_printf_float+0xc2>
 80072b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	f7f9 fc22 	bl	8000b08 <__aeabi_dcmpeq>
 80072c4:	b9d8      	cbnz	r0, 80072fe <_printf_float+0x432>
 80072c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c8:	f108 0201 	add.w	r2, r8, #1
 80072cc:	3b01      	subs	r3, #1
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	d10e      	bne.n	80072f6 <_printf_float+0x42a>
 80072d8:	e659      	b.n	8006f8e <_printf_float+0xc2>
 80072da:	2301      	movs	r3, #1
 80072dc:	4652      	mov	r2, sl
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae52 	beq.w	8006f8e <_printf_float+0xc2>
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4543      	cmp	r3, r8
 80072f4:	dcf1      	bgt.n	80072da <_printf_float+0x40e>
 80072f6:	464b      	mov	r3, r9
 80072f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072fc:	e6dc      	b.n	80070b8 <_printf_float+0x1ec>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	f104 0a1a 	add.w	sl, r4, #26
 8007306:	e7f2      	b.n	80072ee <_printf_float+0x422>
 8007308:	2301      	movs	r3, #1
 800730a:	4642      	mov	r2, r8
 800730c:	e7df      	b.n	80072ce <_printf_float+0x402>
 800730e:	2301      	movs	r3, #1
 8007310:	464a      	mov	r2, r9
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae38 	beq.w	8006f8e <_printf_float+0xc2>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007326:	1a5b      	subs	r3, r3, r1
 8007328:	4543      	cmp	r3, r8
 800732a:	dcf0      	bgt.n	800730e <_printf_float+0x442>
 800732c:	e6fa      	b.n	8007124 <_printf_float+0x258>
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	f104 0919 	add.w	r9, r4, #25
 8007336:	e7f4      	b.n	8007322 <_printf_float+0x456>

08007338 <_printf_common>:
 8007338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	4616      	mov	r6, r2
 800733e:	4699      	mov	r9, r3
 8007340:	688a      	ldr	r2, [r1, #8]
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007348:	4293      	cmp	r3, r2
 800734a:	bfb8      	it	lt
 800734c:	4613      	movlt	r3, r2
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007354:	4607      	mov	r7, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b10a      	cbz	r2, 800735e <_printf_common+0x26>
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0699      	lsls	r1, r3, #26
 8007362:	bf42      	ittt	mi
 8007364:	6833      	ldrmi	r3, [r6, #0]
 8007366:	3302      	addmi	r3, #2
 8007368:	6033      	strmi	r3, [r6, #0]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d106      	bne.n	8007380 <_printf_common+0x48>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	6832      	ldr	r2, [r6, #0]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc26      	bgt.n	80073ce <_printf_common+0x96>
 8007380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007384:	1e13      	subs	r3, r2, #0
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	bf18      	it	ne
 800738a:	2301      	movne	r3, #1
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d42b      	bmi.n	80073e8 <_printf_common+0xb0>
 8007390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007394:	4649      	mov	r1, r9
 8007396:	4638      	mov	r0, r7
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d01e      	beq.n	80073dc <_printf_common+0xa4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	68e5      	ldr	r5, [r4, #12]
 80073a2:	6832      	ldr	r2, [r6, #0]
 80073a4:	f003 0306 	and.w	r3, r3, #6
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	bf08      	it	eq
 80073ac:	1aad      	subeq	r5, r5, r2
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	2600      	movs	r6, #0
 80073c4:	341a      	adds	r4, #26
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d11a      	bne.n	8007400 <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e008      	b.n	80073e0 <_printf_common+0xa8>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4652      	mov	r2, sl
 80073d2:	4649      	mov	r1, r9
 80073d4:	4638      	mov	r0, r7
 80073d6:	47c0      	blx	r8
 80073d8:	3001      	adds	r0, #1
 80073da:	d103      	bne.n	80073e4 <_printf_common+0xac>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	3501      	adds	r5, #1
 80073e6:	e7c6      	b.n	8007376 <_printf_common+0x3e>
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	2030      	movs	r0, #48	; 0x30
 80073ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f2:	4422      	add	r2, r4
 80073f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fc:	3302      	adds	r3, #2
 80073fe:	e7c7      	b.n	8007390 <_printf_common+0x58>
 8007400:	2301      	movs	r3, #1
 8007402:	4622      	mov	r2, r4
 8007404:	4649      	mov	r1, r9
 8007406:	4638      	mov	r0, r7
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d0e6      	beq.n	80073dc <_printf_common+0xa4>
 800740e:	3601      	adds	r6, #1
 8007410:	e7d9      	b.n	80073c6 <_printf_common+0x8e>
	...

08007414 <_printf_i>:
 8007414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	4691      	mov	r9, r2
 800741c:	7e27      	ldrb	r7, [r4, #24]
 800741e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007420:	2f78      	cmp	r7, #120	; 0x78
 8007422:	4680      	mov	r8, r0
 8007424:	469a      	mov	sl, r3
 8007426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800742a:	d807      	bhi.n	800743c <_printf_i+0x28>
 800742c:	2f62      	cmp	r7, #98	; 0x62
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x32>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f000 80d8 	beq.w	80075e6 <_printf_i+0x1d2>
 8007436:	2f58      	cmp	r7, #88	; 0x58
 8007438:	f000 80a3 	beq.w	8007582 <_printf_i+0x16e>
 800743c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007444:	e03a      	b.n	80074bc <_printf_i+0xa8>
 8007446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744a:	2b15      	cmp	r3, #21
 800744c:	d8f6      	bhi.n	800743c <_printf_i+0x28>
 800744e:	a001      	add	r0, pc, #4	; (adr r0, 8007454 <_printf_i+0x40>)
 8007450:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074c1 	.word	0x080074c1
 800745c:	0800743d 	.word	0x0800743d
 8007460:	0800743d 	.word	0x0800743d
 8007464:	0800743d 	.word	0x0800743d
 8007468:	0800743d 	.word	0x0800743d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800743d 	.word	0x0800743d
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080075cd 	.word	0x080075cd
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080075af 	.word	0x080075af
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800743d 	.word	0x0800743d
 8007494:	080075ef 	.word	0x080075ef
 8007498:	0800743d 	.word	0x0800743d
 800749c:	080074f1 	.word	0x080074f1
 80074a0:	0800743d 	.word	0x0800743d
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	080075b7 	.word	0x080075b7
 80074ac:	680b      	ldr	r3, [r1, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	600a      	str	r2, [r1, #0]
 80074b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e0a3      	b.n	8007608 <_printf_i+0x1f4>
 80074c0:	6825      	ldr	r5, [r4, #0]
 80074c2:	6808      	ldr	r0, [r1, #0]
 80074c4:	062e      	lsls	r6, r5, #24
 80074c6:	f100 0304 	add.w	r3, r0, #4
 80074ca:	d50a      	bpl.n	80074e2 <_printf_i+0xce>
 80074cc:	6805      	ldr	r5, [r0, #0]
 80074ce:	600b      	str	r3, [r1, #0]
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	da03      	bge.n	80074dc <_printf_i+0xc8>
 80074d4:	232d      	movs	r3, #45	; 0x2d
 80074d6:	426d      	negs	r5, r5
 80074d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074dc:	485e      	ldr	r0, [pc, #376]	; (8007658 <_printf_i+0x244>)
 80074de:	230a      	movs	r3, #10
 80074e0:	e019      	b.n	8007516 <_printf_i+0x102>
 80074e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074e6:	6805      	ldr	r5, [r0, #0]
 80074e8:	600b      	str	r3, [r1, #0]
 80074ea:	bf18      	it	ne
 80074ec:	b22d      	sxthne	r5, r5
 80074ee:	e7ef      	b.n	80074d0 <_printf_i+0xbc>
 80074f0:	680b      	ldr	r3, [r1, #0]
 80074f2:	6825      	ldr	r5, [r4, #0]
 80074f4:	1d18      	adds	r0, r3, #4
 80074f6:	6008      	str	r0, [r1, #0]
 80074f8:	0628      	lsls	r0, r5, #24
 80074fa:	d501      	bpl.n	8007500 <_printf_i+0xec>
 80074fc:	681d      	ldr	r5, [r3, #0]
 80074fe:	e002      	b.n	8007506 <_printf_i+0xf2>
 8007500:	0669      	lsls	r1, r5, #25
 8007502:	d5fb      	bpl.n	80074fc <_printf_i+0xe8>
 8007504:	881d      	ldrh	r5, [r3, #0]
 8007506:	4854      	ldr	r0, [pc, #336]	; (8007658 <_printf_i+0x244>)
 8007508:	2f6f      	cmp	r7, #111	; 0x6f
 800750a:	bf0c      	ite	eq
 800750c:	2308      	moveq	r3, #8
 800750e:	230a      	movne	r3, #10
 8007510:	2100      	movs	r1, #0
 8007512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007516:	6866      	ldr	r6, [r4, #4]
 8007518:	60a6      	str	r6, [r4, #8]
 800751a:	2e00      	cmp	r6, #0
 800751c:	bfa2      	ittt	ge
 800751e:	6821      	ldrge	r1, [r4, #0]
 8007520:	f021 0104 	bicge.w	r1, r1, #4
 8007524:	6021      	strge	r1, [r4, #0]
 8007526:	b90d      	cbnz	r5, 800752c <_printf_i+0x118>
 8007528:	2e00      	cmp	r6, #0
 800752a:	d04d      	beq.n	80075c8 <_printf_i+0x1b4>
 800752c:	4616      	mov	r6, r2
 800752e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007532:	fb03 5711 	mls	r7, r3, r1, r5
 8007536:	5dc7      	ldrb	r7, [r0, r7]
 8007538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800753c:	462f      	mov	r7, r5
 800753e:	42bb      	cmp	r3, r7
 8007540:	460d      	mov	r5, r1
 8007542:	d9f4      	bls.n	800752e <_printf_i+0x11a>
 8007544:	2b08      	cmp	r3, #8
 8007546:	d10b      	bne.n	8007560 <_printf_i+0x14c>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	07df      	lsls	r7, r3, #31
 800754c:	d508      	bpl.n	8007560 <_printf_i+0x14c>
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	6861      	ldr	r1, [r4, #4]
 8007552:	4299      	cmp	r1, r3
 8007554:	bfde      	ittt	le
 8007556:	2330      	movle	r3, #48	; 0x30
 8007558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800755c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007560:	1b92      	subs	r2, r2, r6
 8007562:	6122      	str	r2, [r4, #16]
 8007564:	f8cd a000 	str.w	sl, [sp]
 8007568:	464b      	mov	r3, r9
 800756a:	aa03      	add	r2, sp, #12
 800756c:	4621      	mov	r1, r4
 800756e:	4640      	mov	r0, r8
 8007570:	f7ff fee2 	bl	8007338 <_printf_common>
 8007574:	3001      	adds	r0, #1
 8007576:	d14c      	bne.n	8007612 <_printf_i+0x1fe>
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	b004      	add	sp, #16
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	4835      	ldr	r0, [pc, #212]	; (8007658 <_printf_i+0x244>)
 8007584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	680e      	ldr	r6, [r1, #0]
 800758c:	061f      	lsls	r7, r3, #24
 800758e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007592:	600e      	str	r6, [r1, #0]
 8007594:	d514      	bpl.n	80075c0 <_printf_i+0x1ac>
 8007596:	07d9      	lsls	r1, r3, #31
 8007598:	bf44      	itt	mi
 800759a:	f043 0320 	orrmi.w	r3, r3, #32
 800759e:	6023      	strmi	r3, [r4, #0]
 80075a0:	b91d      	cbnz	r5, 80075aa <_printf_i+0x196>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f023 0320 	bic.w	r3, r3, #32
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	2310      	movs	r3, #16
 80075ac:	e7b0      	b.n	8007510 <_printf_i+0xfc>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	f043 0320 	orr.w	r3, r3, #32
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	2378      	movs	r3, #120	; 0x78
 80075b8:	4828      	ldr	r0, [pc, #160]	; (800765c <_printf_i+0x248>)
 80075ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075be:	e7e3      	b.n	8007588 <_printf_i+0x174>
 80075c0:	065e      	lsls	r6, r3, #25
 80075c2:	bf48      	it	mi
 80075c4:	b2ad      	uxthmi	r5, r5
 80075c6:	e7e6      	b.n	8007596 <_printf_i+0x182>
 80075c8:	4616      	mov	r6, r2
 80075ca:	e7bb      	b.n	8007544 <_printf_i+0x130>
 80075cc:	680b      	ldr	r3, [r1, #0]
 80075ce:	6826      	ldr	r6, [r4, #0]
 80075d0:	6960      	ldr	r0, [r4, #20]
 80075d2:	1d1d      	adds	r5, r3, #4
 80075d4:	600d      	str	r5, [r1, #0]
 80075d6:	0635      	lsls	r5, r6, #24
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	d501      	bpl.n	80075e0 <_printf_i+0x1cc>
 80075dc:	6018      	str	r0, [r3, #0]
 80075de:	e002      	b.n	80075e6 <_printf_i+0x1d2>
 80075e0:	0671      	lsls	r1, r6, #25
 80075e2:	d5fb      	bpl.n	80075dc <_printf_i+0x1c8>
 80075e4:	8018      	strh	r0, [r3, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	4616      	mov	r6, r2
 80075ec:	e7ba      	b.n	8007564 <_printf_i+0x150>
 80075ee:	680b      	ldr	r3, [r1, #0]
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	600a      	str	r2, [r1, #0]
 80075f4:	681e      	ldr	r6, [r3, #0]
 80075f6:	6862      	ldr	r2, [r4, #4]
 80075f8:	2100      	movs	r1, #0
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7f8 fe10 	bl	8000220 <memchr>
 8007600:	b108      	cbz	r0, 8007606 <_printf_i+0x1f2>
 8007602:	1b80      	subs	r0, r0, r6
 8007604:	6060      	str	r0, [r4, #4]
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	2300      	movs	r3, #0
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007610:	e7a8      	b.n	8007564 <_printf_i+0x150>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	4632      	mov	r2, r6
 8007616:	4649      	mov	r1, r9
 8007618:	4640      	mov	r0, r8
 800761a:	47d0      	blx	sl
 800761c:	3001      	adds	r0, #1
 800761e:	d0ab      	beq.n	8007578 <_printf_i+0x164>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	d413      	bmi.n	800764e <_printf_i+0x23a>
 8007626:	68e0      	ldr	r0, [r4, #12]
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	4298      	cmp	r0, r3
 800762c:	bfb8      	it	lt
 800762e:	4618      	movlt	r0, r3
 8007630:	e7a4      	b.n	800757c <_printf_i+0x168>
 8007632:	2301      	movs	r3, #1
 8007634:	4632      	mov	r2, r6
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	47d0      	blx	sl
 800763c:	3001      	adds	r0, #1
 800763e:	d09b      	beq.n	8007578 <_printf_i+0x164>
 8007640:	3501      	adds	r5, #1
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	9903      	ldr	r1, [sp, #12]
 8007646:	1a5b      	subs	r3, r3, r1
 8007648:	42ab      	cmp	r3, r5
 800764a:	dcf2      	bgt.n	8007632 <_printf_i+0x21e>
 800764c:	e7eb      	b.n	8007626 <_printf_i+0x212>
 800764e:	2500      	movs	r5, #0
 8007650:	f104 0619 	add.w	r6, r4, #25
 8007654:	e7f5      	b.n	8007642 <_printf_i+0x22e>
 8007656:	bf00      	nop
 8007658:	0800bafa 	.word	0x0800bafa
 800765c:	0800bb0b 	.word	0x0800bb0b

08007660 <modf>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	ec55 4b10 	vmov	r4, r5, d0
 8007666:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800766a:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800766e:	2e13      	cmp	r6, #19
 8007670:	dc24      	bgt.n	80076bc <modf+0x5c>
 8007672:	2e00      	cmp	r6, #0
 8007674:	da07      	bge.n	8007686 <modf+0x26>
 8007676:	2600      	movs	r6, #0
 8007678:	f005 4700 	and.w	r7, r5, #2147483648	; 0x80000000
 800767c:	e9c0 6700 	strd	r6, r7, [r0]
 8007680:	ec45 4b10 	vmov	d0, r4, r5
 8007684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007686:	491a      	ldr	r1, [pc, #104]	; (80076f0 <modf+0x90>)
 8007688:	4131      	asrs	r1, r6
 800768a:	ea05 0601 	and.w	r6, r5, r1
 800768e:	ea56 0204 	orrs.w	r2, r6, r4
 8007692:	d105      	bne.n	80076a0 <modf+0x40>
 8007694:	ed80 0b00 	vstr	d0, [r0]
 8007698:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 800769c:	4614      	mov	r4, r2
 800769e:	e7ef      	b.n	8007680 <modf+0x20>
 80076a0:	2600      	movs	r6, #0
 80076a2:	ea25 0701 	bic.w	r7, r5, r1
 80076a6:	4632      	mov	r2, r6
 80076a8:	463b      	mov	r3, r7
 80076aa:	e9c0 2300 	strd	r2, r3, [r0]
 80076ae:	4629      	mov	r1, r5
 80076b0:	4620      	mov	r0, r4
 80076b2:	f7f8 fe09 	bl	80002c8 <__aeabi_dsub>
 80076b6:	4604      	mov	r4, r0
 80076b8:	460d      	mov	r5, r1
 80076ba:	e7e1      	b.n	8007680 <modf+0x20>
 80076bc:	2e33      	cmp	r6, #51	; 0x33
 80076be:	dd05      	ble.n	80076cc <modf+0x6c>
 80076c0:	ed80 0b00 	vstr	d0, [r0]
 80076c4:	2400      	movs	r4, #0
 80076c6:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 80076ca:	e7d9      	b.n	8007680 <modf+0x20>
 80076cc:	f2a1 4613 	subw	r6, r1, #1043	; 0x413
 80076d0:	f04f 31ff 	mov.w	r1, #4294967295
 80076d4:	40f1      	lsrs	r1, r6
 80076d6:	ea11 0604 	ands.w	r6, r1, r4
 80076da:	d105      	bne.n	80076e8 <modf+0x88>
 80076dc:	ed80 0b00 	vstr	d0, [r0]
 80076e0:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 80076e4:	4634      	mov	r4, r6
 80076e6:	e7cb      	b.n	8007680 <modf+0x20>
 80076e8:	462f      	mov	r7, r5
 80076ea:	ea24 0601 	bic.w	r6, r4, r1
 80076ee:	e7da      	b.n	80076a6 <modf+0x46>
 80076f0:	000fffff 	.word	0x000fffff

080076f4 <siprintf>:
 80076f4:	b40e      	push	{r1, r2, r3}
 80076f6:	b500      	push	{lr}
 80076f8:	b09c      	sub	sp, #112	; 0x70
 80076fa:	ab1d      	add	r3, sp, #116	; 0x74
 80076fc:	9002      	str	r0, [sp, #8]
 80076fe:	9006      	str	r0, [sp, #24]
 8007700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007704:	4809      	ldr	r0, [pc, #36]	; (800772c <siprintf+0x38>)
 8007706:	9107      	str	r1, [sp, #28]
 8007708:	9104      	str	r1, [sp, #16]
 800770a:	4909      	ldr	r1, [pc, #36]	; (8007730 <siprintf+0x3c>)
 800770c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007710:	9105      	str	r1, [sp, #20]
 8007712:	6800      	ldr	r0, [r0, #0]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	a902      	add	r1, sp, #8
 8007718:	f001 fb34 	bl	8008d84 <_svfiprintf_r>
 800771c:	9b02      	ldr	r3, [sp, #8]
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	b01c      	add	sp, #112	; 0x70
 8007724:	f85d eb04 	ldr.w	lr, [sp], #4
 8007728:	b003      	add	sp, #12
 800772a:	4770      	bx	lr
 800772c:	20000098 	.word	0x20000098
 8007730:	ffff0208 	.word	0xffff0208

08007734 <quorem>:
 8007734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	6903      	ldr	r3, [r0, #16]
 800773a:	690c      	ldr	r4, [r1, #16]
 800773c:	42a3      	cmp	r3, r4
 800773e:	4607      	mov	r7, r0
 8007740:	f2c0 8081 	blt.w	8007846 <quorem+0x112>
 8007744:	3c01      	subs	r4, #1
 8007746:	f101 0814 	add.w	r8, r1, #20
 800774a:	f100 0514 	add.w	r5, r0, #20
 800774e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800775c:	3301      	adds	r3, #1
 800775e:	429a      	cmp	r2, r3
 8007760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007768:	fbb2 f6f3 	udiv	r6, r2, r3
 800776c:	d331      	bcc.n	80077d2 <quorem+0x9e>
 800776e:	f04f 0e00 	mov.w	lr, #0
 8007772:	4640      	mov	r0, r8
 8007774:	46ac      	mov	ip, r5
 8007776:	46f2      	mov	sl, lr
 8007778:	f850 2b04 	ldr.w	r2, [r0], #4
 800777c:	b293      	uxth	r3, r2
 800777e:	fb06 e303 	mla	r3, r6, r3, lr
 8007782:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007786:	b29b      	uxth	r3, r3
 8007788:	ebaa 0303 	sub.w	r3, sl, r3
 800778c:	0c12      	lsrs	r2, r2, #16
 800778e:	f8dc a000 	ldr.w	sl, [ip]
 8007792:	fb06 e202 	mla	r2, r6, r2, lr
 8007796:	fa13 f38a 	uxtah	r3, r3, sl
 800779a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800779e:	fa1f fa82 	uxth.w	sl, r2
 80077a2:	f8dc 2000 	ldr.w	r2, [ip]
 80077a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b4:	4581      	cmp	r9, r0
 80077b6:	f84c 3b04 	str.w	r3, [ip], #4
 80077ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077be:	d2db      	bcs.n	8007778 <quorem+0x44>
 80077c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80077c4:	b92b      	cbnz	r3, 80077d2 <quorem+0x9e>
 80077c6:	9b01      	ldr	r3, [sp, #4]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	429d      	cmp	r5, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	d32e      	bcc.n	800782e <quorem+0xfa>
 80077d0:	613c      	str	r4, [r7, #16]
 80077d2:	4638      	mov	r0, r7
 80077d4:	f001 f8c0 	bl	8008958 <__mcmp>
 80077d8:	2800      	cmp	r0, #0
 80077da:	db24      	blt.n	8007826 <quorem+0xf2>
 80077dc:	3601      	adds	r6, #1
 80077de:	4628      	mov	r0, r5
 80077e0:	f04f 0c00 	mov.w	ip, #0
 80077e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80077e8:	f8d0 e000 	ldr.w	lr, [r0]
 80077ec:	b293      	uxth	r3, r2
 80077ee:	ebac 0303 	sub.w	r3, ip, r3
 80077f2:	0c12      	lsrs	r2, r2, #16
 80077f4:	fa13 f38e 	uxtah	r3, r3, lr
 80077f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007806:	45c1      	cmp	r9, r8
 8007808:	f840 3b04 	str.w	r3, [r0], #4
 800780c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007810:	d2e8      	bcs.n	80077e4 <quorem+0xb0>
 8007812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800781a:	b922      	cbnz	r2, 8007826 <quorem+0xf2>
 800781c:	3b04      	subs	r3, #4
 800781e:	429d      	cmp	r5, r3
 8007820:	461a      	mov	r2, r3
 8007822:	d30a      	bcc.n	800783a <quorem+0x106>
 8007824:	613c      	str	r4, [r7, #16]
 8007826:	4630      	mov	r0, r6
 8007828:	b003      	add	sp, #12
 800782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	3b04      	subs	r3, #4
 8007832:	2a00      	cmp	r2, #0
 8007834:	d1cc      	bne.n	80077d0 <quorem+0x9c>
 8007836:	3c01      	subs	r4, #1
 8007838:	e7c7      	b.n	80077ca <quorem+0x96>
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	3b04      	subs	r3, #4
 800783e:	2a00      	cmp	r2, #0
 8007840:	d1f0      	bne.n	8007824 <quorem+0xf0>
 8007842:	3c01      	subs	r4, #1
 8007844:	e7eb      	b.n	800781e <quorem+0xea>
 8007846:	2000      	movs	r0, #0
 8007848:	e7ee      	b.n	8007828 <quorem+0xf4>
 800784a:	0000      	movs	r0, r0
 800784c:	0000      	movs	r0, r0
	...

08007850 <_dtoa_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	ed2d 8b02 	vpush	{d8}
 8007858:	ec57 6b10 	vmov	r6, r7, d0
 800785c:	b095      	sub	sp, #84	; 0x54
 800785e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007860:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007864:	9105      	str	r1, [sp, #20]
 8007866:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800786a:	4604      	mov	r4, r0
 800786c:	9209      	str	r2, [sp, #36]	; 0x24
 800786e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007870:	b975      	cbnz	r5, 8007890 <_dtoa_r+0x40>
 8007872:	2010      	movs	r0, #16
 8007874:	f000 fddc 	bl	8008430 <malloc>
 8007878:	4602      	mov	r2, r0
 800787a:	6260      	str	r0, [r4, #36]	; 0x24
 800787c:	b920      	cbnz	r0, 8007888 <_dtoa_r+0x38>
 800787e:	4bb2      	ldr	r3, [pc, #712]	; (8007b48 <_dtoa_r+0x2f8>)
 8007880:	21ea      	movs	r1, #234	; 0xea
 8007882:	48b2      	ldr	r0, [pc, #712]	; (8007b4c <_dtoa_r+0x2fc>)
 8007884:	f001 fb8e 	bl	8008fa4 <__assert_func>
 8007888:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800788c:	6005      	str	r5, [r0, #0]
 800788e:	60c5      	str	r5, [r0, #12]
 8007890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	b151      	cbz	r1, 80078ac <_dtoa_r+0x5c>
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	604a      	str	r2, [r1, #4]
 800789a:	2301      	movs	r3, #1
 800789c:	4093      	lsls	r3, r2
 800789e:	608b      	str	r3, [r1, #8]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fe1b 	bl	80084dc <_Bfree>
 80078a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	1e3b      	subs	r3, r7, #0
 80078ae:	bfb9      	ittee	lt
 80078b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	9303      	strlt	r3, [sp, #12]
 80078b6:	2300      	movge	r3, #0
 80078b8:	f8c8 3000 	strge.w	r3, [r8]
 80078bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80078c0:	4ba3      	ldr	r3, [pc, #652]	; (8007b50 <_dtoa_r+0x300>)
 80078c2:	bfbc      	itt	lt
 80078c4:	2201      	movlt	r2, #1
 80078c6:	f8c8 2000 	strlt.w	r2, [r8]
 80078ca:	ea33 0309 	bics.w	r3, r3, r9
 80078ce:	d11b      	bne.n	8007908 <_dtoa_r+0xb8>
 80078d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078dc:	4333      	orrs	r3, r6
 80078de:	f000 857a 	beq.w	80083d6 <_dtoa_r+0xb86>
 80078e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e4:	b963      	cbnz	r3, 8007900 <_dtoa_r+0xb0>
 80078e6:	4b9b      	ldr	r3, [pc, #620]	; (8007b54 <_dtoa_r+0x304>)
 80078e8:	e024      	b.n	8007934 <_dtoa_r+0xe4>
 80078ea:	4b9b      	ldr	r3, [pc, #620]	; (8007b58 <_dtoa_r+0x308>)
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	9800      	ldr	r0, [sp, #0]
 80078f6:	b015      	add	sp, #84	; 0x54
 80078f8:	ecbd 8b02 	vpop	{d8}
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	4b94      	ldr	r3, [pc, #592]	; (8007b54 <_dtoa_r+0x304>)
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	3303      	adds	r3, #3
 8007906:	e7f3      	b.n	80078f0 <_dtoa_r+0xa0>
 8007908:	ed9d 7b02 	vldr	d7, [sp, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	ec51 0b17 	vmov	r0, r1, d7
 8007912:	2300      	movs	r3, #0
 8007914:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007918:	f7f9 f8f6 	bl	8000b08 <__aeabi_dcmpeq>
 800791c:	4680      	mov	r8, r0
 800791e:	b158      	cbz	r0, 8007938 <_dtoa_r+0xe8>
 8007920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007922:	2301      	movs	r3, #1
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8551 	beq.w	80083d0 <_dtoa_r+0xb80>
 800792e:	488b      	ldr	r0, [pc, #556]	; (8007b5c <_dtoa_r+0x30c>)
 8007930:	6018      	str	r0, [r3, #0]
 8007932:	1e43      	subs	r3, r0, #1
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	e7dd      	b.n	80078f4 <_dtoa_r+0xa4>
 8007938:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800793c:	aa12      	add	r2, sp, #72	; 0x48
 800793e:	a913      	add	r1, sp, #76	; 0x4c
 8007940:	4620      	mov	r0, r4
 8007942:	f001 f8ad 	bl	8008aa0 <__d2b>
 8007946:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800794a:	4683      	mov	fp, r0
 800794c:	2d00      	cmp	r5, #0
 800794e:	d07c      	beq.n	8007a4a <_dtoa_r+0x1fa>
 8007950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007952:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800795a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800795e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007962:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800796a:	4b7d      	ldr	r3, [pc, #500]	; (8007b60 <_dtoa_r+0x310>)
 800796c:	2200      	movs	r2, #0
 800796e:	4630      	mov	r0, r6
 8007970:	4639      	mov	r1, r7
 8007972:	f7f8 fca9 	bl	80002c8 <__aeabi_dsub>
 8007976:	a36e      	add	r3, pc, #440	; (adr r3, 8007b30 <_dtoa_r+0x2e0>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f7f8 fe5c 	bl	8000638 <__aeabi_dmul>
 8007980:	a36d      	add	r3, pc, #436	; (adr r3, 8007b38 <_dtoa_r+0x2e8>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fca1 	bl	80002cc <__adddf3>
 800798a:	4606      	mov	r6, r0
 800798c:	4628      	mov	r0, r5
 800798e:	460f      	mov	r7, r1
 8007990:	f7f8 fde8 	bl	8000564 <__aeabi_i2d>
 8007994:	a36a      	add	r3, pc, #424	; (adr r3, 8007b40 <_dtoa_r+0x2f0>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fe4d 	bl	8000638 <__aeabi_dmul>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4630      	mov	r0, r6
 80079a4:	4639      	mov	r1, r7
 80079a6:	f7f8 fc91 	bl	80002cc <__adddf3>
 80079aa:	4606      	mov	r6, r0
 80079ac:	460f      	mov	r7, r1
 80079ae:	f7f9 f8f3 	bl	8000b98 <__aeabi_d2iz>
 80079b2:	2200      	movs	r2, #0
 80079b4:	4682      	mov	sl, r0
 80079b6:	2300      	movs	r3, #0
 80079b8:	4630      	mov	r0, r6
 80079ba:	4639      	mov	r1, r7
 80079bc:	f7f9 f8ae 	bl	8000b1c <__aeabi_dcmplt>
 80079c0:	b148      	cbz	r0, 80079d6 <_dtoa_r+0x186>
 80079c2:	4650      	mov	r0, sl
 80079c4:	f7f8 fdce 	bl	8000564 <__aeabi_i2d>
 80079c8:	4632      	mov	r2, r6
 80079ca:	463b      	mov	r3, r7
 80079cc:	f7f9 f89c 	bl	8000b08 <__aeabi_dcmpeq>
 80079d0:	b908      	cbnz	r0, 80079d6 <_dtoa_r+0x186>
 80079d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079d6:	f1ba 0f16 	cmp.w	sl, #22
 80079da:	d854      	bhi.n	8007a86 <_dtoa_r+0x236>
 80079dc:	4b61      	ldr	r3, [pc, #388]	; (8007b64 <_dtoa_r+0x314>)
 80079de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079ea:	f7f9 f897 	bl	8000b1c <__aeabi_dcmplt>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d04b      	beq.n	8007a8a <_dtoa_r+0x23a>
 80079f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079f6:	2300      	movs	r3, #0
 80079f8:	930e      	str	r3, [sp, #56]	; 0x38
 80079fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079fc:	1b5d      	subs	r5, r3, r5
 80079fe:	1e6b      	subs	r3, r5, #1
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	bf43      	ittte	mi
 8007a04:	2300      	movmi	r3, #0
 8007a06:	f1c5 0801 	rsbmi	r8, r5, #1
 8007a0a:	9304      	strmi	r3, [sp, #16]
 8007a0c:	f04f 0800 	movpl.w	r8, #0
 8007a10:	f1ba 0f00 	cmp.w	sl, #0
 8007a14:	db3b      	blt.n	8007a8e <_dtoa_r+0x23e>
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007a1c:	4453      	add	r3, sl
 8007a1e:	9304      	str	r3, [sp, #16]
 8007a20:	2300      	movs	r3, #0
 8007a22:	9306      	str	r3, [sp, #24]
 8007a24:	9b05      	ldr	r3, [sp, #20]
 8007a26:	2b09      	cmp	r3, #9
 8007a28:	d869      	bhi.n	8007afe <_dtoa_r+0x2ae>
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	bfc4      	itt	gt
 8007a2e:	3b04      	subgt	r3, #4
 8007a30:	9305      	strgt	r3, [sp, #20]
 8007a32:	9b05      	ldr	r3, [sp, #20]
 8007a34:	f1a3 0302 	sub.w	r3, r3, #2
 8007a38:	bfcc      	ite	gt
 8007a3a:	2500      	movgt	r5, #0
 8007a3c:	2501      	movle	r5, #1
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d869      	bhi.n	8007b16 <_dtoa_r+0x2c6>
 8007a42:	e8df f003 	tbb	[pc, r3]
 8007a46:	4e2c      	.short	0x4e2c
 8007a48:	5a4c      	.short	0x5a4c
 8007a4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a4e:	441d      	add	r5, r3
 8007a50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	bfc1      	itttt	gt
 8007a58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a60:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a68:	bfda      	itte	le
 8007a6a:	f1c3 0320 	rsble	r3, r3, #32
 8007a6e:	fa06 f003 	lslle.w	r0, r6, r3
 8007a72:	4318      	orrgt	r0, r3
 8007a74:	f7f8 fd66 	bl	8000544 <__aeabi_ui2d>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a80:	3d01      	subs	r5, #1
 8007a82:	9310      	str	r3, [sp, #64]	; 0x40
 8007a84:	e771      	b.n	800796a <_dtoa_r+0x11a>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7b6      	b.n	80079f8 <_dtoa_r+0x1a8>
 8007a8a:	900e      	str	r0, [sp, #56]	; 0x38
 8007a8c:	e7b5      	b.n	80079fa <_dtoa_r+0x1aa>
 8007a8e:	f1ca 0300 	rsb	r3, sl, #0
 8007a92:	9306      	str	r3, [sp, #24]
 8007a94:	2300      	movs	r3, #0
 8007a96:	eba8 080a 	sub.w	r8, r8, sl
 8007a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a9c:	e7c2      	b.n	8007a24 <_dtoa_r+0x1d4>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9308      	str	r3, [sp, #32]
 8007aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dc39      	bgt.n	8007b1c <_dtoa_r+0x2cc>
 8007aa8:	f04f 0901 	mov.w	r9, #1
 8007aac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ab6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ab8:	2200      	movs	r2, #0
 8007aba:	6042      	str	r2, [r0, #4]
 8007abc:	2204      	movs	r2, #4
 8007abe:	f102 0614 	add.w	r6, r2, #20
 8007ac2:	429e      	cmp	r6, r3
 8007ac4:	6841      	ldr	r1, [r0, #4]
 8007ac6:	d92f      	bls.n	8007b28 <_dtoa_r+0x2d8>
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 fcc7 	bl	800845c <_Balloc>
 8007ace:	9000      	str	r0, [sp, #0]
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d14b      	bne.n	8007b6c <_dtoa_r+0x31c>
 8007ad4:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <_dtoa_r+0x318>)
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007adc:	e6d1      	b.n	8007882 <_dtoa_r+0x32>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e7de      	b.n	8007aa0 <_dtoa_r+0x250>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9308      	str	r3, [sp, #32]
 8007ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae8:	eb0a 0903 	add.w	r9, sl, r3
 8007aec:	f109 0301 	add.w	r3, r9, #1
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	bfb8      	it	lt
 8007af6:	2301      	movlt	r3, #1
 8007af8:	e7dd      	b.n	8007ab6 <_dtoa_r+0x266>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7f2      	b.n	8007ae4 <_dtoa_r+0x294>
 8007afe:	2501      	movs	r5, #1
 8007b00:	2300      	movs	r3, #0
 8007b02:	9305      	str	r3, [sp, #20]
 8007b04:	9508      	str	r5, [sp, #32]
 8007b06:	f04f 39ff 	mov.w	r9, #4294967295
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b10:	2312      	movs	r3, #18
 8007b12:	9209      	str	r2, [sp, #36]	; 0x24
 8007b14:	e7cf      	b.n	8007ab6 <_dtoa_r+0x266>
 8007b16:	2301      	movs	r3, #1
 8007b18:	9308      	str	r3, [sp, #32]
 8007b1a:	e7f4      	b.n	8007b06 <_dtoa_r+0x2b6>
 8007b1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b20:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b24:	464b      	mov	r3, r9
 8007b26:	e7c6      	b.n	8007ab6 <_dtoa_r+0x266>
 8007b28:	3101      	adds	r1, #1
 8007b2a:	6041      	str	r1, [r0, #4]
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	e7c6      	b.n	8007abe <_dtoa_r+0x26e>
 8007b30:	636f4361 	.word	0x636f4361
 8007b34:	3fd287a7 	.word	0x3fd287a7
 8007b38:	8b60c8b3 	.word	0x8b60c8b3
 8007b3c:	3fc68a28 	.word	0x3fc68a28
 8007b40:	509f79fb 	.word	0x509f79fb
 8007b44:	3fd34413 	.word	0x3fd34413
 8007b48:	0800bb29 	.word	0x0800bb29
 8007b4c:	0800bb40 	.word	0x0800bb40
 8007b50:	7ff00000 	.word	0x7ff00000
 8007b54:	0800bb25 	.word	0x0800bb25
 8007b58:	0800bb1c 	.word	0x0800bb1c
 8007b5c:	0800baf9 	.word	0x0800baf9
 8007b60:	3ff80000 	.word	0x3ff80000
 8007b64:	0800bc38 	.word	0x0800bc38
 8007b68:	0800bb9f 	.word	0x0800bb9f
 8007b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6e:	9a00      	ldr	r2, [sp, #0]
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	9b01      	ldr	r3, [sp, #4]
 8007b74:	2b0e      	cmp	r3, #14
 8007b76:	f200 80ad 	bhi.w	8007cd4 <_dtoa_r+0x484>
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	f000 80aa 	beq.w	8007cd4 <_dtoa_r+0x484>
 8007b80:	f1ba 0f00 	cmp.w	sl, #0
 8007b84:	dd36      	ble.n	8007bf4 <_dtoa_r+0x3a4>
 8007b86:	4ac3      	ldr	r2, [pc, #780]	; (8007e94 <_dtoa_r+0x644>)
 8007b88:	f00a 030f 	and.w	r3, sl, #15
 8007b8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b90:	ed93 7b00 	vldr	d7, [r3]
 8007b94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007b9c:	eeb0 8a47 	vmov.f32	s16, s14
 8007ba0:	eef0 8a67 	vmov.f32	s17, s15
 8007ba4:	d016      	beq.n	8007bd4 <_dtoa_r+0x384>
 8007ba6:	4bbc      	ldr	r3, [pc, #752]	; (8007e98 <_dtoa_r+0x648>)
 8007ba8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bb0:	f7f8 fe6c 	bl	800088c <__aeabi_ddiv>
 8007bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb8:	f007 070f 	and.w	r7, r7, #15
 8007bbc:	2503      	movs	r5, #3
 8007bbe:	4eb6      	ldr	r6, [pc, #728]	; (8007e98 <_dtoa_r+0x648>)
 8007bc0:	b957      	cbnz	r7, 8007bd8 <_dtoa_r+0x388>
 8007bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc6:	ec53 2b18 	vmov	r2, r3, d8
 8007bca:	f7f8 fe5f 	bl	800088c <__aeabi_ddiv>
 8007bce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bd2:	e029      	b.n	8007c28 <_dtoa_r+0x3d8>
 8007bd4:	2502      	movs	r5, #2
 8007bd6:	e7f2      	b.n	8007bbe <_dtoa_r+0x36e>
 8007bd8:	07f9      	lsls	r1, r7, #31
 8007bda:	d508      	bpl.n	8007bee <_dtoa_r+0x39e>
 8007bdc:	ec51 0b18 	vmov	r0, r1, d8
 8007be0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007be4:	f7f8 fd28 	bl	8000638 <__aeabi_dmul>
 8007be8:	ec41 0b18 	vmov	d8, r0, r1
 8007bec:	3501      	adds	r5, #1
 8007bee:	107f      	asrs	r7, r7, #1
 8007bf0:	3608      	adds	r6, #8
 8007bf2:	e7e5      	b.n	8007bc0 <_dtoa_r+0x370>
 8007bf4:	f000 80a6 	beq.w	8007d44 <_dtoa_r+0x4f4>
 8007bf8:	f1ca 0600 	rsb	r6, sl, #0
 8007bfc:	4ba5      	ldr	r3, [pc, #660]	; (8007e94 <_dtoa_r+0x644>)
 8007bfe:	4fa6      	ldr	r7, [pc, #664]	; (8007e98 <_dtoa_r+0x648>)
 8007c00:	f006 020f 	and.w	r2, r6, #15
 8007c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c10:	f7f8 fd12 	bl	8000638 <__aeabi_dmul>
 8007c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c18:	1136      	asrs	r6, r6, #4
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2502      	movs	r5, #2
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	f040 8085 	bne.w	8007d2e <_dtoa_r+0x4de>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1d2      	bne.n	8007bce <_dtoa_r+0x37e>
 8007c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 808c 	beq.w	8007d48 <_dtoa_r+0x4f8>
 8007c30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c34:	4b99      	ldr	r3, [pc, #612]	; (8007e9c <_dtoa_r+0x64c>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 ff6e 	bl	8000b1c <__aeabi_dcmplt>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	f000 8081 	beq.w	8007d48 <_dtoa_r+0x4f8>
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d07d      	beq.n	8007d48 <_dtoa_r+0x4f8>
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	dd3c      	ble.n	8007ccc <_dtoa_r+0x47c>
 8007c52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c56:	9307      	str	r3, [sp, #28]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4b91      	ldr	r3, [pc, #580]	; (8007ea0 <_dtoa_r+0x650>)
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f7f8 fcea 	bl	8000638 <__aeabi_dmul>
 8007c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c68:	3501      	adds	r5, #1
 8007c6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7f8 fc76 	bl	8000564 <__aeabi_i2d>
 8007c78:	4632      	mov	r2, r6
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	f7f8 fcdc 	bl	8000638 <__aeabi_dmul>
 8007c80:	4b88      	ldr	r3, [pc, #544]	; (8007ea4 <_dtoa_r+0x654>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	f7f8 fb22 	bl	80002cc <__adddf3>
 8007c88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c90:	9303      	str	r3, [sp, #12]
 8007c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d15c      	bne.n	8007d52 <_dtoa_r+0x502>
 8007c98:	4b83      	ldr	r3, [pc, #524]	; (8007ea8 <_dtoa_r+0x658>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 fb12 	bl	80002c8 <__aeabi_dsub>
 8007ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca8:	4606      	mov	r6, r0
 8007caa:	460f      	mov	r7, r1
 8007cac:	f7f8 ff54 	bl	8000b58 <__aeabi_dcmpgt>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	f040 8296 	bne.w	80081e2 <_dtoa_r+0x992>
 8007cb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	f7f8 ff2b 	bl	8000b1c <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f040 8288 	bne.w	80081dc <_dtoa_r+0x98c>
 8007ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f2c0 8158 	blt.w	8007f8c <_dtoa_r+0x73c>
 8007cdc:	f1ba 0f0e 	cmp.w	sl, #14
 8007ce0:	f300 8154 	bgt.w	8007f8c <_dtoa_r+0x73c>
 8007ce4:	4b6b      	ldr	r3, [pc, #428]	; (8007e94 <_dtoa_r+0x644>)
 8007ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f280 80e3 	bge.w	8007ebc <_dtoa_r+0x66c>
 8007cf6:	9b01      	ldr	r3, [sp, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f300 80df 	bgt.w	8007ebc <_dtoa_r+0x66c>
 8007cfe:	f040 826d 	bne.w	80081dc <_dtoa_r+0x98c>
 8007d02:	4b69      	ldr	r3, [pc, #420]	; (8007ea8 <_dtoa_r+0x658>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 fc95 	bl	8000638 <__aeabi_dmul>
 8007d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d12:	f7f8 ff17 	bl	8000b44 <__aeabi_dcmpge>
 8007d16:	9e01      	ldr	r6, [sp, #4]
 8007d18:	4637      	mov	r7, r6
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	f040 8243 	bne.w	80081a6 <_dtoa_r+0x956>
 8007d20:	9d00      	ldr	r5, [sp, #0]
 8007d22:	2331      	movs	r3, #49	; 0x31
 8007d24:	f805 3b01 	strb.w	r3, [r5], #1
 8007d28:	f10a 0a01 	add.w	sl, sl, #1
 8007d2c:	e23f      	b.n	80081ae <_dtoa_r+0x95e>
 8007d2e:	07f2      	lsls	r2, r6, #31
 8007d30:	d505      	bpl.n	8007d3e <_dtoa_r+0x4ee>
 8007d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d36:	f7f8 fc7f 	bl	8000638 <__aeabi_dmul>
 8007d3a:	3501      	adds	r5, #1
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	1076      	asrs	r6, r6, #1
 8007d40:	3708      	adds	r7, #8
 8007d42:	e76c      	b.n	8007c1e <_dtoa_r+0x3ce>
 8007d44:	2502      	movs	r5, #2
 8007d46:	e76f      	b.n	8007c28 <_dtoa_r+0x3d8>
 8007d48:	9b01      	ldr	r3, [sp, #4]
 8007d4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d50:	e78d      	b.n	8007c6e <_dtoa_r+0x41e>
 8007d52:	9900      	ldr	r1, [sp, #0]
 8007d54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d58:	4b4e      	ldr	r3, [pc, #312]	; (8007e94 <_dtoa_r+0x644>)
 8007d5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d5e:	4401      	add	r1, r0
 8007d60:	9102      	str	r1, [sp, #8]
 8007d62:	9908      	ldr	r1, [sp, #32]
 8007d64:	eeb0 8a47 	vmov.f32	s16, s14
 8007d68:	eef0 8a67 	vmov.f32	s17, s15
 8007d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d045      	beq.n	8007e04 <_dtoa_r+0x5b4>
 8007d78:	494c      	ldr	r1, [pc, #304]	; (8007eac <_dtoa_r+0x65c>)
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f7f8 fd86 	bl	800088c <__aeabi_ddiv>
 8007d80:	ec53 2b18 	vmov	r2, r3, d8
 8007d84:	f7f8 faa0 	bl	80002c8 <__aeabi_dsub>
 8007d88:	9d00      	ldr	r5, [sp, #0]
 8007d8a:	ec41 0b18 	vmov	d8, r0, r1
 8007d8e:	4639      	mov	r1, r7
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7f8 ff01 	bl	8000b98 <__aeabi_d2iz>
 8007d96:	900c      	str	r0, [sp, #48]	; 0x30
 8007d98:	f7f8 fbe4 	bl	8000564 <__aeabi_i2d>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f8 fa90 	bl	80002c8 <__aeabi_dsub>
 8007da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007daa:	3330      	adds	r3, #48	; 0x30
 8007dac:	f805 3b01 	strb.w	r3, [r5], #1
 8007db0:	ec53 2b18 	vmov	r2, r3, d8
 8007db4:	4606      	mov	r6, r0
 8007db6:	460f      	mov	r7, r1
 8007db8:	f7f8 feb0 	bl	8000b1c <__aeabi_dcmplt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d165      	bne.n	8007e8c <_dtoa_r+0x63c>
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4935      	ldr	r1, [pc, #212]	; (8007e9c <_dtoa_r+0x64c>)
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f7f8 fa7e 	bl	80002c8 <__aeabi_dsub>
 8007dcc:	ec53 2b18 	vmov	r2, r3, d8
 8007dd0:	f7f8 fea4 	bl	8000b1c <__aeabi_dcmplt>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f040 80b9 	bne.w	8007f4c <_dtoa_r+0x6fc>
 8007dda:	9b02      	ldr	r3, [sp, #8]
 8007ddc:	429d      	cmp	r5, r3
 8007dde:	f43f af75 	beq.w	8007ccc <_dtoa_r+0x47c>
 8007de2:	4b2f      	ldr	r3, [pc, #188]	; (8007ea0 <_dtoa_r+0x650>)
 8007de4:	ec51 0b18 	vmov	r0, r1, d8
 8007de8:	2200      	movs	r2, #0
 8007dea:	f7f8 fc25 	bl	8000638 <__aeabi_dmul>
 8007dee:	4b2c      	ldr	r3, [pc, #176]	; (8007ea0 <_dtoa_r+0x650>)
 8007df0:	ec41 0b18 	vmov	d8, r0, r1
 8007df4:	2200      	movs	r2, #0
 8007df6:	4630      	mov	r0, r6
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fc1d 	bl	8000638 <__aeabi_dmul>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460f      	mov	r7, r1
 8007e02:	e7c4      	b.n	8007d8e <_dtoa_r+0x53e>
 8007e04:	ec51 0b17 	vmov	r0, r1, d7
 8007e08:	f7f8 fc16 	bl	8000638 <__aeabi_dmul>
 8007e0c:	9b02      	ldr	r3, [sp, #8]
 8007e0e:	9d00      	ldr	r5, [sp, #0]
 8007e10:	930c      	str	r3, [sp, #48]	; 0x30
 8007e12:	ec41 0b18 	vmov	d8, r0, r1
 8007e16:	4639      	mov	r1, r7
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7f8 febd 	bl	8000b98 <__aeabi_d2iz>
 8007e1e:	9011      	str	r0, [sp, #68]	; 0x44
 8007e20:	f7f8 fba0 	bl	8000564 <__aeabi_i2d>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 fa4c 	bl	80002c8 <__aeabi_dsub>
 8007e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e32:	3330      	adds	r3, #48	; 0x30
 8007e34:	f805 3b01 	strb.w	r3, [r5], #1
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	d134      	bne.n	8007eb0 <_dtoa_r+0x660>
 8007e46:	4b19      	ldr	r3, [pc, #100]	; (8007eac <_dtoa_r+0x65c>)
 8007e48:	ec51 0b18 	vmov	r0, r1, d8
 8007e4c:	f7f8 fa3e 	bl	80002cc <__adddf3>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4630      	mov	r0, r6
 8007e56:	4639      	mov	r1, r7
 8007e58:	f7f8 fe7e 	bl	8000b58 <__aeabi_dcmpgt>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d175      	bne.n	8007f4c <_dtoa_r+0x6fc>
 8007e60:	ec53 2b18 	vmov	r2, r3, d8
 8007e64:	4911      	ldr	r1, [pc, #68]	; (8007eac <_dtoa_r+0x65c>)
 8007e66:	2000      	movs	r0, #0
 8007e68:	f7f8 fa2e 	bl	80002c8 <__aeabi_dsub>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fe52 	bl	8000b1c <__aeabi_dcmplt>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f43f af27 	beq.w	8007ccc <_dtoa_r+0x47c>
 8007e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e80:	1e6b      	subs	r3, r5, #1
 8007e82:	930c      	str	r3, [sp, #48]	; 0x30
 8007e84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e88:	2b30      	cmp	r3, #48	; 0x30
 8007e8a:	d0f8      	beq.n	8007e7e <_dtoa_r+0x62e>
 8007e8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e90:	e04a      	b.n	8007f28 <_dtoa_r+0x6d8>
 8007e92:	bf00      	nop
 8007e94:	0800bc38 	.word	0x0800bc38
 8007e98:	0800bc10 	.word	0x0800bc10
 8007e9c:	3ff00000 	.word	0x3ff00000
 8007ea0:	40240000 	.word	0x40240000
 8007ea4:	401c0000 	.word	0x401c0000
 8007ea8:	40140000 	.word	0x40140000
 8007eac:	3fe00000 	.word	0x3fe00000
 8007eb0:	4baf      	ldr	r3, [pc, #700]	; (8008170 <_dtoa_r+0x920>)
 8007eb2:	f7f8 fbc1 	bl	8000638 <__aeabi_dmul>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460f      	mov	r7, r1
 8007eba:	e7ac      	b.n	8007e16 <_dtoa_r+0x5c6>
 8007ebc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ec0:	9d00      	ldr	r5, [sp, #0]
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 fcdf 	bl	800088c <__aeabi_ddiv>
 8007ece:	f7f8 fe63 	bl	8000b98 <__aeabi_d2iz>
 8007ed2:	9002      	str	r0, [sp, #8]
 8007ed4:	f7f8 fb46 	bl	8000564 <__aeabi_i2d>
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	f7f8 fbac 	bl	8000638 <__aeabi_dmul>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 f9ee 	bl	80002c8 <__aeabi_dsub>
 8007eec:	9e02      	ldr	r6, [sp, #8]
 8007eee:	9f01      	ldr	r7, [sp, #4]
 8007ef0:	3630      	adds	r6, #48	; 0x30
 8007ef2:	f805 6b01 	strb.w	r6, [r5], #1
 8007ef6:	9e00      	ldr	r6, [sp, #0]
 8007ef8:	1bae      	subs	r6, r5, r6
 8007efa:	42b7      	cmp	r7, r6
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	d137      	bne.n	8007f72 <_dtoa_r+0x722>
 8007f02:	f7f8 f9e3 	bl	80002cc <__adddf3>
 8007f06:	4642      	mov	r2, r8
 8007f08:	464b      	mov	r3, r9
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	f7f8 fe23 	bl	8000b58 <__aeabi_dcmpgt>
 8007f12:	b9c8      	cbnz	r0, 8007f48 <_dtoa_r+0x6f8>
 8007f14:	4642      	mov	r2, r8
 8007f16:	464b      	mov	r3, r9
 8007f18:	4630      	mov	r0, r6
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	f7f8 fdf4 	bl	8000b08 <__aeabi_dcmpeq>
 8007f20:	b110      	cbz	r0, 8007f28 <_dtoa_r+0x6d8>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	07d9      	lsls	r1, r3, #31
 8007f26:	d40f      	bmi.n	8007f48 <_dtoa_r+0x6f8>
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	f000 fad6 	bl	80084dc <_Bfree>
 8007f30:	2300      	movs	r3, #0
 8007f32:	702b      	strb	r3, [r5, #0]
 8007f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f36:	f10a 0001 	add.w	r0, sl, #1
 8007f3a:	6018      	str	r0, [r3, #0]
 8007f3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f43f acd8 	beq.w	80078f4 <_dtoa_r+0xa4>
 8007f44:	601d      	str	r5, [r3, #0]
 8007f46:	e4d5      	b.n	80078f4 <_dtoa_r+0xa4>
 8007f48:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	461d      	mov	r5, r3
 8007f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f54:	2a39      	cmp	r2, #57	; 0x39
 8007f56:	d108      	bne.n	8007f6a <_dtoa_r+0x71a>
 8007f58:	9a00      	ldr	r2, [sp, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d1f7      	bne.n	8007f4e <_dtoa_r+0x6fe>
 8007f5e:	9a07      	ldr	r2, [sp, #28]
 8007f60:	9900      	ldr	r1, [sp, #0]
 8007f62:	3201      	adds	r2, #1
 8007f64:	9207      	str	r2, [sp, #28]
 8007f66:	2230      	movs	r2, #48	; 0x30
 8007f68:	700a      	strb	r2, [r1, #0]
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	3201      	adds	r2, #1
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e78c      	b.n	8007e8c <_dtoa_r+0x63c>
 8007f72:	4b7f      	ldr	r3, [pc, #508]	; (8008170 <_dtoa_r+0x920>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	f7f8 fb5f 	bl	8000638 <__aeabi_dmul>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460f      	mov	r7, r1
 8007f82:	f7f8 fdc1 	bl	8000b08 <__aeabi_dcmpeq>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d09b      	beq.n	8007ec2 <_dtoa_r+0x672>
 8007f8a:	e7cd      	b.n	8007f28 <_dtoa_r+0x6d8>
 8007f8c:	9a08      	ldr	r2, [sp, #32]
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	f000 80c4 	beq.w	800811c <_dtoa_r+0x8cc>
 8007f94:	9a05      	ldr	r2, [sp, #20]
 8007f96:	2a01      	cmp	r2, #1
 8007f98:	f300 80a8 	bgt.w	80080ec <_dtoa_r+0x89c>
 8007f9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f9e:	2a00      	cmp	r2, #0
 8007fa0:	f000 80a0 	beq.w	80080e4 <_dtoa_r+0x894>
 8007fa4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fa8:	9e06      	ldr	r6, [sp, #24]
 8007faa:	4645      	mov	r5, r8
 8007fac:	9a04      	ldr	r2, [sp, #16]
 8007fae:	2101      	movs	r1, #1
 8007fb0:	441a      	add	r2, r3
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	4498      	add	r8, r3
 8007fb6:	9204      	str	r2, [sp, #16]
 8007fb8:	f000 fb4c 	bl	8008654 <__i2b>
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	dd0b      	ble.n	8007fda <_dtoa_r+0x78a>
 8007fc2:	9b04      	ldr	r3, [sp, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dd08      	ble.n	8007fda <_dtoa_r+0x78a>
 8007fc8:	42ab      	cmp	r3, r5
 8007fca:	9a04      	ldr	r2, [sp, #16]
 8007fcc:	bfa8      	it	ge
 8007fce:	462b      	movge	r3, r5
 8007fd0:	eba8 0803 	sub.w	r8, r8, r3
 8007fd4:	1aed      	subs	r5, r5, r3
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	9304      	str	r3, [sp, #16]
 8007fda:	9b06      	ldr	r3, [sp, #24]
 8007fdc:	b1fb      	cbz	r3, 800801e <_dtoa_r+0x7ce>
 8007fde:	9b08      	ldr	r3, [sp, #32]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 809f 	beq.w	8008124 <_dtoa_r+0x8d4>
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	dd11      	ble.n	800800e <_dtoa_r+0x7be>
 8007fea:	4639      	mov	r1, r7
 8007fec:	4632      	mov	r2, r6
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fbec 	bl	80087cc <__pow5mult>
 8007ff4:	465a      	mov	r2, fp
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 fb40 	bl	8008680 <__multiply>
 8008000:	4659      	mov	r1, fp
 8008002:	9007      	str	r0, [sp, #28]
 8008004:	4620      	mov	r0, r4
 8008006:	f000 fa69 	bl	80084dc <_Bfree>
 800800a:	9b07      	ldr	r3, [sp, #28]
 800800c:	469b      	mov	fp, r3
 800800e:	9b06      	ldr	r3, [sp, #24]
 8008010:	1b9a      	subs	r2, r3, r6
 8008012:	d004      	beq.n	800801e <_dtoa_r+0x7ce>
 8008014:	4659      	mov	r1, fp
 8008016:	4620      	mov	r0, r4
 8008018:	f000 fbd8 	bl	80087cc <__pow5mult>
 800801c:	4683      	mov	fp, r0
 800801e:	2101      	movs	r1, #1
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fb17 	bl	8008654 <__i2b>
 8008026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008028:	2b00      	cmp	r3, #0
 800802a:	4606      	mov	r6, r0
 800802c:	dd7c      	ble.n	8008128 <_dtoa_r+0x8d8>
 800802e:	461a      	mov	r2, r3
 8008030:	4601      	mov	r1, r0
 8008032:	4620      	mov	r0, r4
 8008034:	f000 fbca 	bl	80087cc <__pow5mult>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	2b01      	cmp	r3, #1
 800803c:	4606      	mov	r6, r0
 800803e:	dd76      	ble.n	800812e <_dtoa_r+0x8de>
 8008040:	2300      	movs	r3, #0
 8008042:	9306      	str	r3, [sp, #24]
 8008044:	6933      	ldr	r3, [r6, #16]
 8008046:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800804a:	6918      	ldr	r0, [r3, #16]
 800804c:	f000 fab2 	bl	80085b4 <__hi0bits>
 8008050:	f1c0 0020 	rsb	r0, r0, #32
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	4418      	add	r0, r3
 8008058:	f010 001f 	ands.w	r0, r0, #31
 800805c:	f000 8086 	beq.w	800816c <_dtoa_r+0x91c>
 8008060:	f1c0 0320 	rsb	r3, r0, #32
 8008064:	2b04      	cmp	r3, #4
 8008066:	dd7f      	ble.n	8008168 <_dtoa_r+0x918>
 8008068:	f1c0 001c 	rsb	r0, r0, #28
 800806c:	9b04      	ldr	r3, [sp, #16]
 800806e:	4403      	add	r3, r0
 8008070:	4480      	add	r8, r0
 8008072:	4405      	add	r5, r0
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	f1b8 0f00 	cmp.w	r8, #0
 800807a:	dd05      	ble.n	8008088 <_dtoa_r+0x838>
 800807c:	4659      	mov	r1, fp
 800807e:	4642      	mov	r2, r8
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fbfd 	bl	8008880 <__lshift>
 8008086:	4683      	mov	fp, r0
 8008088:	9b04      	ldr	r3, [sp, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	dd05      	ble.n	800809a <_dtoa_r+0x84a>
 800808e:	4631      	mov	r1, r6
 8008090:	461a      	mov	r2, r3
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fbf4 	bl	8008880 <__lshift>
 8008098:	4606      	mov	r6, r0
 800809a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800809c:	2b00      	cmp	r3, #0
 800809e:	d069      	beq.n	8008174 <_dtoa_r+0x924>
 80080a0:	4631      	mov	r1, r6
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 fc58 	bl	8008958 <__mcmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	da63      	bge.n	8008174 <_dtoa_r+0x924>
 80080ac:	2300      	movs	r3, #0
 80080ae:	4659      	mov	r1, fp
 80080b0:	220a      	movs	r2, #10
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fa34 	bl	8008520 <__multadd>
 80080b8:	9b08      	ldr	r3, [sp, #32]
 80080ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080be:	4683      	mov	fp, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 818f 	beq.w	80083e4 <_dtoa_r+0xb94>
 80080c6:	4639      	mov	r1, r7
 80080c8:	2300      	movs	r3, #0
 80080ca:	220a      	movs	r2, #10
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fa27 	bl	8008520 <__multadd>
 80080d2:	f1b9 0f00 	cmp.w	r9, #0
 80080d6:	4607      	mov	r7, r0
 80080d8:	f300 808e 	bgt.w	80081f8 <_dtoa_r+0x9a8>
 80080dc:	9b05      	ldr	r3, [sp, #20]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	dc50      	bgt.n	8008184 <_dtoa_r+0x934>
 80080e2:	e089      	b.n	80081f8 <_dtoa_r+0x9a8>
 80080e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080ea:	e75d      	b.n	8007fa8 <_dtoa_r+0x758>
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	1e5e      	subs	r6, r3, #1
 80080f0:	9b06      	ldr	r3, [sp, #24]
 80080f2:	42b3      	cmp	r3, r6
 80080f4:	bfbf      	itttt	lt
 80080f6:	9b06      	ldrlt	r3, [sp, #24]
 80080f8:	9606      	strlt	r6, [sp, #24]
 80080fa:	1af2      	sublt	r2, r6, r3
 80080fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80080fe:	bfb6      	itet	lt
 8008100:	189b      	addlt	r3, r3, r2
 8008102:	1b9e      	subge	r6, r3, r6
 8008104:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	bfb8      	it	lt
 800810a:	2600      	movlt	r6, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	bfb5      	itete	lt
 8008110:	eba8 0503 	sublt.w	r5, r8, r3
 8008114:	9b01      	ldrge	r3, [sp, #4]
 8008116:	2300      	movlt	r3, #0
 8008118:	4645      	movge	r5, r8
 800811a:	e747      	b.n	8007fac <_dtoa_r+0x75c>
 800811c:	9e06      	ldr	r6, [sp, #24]
 800811e:	9f08      	ldr	r7, [sp, #32]
 8008120:	4645      	mov	r5, r8
 8008122:	e74c      	b.n	8007fbe <_dtoa_r+0x76e>
 8008124:	9a06      	ldr	r2, [sp, #24]
 8008126:	e775      	b.n	8008014 <_dtoa_r+0x7c4>
 8008128:	9b05      	ldr	r3, [sp, #20]
 800812a:	2b01      	cmp	r3, #1
 800812c:	dc18      	bgt.n	8008160 <_dtoa_r+0x910>
 800812e:	9b02      	ldr	r3, [sp, #8]
 8008130:	b9b3      	cbnz	r3, 8008160 <_dtoa_r+0x910>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008138:	b9a3      	cbnz	r3, 8008164 <_dtoa_r+0x914>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008140:	0d1b      	lsrs	r3, r3, #20
 8008142:	051b      	lsls	r3, r3, #20
 8008144:	b12b      	cbz	r3, 8008152 <_dtoa_r+0x902>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	3301      	adds	r3, #1
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	f108 0801 	add.w	r8, r8, #1
 8008150:	2301      	movs	r3, #1
 8008152:	9306      	str	r3, [sp, #24]
 8008154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008156:	2b00      	cmp	r3, #0
 8008158:	f47f af74 	bne.w	8008044 <_dtoa_r+0x7f4>
 800815c:	2001      	movs	r0, #1
 800815e:	e779      	b.n	8008054 <_dtoa_r+0x804>
 8008160:	2300      	movs	r3, #0
 8008162:	e7f6      	b.n	8008152 <_dtoa_r+0x902>
 8008164:	9b02      	ldr	r3, [sp, #8]
 8008166:	e7f4      	b.n	8008152 <_dtoa_r+0x902>
 8008168:	d085      	beq.n	8008076 <_dtoa_r+0x826>
 800816a:	4618      	mov	r0, r3
 800816c:	301c      	adds	r0, #28
 800816e:	e77d      	b.n	800806c <_dtoa_r+0x81c>
 8008170:	40240000 	.word	0x40240000
 8008174:	9b01      	ldr	r3, [sp, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	dc38      	bgt.n	80081ec <_dtoa_r+0x99c>
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	2b02      	cmp	r3, #2
 800817e:	dd35      	ble.n	80081ec <_dtoa_r+0x99c>
 8008180:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008184:	f1b9 0f00 	cmp.w	r9, #0
 8008188:	d10d      	bne.n	80081a6 <_dtoa_r+0x956>
 800818a:	4631      	mov	r1, r6
 800818c:	464b      	mov	r3, r9
 800818e:	2205      	movs	r2, #5
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f9c5 	bl	8008520 <__multadd>
 8008196:	4601      	mov	r1, r0
 8008198:	4606      	mov	r6, r0
 800819a:	4658      	mov	r0, fp
 800819c:	f000 fbdc 	bl	8008958 <__mcmp>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f73f adbd 	bgt.w	8007d20 <_dtoa_r+0x4d0>
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	9d00      	ldr	r5, [sp, #0]
 80081aa:	ea6f 0a03 	mvn.w	sl, r3
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	4631      	mov	r1, r6
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 f991 	bl	80084dc <_Bfree>
 80081ba:	2f00      	cmp	r7, #0
 80081bc:	f43f aeb4 	beq.w	8007f28 <_dtoa_r+0x6d8>
 80081c0:	f1b8 0f00 	cmp.w	r8, #0
 80081c4:	d005      	beq.n	80081d2 <_dtoa_r+0x982>
 80081c6:	45b8      	cmp	r8, r7
 80081c8:	d003      	beq.n	80081d2 <_dtoa_r+0x982>
 80081ca:	4641      	mov	r1, r8
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 f985 	bl	80084dc <_Bfree>
 80081d2:	4639      	mov	r1, r7
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 f981 	bl	80084dc <_Bfree>
 80081da:	e6a5      	b.n	8007f28 <_dtoa_r+0x6d8>
 80081dc:	2600      	movs	r6, #0
 80081de:	4637      	mov	r7, r6
 80081e0:	e7e1      	b.n	80081a6 <_dtoa_r+0x956>
 80081e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80081e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80081e8:	4637      	mov	r7, r6
 80081ea:	e599      	b.n	8007d20 <_dtoa_r+0x4d0>
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80fd 	beq.w	80083f2 <_dtoa_r+0xba2>
 80081f8:	2d00      	cmp	r5, #0
 80081fa:	dd05      	ble.n	8008208 <_dtoa_r+0x9b8>
 80081fc:	4639      	mov	r1, r7
 80081fe:	462a      	mov	r2, r5
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fb3d 	bl	8008880 <__lshift>
 8008206:	4607      	mov	r7, r0
 8008208:	9b06      	ldr	r3, [sp, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d05c      	beq.n	80082c8 <_dtoa_r+0xa78>
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4620      	mov	r0, r4
 8008212:	f000 f923 	bl	800845c <_Balloc>
 8008216:	4605      	mov	r5, r0
 8008218:	b928      	cbnz	r0, 8008226 <_dtoa_r+0x9d6>
 800821a:	4b80      	ldr	r3, [pc, #512]	; (800841c <_dtoa_r+0xbcc>)
 800821c:	4602      	mov	r2, r0
 800821e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008222:	f7ff bb2e 	b.w	8007882 <_dtoa_r+0x32>
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	3202      	adds	r2, #2
 800822a:	0092      	lsls	r2, r2, #2
 800822c:	f107 010c 	add.w	r1, r7, #12
 8008230:	300c      	adds	r0, #12
 8008232:	f000 f905 	bl	8008440 <memcpy>
 8008236:	2201      	movs	r2, #1
 8008238:	4629      	mov	r1, r5
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fb20 	bl	8008880 <__lshift>
 8008240:	9b00      	ldr	r3, [sp, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	444b      	add	r3, r9
 800824a:	9307      	str	r3, [sp, #28]
 800824c:	9b02      	ldr	r3, [sp, #8]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	46b8      	mov	r8, r7
 8008254:	9306      	str	r3, [sp, #24]
 8008256:	4607      	mov	r7, r0
 8008258:	9b01      	ldr	r3, [sp, #4]
 800825a:	4631      	mov	r1, r6
 800825c:	3b01      	subs	r3, #1
 800825e:	4658      	mov	r0, fp
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	f7ff fa67 	bl	8007734 <quorem>
 8008266:	4603      	mov	r3, r0
 8008268:	3330      	adds	r3, #48	; 0x30
 800826a:	9004      	str	r0, [sp, #16]
 800826c:	4641      	mov	r1, r8
 800826e:	4658      	mov	r0, fp
 8008270:	9308      	str	r3, [sp, #32]
 8008272:	f000 fb71 	bl	8008958 <__mcmp>
 8008276:	463a      	mov	r2, r7
 8008278:	4681      	mov	r9, r0
 800827a:	4631      	mov	r1, r6
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fb87 	bl	8008990 <__mdiff>
 8008282:	68c2      	ldr	r2, [r0, #12]
 8008284:	9b08      	ldr	r3, [sp, #32]
 8008286:	4605      	mov	r5, r0
 8008288:	bb02      	cbnz	r2, 80082cc <_dtoa_r+0xa7c>
 800828a:	4601      	mov	r1, r0
 800828c:	4658      	mov	r0, fp
 800828e:	f000 fb63 	bl	8008958 <__mcmp>
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	4602      	mov	r2, r0
 8008296:	4629      	mov	r1, r5
 8008298:	4620      	mov	r0, r4
 800829a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800829e:	f000 f91d 	bl	80084dc <_Bfree>
 80082a2:	9b05      	ldr	r3, [sp, #20]
 80082a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a6:	9d01      	ldr	r5, [sp, #4]
 80082a8:	ea43 0102 	orr.w	r1, r3, r2
 80082ac:	9b06      	ldr	r3, [sp, #24]
 80082ae:	430b      	orrs	r3, r1
 80082b0:	9b08      	ldr	r3, [sp, #32]
 80082b2:	d10d      	bne.n	80082d0 <_dtoa_r+0xa80>
 80082b4:	2b39      	cmp	r3, #57	; 0x39
 80082b6:	d029      	beq.n	800830c <_dtoa_r+0xabc>
 80082b8:	f1b9 0f00 	cmp.w	r9, #0
 80082bc:	dd01      	ble.n	80082c2 <_dtoa_r+0xa72>
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	3331      	adds	r3, #49	; 0x31
 80082c2:	9a02      	ldr	r2, [sp, #8]
 80082c4:	7013      	strb	r3, [r2, #0]
 80082c6:	e774      	b.n	80081b2 <_dtoa_r+0x962>
 80082c8:	4638      	mov	r0, r7
 80082ca:	e7b9      	b.n	8008240 <_dtoa_r+0x9f0>
 80082cc:	2201      	movs	r2, #1
 80082ce:	e7e2      	b.n	8008296 <_dtoa_r+0xa46>
 80082d0:	f1b9 0f00 	cmp.w	r9, #0
 80082d4:	db06      	blt.n	80082e4 <_dtoa_r+0xa94>
 80082d6:	9905      	ldr	r1, [sp, #20]
 80082d8:	ea41 0909 	orr.w	r9, r1, r9
 80082dc:	9906      	ldr	r1, [sp, #24]
 80082de:	ea59 0101 	orrs.w	r1, r9, r1
 80082e2:	d120      	bne.n	8008326 <_dtoa_r+0xad6>
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	ddec      	ble.n	80082c2 <_dtoa_r+0xa72>
 80082e8:	4659      	mov	r1, fp
 80082ea:	2201      	movs	r2, #1
 80082ec:	4620      	mov	r0, r4
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	f000 fac6 	bl	8008880 <__lshift>
 80082f4:	4631      	mov	r1, r6
 80082f6:	4683      	mov	fp, r0
 80082f8:	f000 fb2e 	bl	8008958 <__mcmp>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	dc02      	bgt.n	8008308 <_dtoa_r+0xab8>
 8008302:	d1de      	bne.n	80082c2 <_dtoa_r+0xa72>
 8008304:	07da      	lsls	r2, r3, #31
 8008306:	d5dc      	bpl.n	80082c2 <_dtoa_r+0xa72>
 8008308:	2b39      	cmp	r3, #57	; 0x39
 800830a:	d1d8      	bne.n	80082be <_dtoa_r+0xa6e>
 800830c:	9a02      	ldr	r2, [sp, #8]
 800830e:	2339      	movs	r3, #57	; 0x39
 8008310:	7013      	strb	r3, [r2, #0]
 8008312:	462b      	mov	r3, r5
 8008314:	461d      	mov	r5, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800831c:	2a39      	cmp	r2, #57	; 0x39
 800831e:	d050      	beq.n	80083c2 <_dtoa_r+0xb72>
 8008320:	3201      	adds	r2, #1
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	e745      	b.n	80081b2 <_dtoa_r+0x962>
 8008326:	2a00      	cmp	r2, #0
 8008328:	dd03      	ble.n	8008332 <_dtoa_r+0xae2>
 800832a:	2b39      	cmp	r3, #57	; 0x39
 800832c:	d0ee      	beq.n	800830c <_dtoa_r+0xabc>
 800832e:	3301      	adds	r3, #1
 8008330:	e7c7      	b.n	80082c2 <_dtoa_r+0xa72>
 8008332:	9a01      	ldr	r2, [sp, #4]
 8008334:	9907      	ldr	r1, [sp, #28]
 8008336:	f802 3c01 	strb.w	r3, [r2, #-1]
 800833a:	428a      	cmp	r2, r1
 800833c:	d02a      	beq.n	8008394 <_dtoa_r+0xb44>
 800833e:	4659      	mov	r1, fp
 8008340:	2300      	movs	r3, #0
 8008342:	220a      	movs	r2, #10
 8008344:	4620      	mov	r0, r4
 8008346:	f000 f8eb 	bl	8008520 <__multadd>
 800834a:	45b8      	cmp	r8, r7
 800834c:	4683      	mov	fp, r0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	f04f 020a 	mov.w	r2, #10
 8008356:	4641      	mov	r1, r8
 8008358:	4620      	mov	r0, r4
 800835a:	d107      	bne.n	800836c <_dtoa_r+0xb1c>
 800835c:	f000 f8e0 	bl	8008520 <__multadd>
 8008360:	4680      	mov	r8, r0
 8008362:	4607      	mov	r7, r0
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	3301      	adds	r3, #1
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	e775      	b.n	8008258 <_dtoa_r+0xa08>
 800836c:	f000 f8d8 	bl	8008520 <__multadd>
 8008370:	4639      	mov	r1, r7
 8008372:	4680      	mov	r8, r0
 8008374:	2300      	movs	r3, #0
 8008376:	220a      	movs	r2, #10
 8008378:	4620      	mov	r0, r4
 800837a:	f000 f8d1 	bl	8008520 <__multadd>
 800837e:	4607      	mov	r7, r0
 8008380:	e7f0      	b.n	8008364 <_dtoa_r+0xb14>
 8008382:	f1b9 0f00 	cmp.w	r9, #0
 8008386:	9a00      	ldr	r2, [sp, #0]
 8008388:	bfcc      	ite	gt
 800838a:	464d      	movgt	r5, r9
 800838c:	2501      	movle	r5, #1
 800838e:	4415      	add	r5, r2
 8008390:	f04f 0800 	mov.w	r8, #0
 8008394:	4659      	mov	r1, fp
 8008396:	2201      	movs	r2, #1
 8008398:	4620      	mov	r0, r4
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	f000 fa70 	bl	8008880 <__lshift>
 80083a0:	4631      	mov	r1, r6
 80083a2:	4683      	mov	fp, r0
 80083a4:	f000 fad8 	bl	8008958 <__mcmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	dcb2      	bgt.n	8008312 <_dtoa_r+0xac2>
 80083ac:	d102      	bne.n	80083b4 <_dtoa_r+0xb64>
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	07db      	lsls	r3, r3, #31
 80083b2:	d4ae      	bmi.n	8008312 <_dtoa_r+0xac2>
 80083b4:	462b      	mov	r3, r5
 80083b6:	461d      	mov	r5, r3
 80083b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083bc:	2a30      	cmp	r2, #48	; 0x30
 80083be:	d0fa      	beq.n	80083b6 <_dtoa_r+0xb66>
 80083c0:	e6f7      	b.n	80081b2 <_dtoa_r+0x962>
 80083c2:	9a00      	ldr	r2, [sp, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d1a5      	bne.n	8008314 <_dtoa_r+0xac4>
 80083c8:	f10a 0a01 	add.w	sl, sl, #1
 80083cc:	2331      	movs	r3, #49	; 0x31
 80083ce:	e779      	b.n	80082c4 <_dtoa_r+0xa74>
 80083d0:	4b13      	ldr	r3, [pc, #76]	; (8008420 <_dtoa_r+0xbd0>)
 80083d2:	f7ff baaf 	b.w	8007934 <_dtoa_r+0xe4>
 80083d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f47f aa86 	bne.w	80078ea <_dtoa_r+0x9a>
 80083de:	4b11      	ldr	r3, [pc, #68]	; (8008424 <_dtoa_r+0xbd4>)
 80083e0:	f7ff baa8 	b.w	8007934 <_dtoa_r+0xe4>
 80083e4:	f1b9 0f00 	cmp.w	r9, #0
 80083e8:	dc03      	bgt.n	80083f2 <_dtoa_r+0xba2>
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	f73f aec9 	bgt.w	8008184 <_dtoa_r+0x934>
 80083f2:	9d00      	ldr	r5, [sp, #0]
 80083f4:	4631      	mov	r1, r6
 80083f6:	4658      	mov	r0, fp
 80083f8:	f7ff f99c 	bl	8007734 <quorem>
 80083fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008400:	f805 3b01 	strb.w	r3, [r5], #1
 8008404:	9a00      	ldr	r2, [sp, #0]
 8008406:	1aaa      	subs	r2, r5, r2
 8008408:	4591      	cmp	r9, r2
 800840a:	ddba      	ble.n	8008382 <_dtoa_r+0xb32>
 800840c:	4659      	mov	r1, fp
 800840e:	2300      	movs	r3, #0
 8008410:	220a      	movs	r2, #10
 8008412:	4620      	mov	r0, r4
 8008414:	f000 f884 	bl	8008520 <__multadd>
 8008418:	4683      	mov	fp, r0
 800841a:	e7eb      	b.n	80083f4 <_dtoa_r+0xba4>
 800841c:	0800bb9f 	.word	0x0800bb9f
 8008420:	0800baf8 	.word	0x0800baf8
 8008424:	0800bb1c 	.word	0x0800bb1c

08008428 <_localeconv_r>:
 8008428:	4800      	ldr	r0, [pc, #0]	; (800842c <_localeconv_r+0x4>)
 800842a:	4770      	bx	lr
 800842c:	200001ec 	.word	0x200001ec

08008430 <malloc>:
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <malloc+0xc>)
 8008432:	4601      	mov	r1, r0
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f000 bbef 	b.w	8008c18 <_malloc_r>
 800843a:	bf00      	nop
 800843c:	20000098 	.word	0x20000098

08008440 <memcpy>:
 8008440:	440a      	add	r2, r1
 8008442:	4291      	cmp	r1, r2
 8008444:	f100 33ff 	add.w	r3, r0, #4294967295
 8008448:	d100      	bne.n	800844c <memcpy+0xc>
 800844a:	4770      	bx	lr
 800844c:	b510      	push	{r4, lr}
 800844e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008456:	4291      	cmp	r1, r2
 8008458:	d1f9      	bne.n	800844e <memcpy+0xe>
 800845a:	bd10      	pop	{r4, pc}

0800845c <_Balloc>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	b976      	cbnz	r6, 8008484 <_Balloc+0x28>
 8008466:	2010      	movs	r0, #16
 8008468:	f7ff ffe2 	bl	8008430 <malloc>
 800846c:	4602      	mov	r2, r0
 800846e:	6260      	str	r0, [r4, #36]	; 0x24
 8008470:	b920      	cbnz	r0, 800847c <_Balloc+0x20>
 8008472:	4b18      	ldr	r3, [pc, #96]	; (80084d4 <_Balloc+0x78>)
 8008474:	4818      	ldr	r0, [pc, #96]	; (80084d8 <_Balloc+0x7c>)
 8008476:	2166      	movs	r1, #102	; 0x66
 8008478:	f000 fd94 	bl	8008fa4 <__assert_func>
 800847c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008480:	6006      	str	r6, [r0, #0]
 8008482:	60c6      	str	r6, [r0, #12]
 8008484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008486:	68f3      	ldr	r3, [r6, #12]
 8008488:	b183      	cbz	r3, 80084ac <_Balloc+0x50>
 800848a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008492:	b9b8      	cbnz	r0, 80084c4 <_Balloc+0x68>
 8008494:	2101      	movs	r1, #1
 8008496:	fa01 f605 	lsl.w	r6, r1, r5
 800849a:	1d72      	adds	r2, r6, #5
 800849c:	0092      	lsls	r2, r2, #2
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 fb5a 	bl	8008b58 <_calloc_r>
 80084a4:	b160      	cbz	r0, 80084c0 <_Balloc+0x64>
 80084a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084aa:	e00e      	b.n	80084ca <_Balloc+0x6e>
 80084ac:	2221      	movs	r2, #33	; 0x21
 80084ae:	2104      	movs	r1, #4
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fb51 	bl	8008b58 <_calloc_r>
 80084b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b8:	60f0      	str	r0, [r6, #12]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e4      	bne.n	800848a <_Balloc+0x2e>
 80084c0:	2000      	movs	r0, #0
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	6802      	ldr	r2, [r0, #0]
 80084c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ca:	2300      	movs	r3, #0
 80084cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084d0:	e7f7      	b.n	80084c2 <_Balloc+0x66>
 80084d2:	bf00      	nop
 80084d4:	0800bb29 	.word	0x0800bb29
 80084d8:	0800bbb0 	.word	0x0800bbb0

080084dc <_Bfree>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	b976      	cbnz	r6, 8008504 <_Bfree+0x28>
 80084e6:	2010      	movs	r0, #16
 80084e8:	f7ff ffa2 	bl	8008430 <malloc>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6268      	str	r0, [r5, #36]	; 0x24
 80084f0:	b920      	cbnz	r0, 80084fc <_Bfree+0x20>
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <_Bfree+0x3c>)
 80084f4:	4809      	ldr	r0, [pc, #36]	; (800851c <_Bfree+0x40>)
 80084f6:	218a      	movs	r1, #138	; 0x8a
 80084f8:	f000 fd54 	bl	8008fa4 <__assert_func>
 80084fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008500:	6006      	str	r6, [r0, #0]
 8008502:	60c6      	str	r6, [r0, #12]
 8008504:	b13c      	cbz	r4, 8008516 <_Bfree+0x3a>
 8008506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008508:	6862      	ldr	r2, [r4, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008510:	6021      	str	r1, [r4, #0]
 8008512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	0800bb29 	.word	0x0800bb29
 800851c:	0800bbb0 	.word	0x0800bbb0

08008520 <__multadd>:
 8008520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008524:	690e      	ldr	r6, [r1, #16]
 8008526:	4607      	mov	r7, r0
 8008528:	4698      	mov	r8, r3
 800852a:	460c      	mov	r4, r1
 800852c:	f101 0014 	add.w	r0, r1, #20
 8008530:	2300      	movs	r3, #0
 8008532:	6805      	ldr	r5, [r0, #0]
 8008534:	b2a9      	uxth	r1, r5
 8008536:	fb02 8101 	mla	r1, r2, r1, r8
 800853a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800853e:	0c2d      	lsrs	r5, r5, #16
 8008540:	fb02 c505 	mla	r5, r2, r5, ip
 8008544:	b289      	uxth	r1, r1
 8008546:	3301      	adds	r3, #1
 8008548:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800854c:	429e      	cmp	r6, r3
 800854e:	f840 1b04 	str.w	r1, [r0], #4
 8008552:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008556:	dcec      	bgt.n	8008532 <__multadd+0x12>
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	d022      	beq.n	80085a4 <__multadd+0x84>
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	42b3      	cmp	r3, r6
 8008562:	dc19      	bgt.n	8008598 <__multadd+0x78>
 8008564:	6861      	ldr	r1, [r4, #4]
 8008566:	4638      	mov	r0, r7
 8008568:	3101      	adds	r1, #1
 800856a:	f7ff ff77 	bl	800845c <_Balloc>
 800856e:	4605      	mov	r5, r0
 8008570:	b928      	cbnz	r0, 800857e <__multadd+0x5e>
 8008572:	4602      	mov	r2, r0
 8008574:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <__multadd+0x8c>)
 8008576:	480e      	ldr	r0, [pc, #56]	; (80085b0 <__multadd+0x90>)
 8008578:	21b5      	movs	r1, #181	; 0xb5
 800857a:	f000 fd13 	bl	8008fa4 <__assert_func>
 800857e:	6922      	ldr	r2, [r4, #16]
 8008580:	3202      	adds	r2, #2
 8008582:	f104 010c 	add.w	r1, r4, #12
 8008586:	0092      	lsls	r2, r2, #2
 8008588:	300c      	adds	r0, #12
 800858a:	f7ff ff59 	bl	8008440 <memcpy>
 800858e:	4621      	mov	r1, r4
 8008590:	4638      	mov	r0, r7
 8008592:	f7ff ffa3 	bl	80084dc <_Bfree>
 8008596:	462c      	mov	r4, r5
 8008598:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800859c:	3601      	adds	r6, #1
 800859e:	f8c3 8014 	str.w	r8, [r3, #20]
 80085a2:	6126      	str	r6, [r4, #16]
 80085a4:	4620      	mov	r0, r4
 80085a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085aa:	bf00      	nop
 80085ac:	0800bb9f 	.word	0x0800bb9f
 80085b0:	0800bbb0 	.word	0x0800bbb0

080085b4 <__hi0bits>:
 80085b4:	0c03      	lsrs	r3, r0, #16
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	b9d3      	cbnz	r3, 80085f0 <__hi0bits+0x3c>
 80085ba:	0400      	lsls	r0, r0, #16
 80085bc:	2310      	movs	r3, #16
 80085be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085c2:	bf04      	itt	eq
 80085c4:	0200      	lsleq	r0, r0, #8
 80085c6:	3308      	addeq	r3, #8
 80085c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085cc:	bf04      	itt	eq
 80085ce:	0100      	lsleq	r0, r0, #4
 80085d0:	3304      	addeq	r3, #4
 80085d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085d6:	bf04      	itt	eq
 80085d8:	0080      	lsleq	r0, r0, #2
 80085da:	3302      	addeq	r3, #2
 80085dc:	2800      	cmp	r0, #0
 80085de:	db05      	blt.n	80085ec <__hi0bits+0x38>
 80085e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085e4:	f103 0301 	add.w	r3, r3, #1
 80085e8:	bf08      	it	eq
 80085ea:	2320      	moveq	r3, #32
 80085ec:	4618      	mov	r0, r3
 80085ee:	4770      	bx	lr
 80085f0:	2300      	movs	r3, #0
 80085f2:	e7e4      	b.n	80085be <__hi0bits+0xa>

080085f4 <__lo0bits>:
 80085f4:	6803      	ldr	r3, [r0, #0]
 80085f6:	f013 0207 	ands.w	r2, r3, #7
 80085fa:	4601      	mov	r1, r0
 80085fc:	d00b      	beq.n	8008616 <__lo0bits+0x22>
 80085fe:	07da      	lsls	r2, r3, #31
 8008600:	d424      	bmi.n	800864c <__lo0bits+0x58>
 8008602:	0798      	lsls	r0, r3, #30
 8008604:	bf49      	itett	mi
 8008606:	085b      	lsrmi	r3, r3, #1
 8008608:	089b      	lsrpl	r3, r3, #2
 800860a:	2001      	movmi	r0, #1
 800860c:	600b      	strmi	r3, [r1, #0]
 800860e:	bf5c      	itt	pl
 8008610:	600b      	strpl	r3, [r1, #0]
 8008612:	2002      	movpl	r0, #2
 8008614:	4770      	bx	lr
 8008616:	b298      	uxth	r0, r3
 8008618:	b9b0      	cbnz	r0, 8008648 <__lo0bits+0x54>
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	2010      	movs	r0, #16
 800861e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008622:	bf04      	itt	eq
 8008624:	0a1b      	lsreq	r3, r3, #8
 8008626:	3008      	addeq	r0, #8
 8008628:	071a      	lsls	r2, r3, #28
 800862a:	bf04      	itt	eq
 800862c:	091b      	lsreq	r3, r3, #4
 800862e:	3004      	addeq	r0, #4
 8008630:	079a      	lsls	r2, r3, #30
 8008632:	bf04      	itt	eq
 8008634:	089b      	lsreq	r3, r3, #2
 8008636:	3002      	addeq	r0, #2
 8008638:	07da      	lsls	r2, r3, #31
 800863a:	d403      	bmi.n	8008644 <__lo0bits+0x50>
 800863c:	085b      	lsrs	r3, r3, #1
 800863e:	f100 0001 	add.w	r0, r0, #1
 8008642:	d005      	beq.n	8008650 <__lo0bits+0x5c>
 8008644:	600b      	str	r3, [r1, #0]
 8008646:	4770      	bx	lr
 8008648:	4610      	mov	r0, r2
 800864a:	e7e8      	b.n	800861e <__lo0bits+0x2a>
 800864c:	2000      	movs	r0, #0
 800864e:	4770      	bx	lr
 8008650:	2020      	movs	r0, #32
 8008652:	4770      	bx	lr

08008654 <__i2b>:
 8008654:	b510      	push	{r4, lr}
 8008656:	460c      	mov	r4, r1
 8008658:	2101      	movs	r1, #1
 800865a:	f7ff feff 	bl	800845c <_Balloc>
 800865e:	4602      	mov	r2, r0
 8008660:	b928      	cbnz	r0, 800866e <__i2b+0x1a>
 8008662:	4b05      	ldr	r3, [pc, #20]	; (8008678 <__i2b+0x24>)
 8008664:	4805      	ldr	r0, [pc, #20]	; (800867c <__i2b+0x28>)
 8008666:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800866a:	f000 fc9b 	bl	8008fa4 <__assert_func>
 800866e:	2301      	movs	r3, #1
 8008670:	6144      	str	r4, [r0, #20]
 8008672:	6103      	str	r3, [r0, #16]
 8008674:	bd10      	pop	{r4, pc}
 8008676:	bf00      	nop
 8008678:	0800bb9f 	.word	0x0800bb9f
 800867c:	0800bbb0 	.word	0x0800bbb0

08008680 <__multiply>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	4614      	mov	r4, r2
 8008686:	690a      	ldr	r2, [r1, #16]
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	429a      	cmp	r2, r3
 800868c:	bfb8      	it	lt
 800868e:	460b      	movlt	r3, r1
 8008690:	460d      	mov	r5, r1
 8008692:	bfbc      	itt	lt
 8008694:	4625      	movlt	r5, r4
 8008696:	461c      	movlt	r4, r3
 8008698:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800869c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80086a0:	68ab      	ldr	r3, [r5, #8]
 80086a2:	6869      	ldr	r1, [r5, #4]
 80086a4:	eb0a 0709 	add.w	r7, sl, r9
 80086a8:	42bb      	cmp	r3, r7
 80086aa:	b085      	sub	sp, #20
 80086ac:	bfb8      	it	lt
 80086ae:	3101      	addlt	r1, #1
 80086b0:	f7ff fed4 	bl	800845c <_Balloc>
 80086b4:	b930      	cbnz	r0, 80086c4 <__multiply+0x44>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b42      	ldr	r3, [pc, #264]	; (80087c4 <__multiply+0x144>)
 80086ba:	4843      	ldr	r0, [pc, #268]	; (80087c8 <__multiply+0x148>)
 80086bc:	f240 115d 	movw	r1, #349	; 0x15d
 80086c0:	f000 fc70 	bl	8008fa4 <__assert_func>
 80086c4:	f100 0614 	add.w	r6, r0, #20
 80086c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80086cc:	4633      	mov	r3, r6
 80086ce:	2200      	movs	r2, #0
 80086d0:	4543      	cmp	r3, r8
 80086d2:	d31e      	bcc.n	8008712 <__multiply+0x92>
 80086d4:	f105 0c14 	add.w	ip, r5, #20
 80086d8:	f104 0314 	add.w	r3, r4, #20
 80086dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80086e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80086e4:	9202      	str	r2, [sp, #8]
 80086e6:	ebac 0205 	sub.w	r2, ip, r5
 80086ea:	3a15      	subs	r2, #21
 80086ec:	f022 0203 	bic.w	r2, r2, #3
 80086f0:	3204      	adds	r2, #4
 80086f2:	f105 0115 	add.w	r1, r5, #21
 80086f6:	458c      	cmp	ip, r1
 80086f8:	bf38      	it	cc
 80086fa:	2204      	movcc	r2, #4
 80086fc:	9201      	str	r2, [sp, #4]
 80086fe:	9a02      	ldr	r2, [sp, #8]
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	429a      	cmp	r2, r3
 8008704:	d808      	bhi.n	8008718 <__multiply+0x98>
 8008706:	2f00      	cmp	r7, #0
 8008708:	dc55      	bgt.n	80087b6 <__multiply+0x136>
 800870a:	6107      	str	r7, [r0, #16]
 800870c:	b005      	add	sp, #20
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	f843 2b04 	str.w	r2, [r3], #4
 8008716:	e7db      	b.n	80086d0 <__multiply+0x50>
 8008718:	f8b3 a000 	ldrh.w	sl, [r3]
 800871c:	f1ba 0f00 	cmp.w	sl, #0
 8008720:	d020      	beq.n	8008764 <__multiply+0xe4>
 8008722:	f105 0e14 	add.w	lr, r5, #20
 8008726:	46b1      	mov	r9, r6
 8008728:	2200      	movs	r2, #0
 800872a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800872e:	f8d9 b000 	ldr.w	fp, [r9]
 8008732:	b2a1      	uxth	r1, r4
 8008734:	fa1f fb8b 	uxth.w	fp, fp
 8008738:	fb0a b101 	mla	r1, sl, r1, fp
 800873c:	4411      	add	r1, r2
 800873e:	f8d9 2000 	ldr.w	r2, [r9]
 8008742:	0c24      	lsrs	r4, r4, #16
 8008744:	0c12      	lsrs	r2, r2, #16
 8008746:	fb0a 2404 	mla	r4, sl, r4, r2
 800874a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800874e:	b289      	uxth	r1, r1
 8008750:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008754:	45f4      	cmp	ip, lr
 8008756:	f849 1b04 	str.w	r1, [r9], #4
 800875a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800875e:	d8e4      	bhi.n	800872a <__multiply+0xaa>
 8008760:	9901      	ldr	r1, [sp, #4]
 8008762:	5072      	str	r2, [r6, r1]
 8008764:	9a03      	ldr	r2, [sp, #12]
 8008766:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800876a:	3304      	adds	r3, #4
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	d01f      	beq.n	80087b2 <__multiply+0x132>
 8008772:	6834      	ldr	r4, [r6, #0]
 8008774:	f105 0114 	add.w	r1, r5, #20
 8008778:	46b6      	mov	lr, r6
 800877a:	f04f 0a00 	mov.w	sl, #0
 800877e:	880a      	ldrh	r2, [r1, #0]
 8008780:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008784:	fb09 b202 	mla	r2, r9, r2, fp
 8008788:	4492      	add	sl, r2
 800878a:	b2a4      	uxth	r4, r4
 800878c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008790:	f84e 4b04 	str.w	r4, [lr], #4
 8008794:	f851 4b04 	ldr.w	r4, [r1], #4
 8008798:	f8be 2000 	ldrh.w	r2, [lr]
 800879c:	0c24      	lsrs	r4, r4, #16
 800879e:	fb09 2404 	mla	r4, r9, r4, r2
 80087a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80087a6:	458c      	cmp	ip, r1
 80087a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087ac:	d8e7      	bhi.n	800877e <__multiply+0xfe>
 80087ae:	9a01      	ldr	r2, [sp, #4]
 80087b0:	50b4      	str	r4, [r6, r2]
 80087b2:	3604      	adds	r6, #4
 80087b4:	e7a3      	b.n	80086fe <__multiply+0x7e>
 80087b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1a5      	bne.n	800870a <__multiply+0x8a>
 80087be:	3f01      	subs	r7, #1
 80087c0:	e7a1      	b.n	8008706 <__multiply+0x86>
 80087c2:	bf00      	nop
 80087c4:	0800bb9f 	.word	0x0800bb9f
 80087c8:	0800bbb0 	.word	0x0800bbb0

080087cc <__pow5mult>:
 80087cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d0:	4615      	mov	r5, r2
 80087d2:	f012 0203 	ands.w	r2, r2, #3
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	d007      	beq.n	80087ec <__pow5mult+0x20>
 80087dc:	4c25      	ldr	r4, [pc, #148]	; (8008874 <__pow5mult+0xa8>)
 80087de:	3a01      	subs	r2, #1
 80087e0:	2300      	movs	r3, #0
 80087e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087e6:	f7ff fe9b 	bl	8008520 <__multadd>
 80087ea:	4607      	mov	r7, r0
 80087ec:	10ad      	asrs	r5, r5, #2
 80087ee:	d03d      	beq.n	800886c <__pow5mult+0xa0>
 80087f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087f2:	b97c      	cbnz	r4, 8008814 <__pow5mult+0x48>
 80087f4:	2010      	movs	r0, #16
 80087f6:	f7ff fe1b 	bl	8008430 <malloc>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6270      	str	r0, [r6, #36]	; 0x24
 80087fe:	b928      	cbnz	r0, 800880c <__pow5mult+0x40>
 8008800:	4b1d      	ldr	r3, [pc, #116]	; (8008878 <__pow5mult+0xac>)
 8008802:	481e      	ldr	r0, [pc, #120]	; (800887c <__pow5mult+0xb0>)
 8008804:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008808:	f000 fbcc 	bl	8008fa4 <__assert_func>
 800880c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008810:	6004      	str	r4, [r0, #0]
 8008812:	60c4      	str	r4, [r0, #12]
 8008814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800881c:	b94c      	cbnz	r4, 8008832 <__pow5mult+0x66>
 800881e:	f240 2171 	movw	r1, #625	; 0x271
 8008822:	4630      	mov	r0, r6
 8008824:	f7ff ff16 	bl	8008654 <__i2b>
 8008828:	2300      	movs	r3, #0
 800882a:	f8c8 0008 	str.w	r0, [r8, #8]
 800882e:	4604      	mov	r4, r0
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	f04f 0900 	mov.w	r9, #0
 8008836:	07eb      	lsls	r3, r5, #31
 8008838:	d50a      	bpl.n	8008850 <__pow5mult+0x84>
 800883a:	4639      	mov	r1, r7
 800883c:	4622      	mov	r2, r4
 800883e:	4630      	mov	r0, r6
 8008840:	f7ff ff1e 	bl	8008680 <__multiply>
 8008844:	4639      	mov	r1, r7
 8008846:	4680      	mov	r8, r0
 8008848:	4630      	mov	r0, r6
 800884a:	f7ff fe47 	bl	80084dc <_Bfree>
 800884e:	4647      	mov	r7, r8
 8008850:	106d      	asrs	r5, r5, #1
 8008852:	d00b      	beq.n	800886c <__pow5mult+0xa0>
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	b938      	cbnz	r0, 8008868 <__pow5mult+0x9c>
 8008858:	4622      	mov	r2, r4
 800885a:	4621      	mov	r1, r4
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff ff0f 	bl	8008680 <__multiply>
 8008862:	6020      	str	r0, [r4, #0]
 8008864:	f8c0 9000 	str.w	r9, [r0]
 8008868:	4604      	mov	r4, r0
 800886a:	e7e4      	b.n	8008836 <__pow5mult+0x6a>
 800886c:	4638      	mov	r0, r7
 800886e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008872:	bf00      	nop
 8008874:	0800bd00 	.word	0x0800bd00
 8008878:	0800bb29 	.word	0x0800bb29
 800887c:	0800bbb0 	.word	0x0800bbb0

08008880 <__lshift>:
 8008880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	6849      	ldr	r1, [r1, #4]
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	4607      	mov	r7, r0
 8008892:	4691      	mov	r9, r2
 8008894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008898:	f108 0601 	add.w	r6, r8, #1
 800889c:	42b3      	cmp	r3, r6
 800889e:	db0b      	blt.n	80088b8 <__lshift+0x38>
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff fddb 	bl	800845c <_Balloc>
 80088a6:	4605      	mov	r5, r0
 80088a8:	b948      	cbnz	r0, 80088be <__lshift+0x3e>
 80088aa:	4602      	mov	r2, r0
 80088ac:	4b28      	ldr	r3, [pc, #160]	; (8008950 <__lshift+0xd0>)
 80088ae:	4829      	ldr	r0, [pc, #164]	; (8008954 <__lshift+0xd4>)
 80088b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088b4:	f000 fb76 	bl	8008fa4 <__assert_func>
 80088b8:	3101      	adds	r1, #1
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	e7ee      	b.n	800889c <__lshift+0x1c>
 80088be:	2300      	movs	r3, #0
 80088c0:	f100 0114 	add.w	r1, r0, #20
 80088c4:	f100 0210 	add.w	r2, r0, #16
 80088c8:	4618      	mov	r0, r3
 80088ca:	4553      	cmp	r3, sl
 80088cc:	db33      	blt.n	8008936 <__lshift+0xb6>
 80088ce:	6920      	ldr	r0, [r4, #16]
 80088d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088d4:	f104 0314 	add.w	r3, r4, #20
 80088d8:	f019 091f 	ands.w	r9, r9, #31
 80088dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088e4:	d02b      	beq.n	800893e <__lshift+0xbe>
 80088e6:	f1c9 0e20 	rsb	lr, r9, #32
 80088ea:	468a      	mov	sl, r1
 80088ec:	2200      	movs	r2, #0
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	fa00 f009 	lsl.w	r0, r0, r9
 80088f4:	4302      	orrs	r2, r0
 80088f6:	f84a 2b04 	str.w	r2, [sl], #4
 80088fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fe:	459c      	cmp	ip, r3
 8008900:	fa22 f20e 	lsr.w	r2, r2, lr
 8008904:	d8f3      	bhi.n	80088ee <__lshift+0x6e>
 8008906:	ebac 0304 	sub.w	r3, ip, r4
 800890a:	3b15      	subs	r3, #21
 800890c:	f023 0303 	bic.w	r3, r3, #3
 8008910:	3304      	adds	r3, #4
 8008912:	f104 0015 	add.w	r0, r4, #21
 8008916:	4584      	cmp	ip, r0
 8008918:	bf38      	it	cc
 800891a:	2304      	movcc	r3, #4
 800891c:	50ca      	str	r2, [r1, r3]
 800891e:	b10a      	cbz	r2, 8008924 <__lshift+0xa4>
 8008920:	f108 0602 	add.w	r6, r8, #2
 8008924:	3e01      	subs	r6, #1
 8008926:	4638      	mov	r0, r7
 8008928:	612e      	str	r6, [r5, #16]
 800892a:	4621      	mov	r1, r4
 800892c:	f7ff fdd6 	bl	80084dc <_Bfree>
 8008930:	4628      	mov	r0, r5
 8008932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008936:	f842 0f04 	str.w	r0, [r2, #4]!
 800893a:	3301      	adds	r3, #1
 800893c:	e7c5      	b.n	80088ca <__lshift+0x4a>
 800893e:	3904      	subs	r1, #4
 8008940:	f853 2b04 	ldr.w	r2, [r3], #4
 8008944:	f841 2f04 	str.w	r2, [r1, #4]!
 8008948:	459c      	cmp	ip, r3
 800894a:	d8f9      	bhi.n	8008940 <__lshift+0xc0>
 800894c:	e7ea      	b.n	8008924 <__lshift+0xa4>
 800894e:	bf00      	nop
 8008950:	0800bb9f 	.word	0x0800bb9f
 8008954:	0800bbb0 	.word	0x0800bbb0

08008958 <__mcmp>:
 8008958:	b530      	push	{r4, r5, lr}
 800895a:	6902      	ldr	r2, [r0, #16]
 800895c:	690c      	ldr	r4, [r1, #16]
 800895e:	1b12      	subs	r2, r2, r4
 8008960:	d10e      	bne.n	8008980 <__mcmp+0x28>
 8008962:	f100 0314 	add.w	r3, r0, #20
 8008966:	3114      	adds	r1, #20
 8008968:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800896c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008970:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008974:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008978:	42a5      	cmp	r5, r4
 800897a:	d003      	beq.n	8008984 <__mcmp+0x2c>
 800897c:	d305      	bcc.n	800898a <__mcmp+0x32>
 800897e:	2201      	movs	r2, #1
 8008980:	4610      	mov	r0, r2
 8008982:	bd30      	pop	{r4, r5, pc}
 8008984:	4283      	cmp	r3, r0
 8008986:	d3f3      	bcc.n	8008970 <__mcmp+0x18>
 8008988:	e7fa      	b.n	8008980 <__mcmp+0x28>
 800898a:	f04f 32ff 	mov.w	r2, #4294967295
 800898e:	e7f7      	b.n	8008980 <__mcmp+0x28>

08008990 <__mdiff>:
 8008990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	4606      	mov	r6, r0
 8008998:	4611      	mov	r1, r2
 800899a:	4620      	mov	r0, r4
 800899c:	4617      	mov	r7, r2
 800899e:	f7ff ffdb 	bl	8008958 <__mcmp>
 80089a2:	1e05      	subs	r5, r0, #0
 80089a4:	d110      	bne.n	80089c8 <__mdiff+0x38>
 80089a6:	4629      	mov	r1, r5
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff fd57 	bl	800845c <_Balloc>
 80089ae:	b930      	cbnz	r0, 80089be <__mdiff+0x2e>
 80089b0:	4b39      	ldr	r3, [pc, #228]	; (8008a98 <__mdiff+0x108>)
 80089b2:	4602      	mov	r2, r0
 80089b4:	f240 2132 	movw	r1, #562	; 0x232
 80089b8:	4838      	ldr	r0, [pc, #224]	; (8008a9c <__mdiff+0x10c>)
 80089ba:	f000 faf3 	bl	8008fa4 <__assert_func>
 80089be:	2301      	movs	r3, #1
 80089c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	bfa4      	itt	ge
 80089ca:	463b      	movge	r3, r7
 80089cc:	4627      	movge	r7, r4
 80089ce:	4630      	mov	r0, r6
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	bfa6      	itte	ge
 80089d4:	461c      	movge	r4, r3
 80089d6:	2500      	movge	r5, #0
 80089d8:	2501      	movlt	r5, #1
 80089da:	f7ff fd3f 	bl	800845c <_Balloc>
 80089de:	b920      	cbnz	r0, 80089ea <__mdiff+0x5a>
 80089e0:	4b2d      	ldr	r3, [pc, #180]	; (8008a98 <__mdiff+0x108>)
 80089e2:	4602      	mov	r2, r0
 80089e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089e8:	e7e6      	b.n	80089b8 <__mdiff+0x28>
 80089ea:	693e      	ldr	r6, [r7, #16]
 80089ec:	60c5      	str	r5, [r0, #12]
 80089ee:	6925      	ldr	r5, [r4, #16]
 80089f0:	f107 0114 	add.w	r1, r7, #20
 80089f4:	f104 0914 	add.w	r9, r4, #20
 80089f8:	f100 0e14 	add.w	lr, r0, #20
 80089fc:	f107 0210 	add.w	r2, r7, #16
 8008a00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008a04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008a08:	46f2      	mov	sl, lr
 8008a0a:	2700      	movs	r7, #0
 8008a0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a14:	fa1f f883 	uxth.w	r8, r3
 8008a18:	fa17 f78b 	uxtah	r7, r7, fp
 8008a1c:	0c1b      	lsrs	r3, r3, #16
 8008a1e:	eba7 0808 	sub.w	r8, r7, r8
 8008a22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a2a:	fa1f f888 	uxth.w	r8, r8
 8008a2e:	141f      	asrs	r7, r3, #16
 8008a30:	454d      	cmp	r5, r9
 8008a32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a36:	f84a 3b04 	str.w	r3, [sl], #4
 8008a3a:	d8e7      	bhi.n	8008a0c <__mdiff+0x7c>
 8008a3c:	1b2b      	subs	r3, r5, r4
 8008a3e:	3b15      	subs	r3, #21
 8008a40:	f023 0303 	bic.w	r3, r3, #3
 8008a44:	3304      	adds	r3, #4
 8008a46:	3415      	adds	r4, #21
 8008a48:	42a5      	cmp	r5, r4
 8008a4a:	bf38      	it	cc
 8008a4c:	2304      	movcc	r3, #4
 8008a4e:	4419      	add	r1, r3
 8008a50:	4473      	add	r3, lr
 8008a52:	469e      	mov	lr, r3
 8008a54:	460d      	mov	r5, r1
 8008a56:	4565      	cmp	r5, ip
 8008a58:	d30e      	bcc.n	8008a78 <__mdiff+0xe8>
 8008a5a:	f10c 0203 	add.w	r2, ip, #3
 8008a5e:	1a52      	subs	r2, r2, r1
 8008a60:	f022 0203 	bic.w	r2, r2, #3
 8008a64:	3903      	subs	r1, #3
 8008a66:	458c      	cmp	ip, r1
 8008a68:	bf38      	it	cc
 8008a6a:	2200      	movcc	r2, #0
 8008a6c:	441a      	add	r2, r3
 8008a6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a72:	b17b      	cbz	r3, 8008a94 <__mdiff+0x104>
 8008a74:	6106      	str	r6, [r0, #16]
 8008a76:	e7a5      	b.n	80089c4 <__mdiff+0x34>
 8008a78:	f855 8b04 	ldr.w	r8, [r5], #4
 8008a7c:	fa17 f488 	uxtah	r4, r7, r8
 8008a80:	1422      	asrs	r2, r4, #16
 8008a82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008a86:	b2a4      	uxth	r4, r4
 8008a88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008a8c:	f84e 4b04 	str.w	r4, [lr], #4
 8008a90:	1417      	asrs	r7, r2, #16
 8008a92:	e7e0      	b.n	8008a56 <__mdiff+0xc6>
 8008a94:	3e01      	subs	r6, #1
 8008a96:	e7ea      	b.n	8008a6e <__mdiff+0xde>
 8008a98:	0800bb9f 	.word	0x0800bb9f
 8008a9c:	0800bbb0 	.word	0x0800bbb0

08008aa0 <__d2b>:
 8008aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	4689      	mov	r9, r1
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	ec57 6b10 	vmov	r6, r7, d0
 8008aac:	4690      	mov	r8, r2
 8008aae:	f7ff fcd5 	bl	800845c <_Balloc>
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	b930      	cbnz	r0, 8008ac4 <__d2b+0x24>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	4b25      	ldr	r3, [pc, #148]	; (8008b50 <__d2b+0xb0>)
 8008aba:	4826      	ldr	r0, [pc, #152]	; (8008b54 <__d2b+0xb4>)
 8008abc:	f240 310a 	movw	r1, #778	; 0x30a
 8008ac0:	f000 fa70 	bl	8008fa4 <__assert_func>
 8008ac4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008acc:	bb35      	cbnz	r5, 8008b1c <__d2b+0x7c>
 8008ace:	2e00      	cmp	r6, #0
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	d028      	beq.n	8008b26 <__d2b+0x86>
 8008ad4:	4668      	mov	r0, sp
 8008ad6:	9600      	str	r6, [sp, #0]
 8008ad8:	f7ff fd8c 	bl	80085f4 <__lo0bits>
 8008adc:	9900      	ldr	r1, [sp, #0]
 8008ade:	b300      	cbz	r0, 8008b22 <__d2b+0x82>
 8008ae0:	9a01      	ldr	r2, [sp, #4]
 8008ae2:	f1c0 0320 	rsb	r3, r0, #32
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	430b      	orrs	r3, r1
 8008aec:	40c2      	lsrs	r2, r0
 8008aee:	6163      	str	r3, [r4, #20]
 8008af0:	9201      	str	r2, [sp, #4]
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	61a3      	str	r3, [r4, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	bf14      	ite	ne
 8008afa:	2202      	movne	r2, #2
 8008afc:	2201      	moveq	r2, #1
 8008afe:	6122      	str	r2, [r4, #16]
 8008b00:	b1d5      	cbz	r5, 8008b38 <__d2b+0x98>
 8008b02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b06:	4405      	add	r5, r0
 8008b08:	f8c9 5000 	str.w	r5, [r9]
 8008b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b10:	f8c8 0000 	str.w	r0, [r8]
 8008b14:	4620      	mov	r0, r4
 8008b16:	b003      	add	sp, #12
 8008b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b20:	e7d5      	b.n	8008ace <__d2b+0x2e>
 8008b22:	6161      	str	r1, [r4, #20]
 8008b24:	e7e5      	b.n	8008af2 <__d2b+0x52>
 8008b26:	a801      	add	r0, sp, #4
 8008b28:	f7ff fd64 	bl	80085f4 <__lo0bits>
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	6163      	str	r3, [r4, #20]
 8008b30:	2201      	movs	r2, #1
 8008b32:	6122      	str	r2, [r4, #16]
 8008b34:	3020      	adds	r0, #32
 8008b36:	e7e3      	b.n	8008b00 <__d2b+0x60>
 8008b38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b40:	f8c9 0000 	str.w	r0, [r9]
 8008b44:	6918      	ldr	r0, [r3, #16]
 8008b46:	f7ff fd35 	bl	80085b4 <__hi0bits>
 8008b4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b4e:	e7df      	b.n	8008b10 <__d2b+0x70>
 8008b50:	0800bb9f 	.word	0x0800bb9f
 8008b54:	0800bbb0 	.word	0x0800bbb0

08008b58 <_calloc_r>:
 8008b58:	b513      	push	{r0, r1, r4, lr}
 8008b5a:	434a      	muls	r2, r1
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	9201      	str	r2, [sp, #4]
 8008b60:	f000 f85a 	bl	8008c18 <_malloc_r>
 8008b64:	4604      	mov	r4, r0
 8008b66:	b118      	cbz	r0, 8008b70 <_calloc_r+0x18>
 8008b68:	9a01      	ldr	r2, [sp, #4]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	f7fe f906 	bl	8006d7c <memset>
 8008b70:	4620      	mov	r0, r4
 8008b72:	b002      	add	sp, #8
 8008b74:	bd10      	pop	{r4, pc}
	...

08008b78 <_free_r>:
 8008b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d048      	beq.n	8008c10 <_free_r+0x98>
 8008b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b82:	9001      	str	r0, [sp, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f1a1 0404 	sub.w	r4, r1, #4
 8008b8a:	bfb8      	it	lt
 8008b8c:	18e4      	addlt	r4, r4, r3
 8008b8e:	f000 fa65 	bl	800905c <__malloc_lock>
 8008b92:	4a20      	ldr	r2, [pc, #128]	; (8008c14 <_free_r+0x9c>)
 8008b94:	9801      	ldr	r0, [sp, #4]
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	4615      	mov	r5, r2
 8008b9a:	b933      	cbnz	r3, 8008baa <_free_r+0x32>
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6014      	str	r4, [r2, #0]
 8008ba0:	b003      	add	sp, #12
 8008ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ba6:	f000 ba5f 	b.w	8009068 <__malloc_unlock>
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	d90b      	bls.n	8008bc6 <_free_r+0x4e>
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	1862      	adds	r2, r4, r1
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	bf04      	itt	eq
 8008bb6:	681a      	ldreq	r2, [r3, #0]
 8008bb8:	685b      	ldreq	r3, [r3, #4]
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	bf04      	itt	eq
 8008bbe:	1852      	addeq	r2, r2, r1
 8008bc0:	6022      	streq	r2, [r4, #0]
 8008bc2:	602c      	str	r4, [r5, #0]
 8008bc4:	e7ec      	b.n	8008ba0 <_free_r+0x28>
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	b10b      	cbz	r3, 8008bd0 <_free_r+0x58>
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d9fa      	bls.n	8008bc6 <_free_r+0x4e>
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	1855      	adds	r5, r2, r1
 8008bd4:	42a5      	cmp	r5, r4
 8008bd6:	d10b      	bne.n	8008bf0 <_free_r+0x78>
 8008bd8:	6824      	ldr	r4, [r4, #0]
 8008bda:	4421      	add	r1, r4
 8008bdc:	1854      	adds	r4, r2, r1
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	6011      	str	r1, [r2, #0]
 8008be2:	d1dd      	bne.n	8008ba0 <_free_r+0x28>
 8008be4:	681c      	ldr	r4, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6053      	str	r3, [r2, #4]
 8008bea:	4421      	add	r1, r4
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	e7d7      	b.n	8008ba0 <_free_r+0x28>
 8008bf0:	d902      	bls.n	8008bf8 <_free_r+0x80>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	e7d3      	b.n	8008ba0 <_free_r+0x28>
 8008bf8:	6825      	ldr	r5, [r4, #0]
 8008bfa:	1961      	adds	r1, r4, r5
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf04      	itt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	6063      	str	r3, [r4, #4]
 8008c06:	bf04      	itt	eq
 8008c08:	1949      	addeq	r1, r1, r5
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	6054      	str	r4, [r2, #4]
 8008c0e:	e7c7      	b.n	8008ba0 <_free_r+0x28>
 8008c10:	b003      	add	sp, #12
 8008c12:	bd30      	pop	{r4, r5, pc}
 8008c14:	20000298 	.word	0x20000298

08008c18 <_malloc_r>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	1ccd      	adds	r5, r1, #3
 8008c1c:	f025 0503 	bic.w	r5, r5, #3
 8008c20:	3508      	adds	r5, #8
 8008c22:	2d0c      	cmp	r5, #12
 8008c24:	bf38      	it	cc
 8008c26:	250c      	movcc	r5, #12
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	db01      	blt.n	8008c32 <_malloc_r+0x1a>
 8008c2e:	42a9      	cmp	r1, r5
 8008c30:	d903      	bls.n	8008c3a <_malloc_r+0x22>
 8008c32:	230c      	movs	r3, #12
 8008c34:	6033      	str	r3, [r6, #0]
 8008c36:	2000      	movs	r0, #0
 8008c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c3a:	f000 fa0f 	bl	800905c <__malloc_lock>
 8008c3e:	4921      	ldr	r1, [pc, #132]	; (8008cc4 <_malloc_r+0xac>)
 8008c40:	680a      	ldr	r2, [r1, #0]
 8008c42:	4614      	mov	r4, r2
 8008c44:	b99c      	cbnz	r4, 8008c6e <_malloc_r+0x56>
 8008c46:	4f20      	ldr	r7, [pc, #128]	; (8008cc8 <_malloc_r+0xb0>)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	b923      	cbnz	r3, 8008c56 <_malloc_r+0x3e>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 f998 	bl	8008f84 <_sbrk_r>
 8008c54:	6038      	str	r0, [r7, #0]
 8008c56:	4629      	mov	r1, r5
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f000 f993 	bl	8008f84 <_sbrk_r>
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	d123      	bne.n	8008caa <_malloc_r+0x92>
 8008c62:	230c      	movs	r3, #12
 8008c64:	6033      	str	r3, [r6, #0]
 8008c66:	4630      	mov	r0, r6
 8008c68:	f000 f9fe 	bl	8009068 <__malloc_unlock>
 8008c6c:	e7e3      	b.n	8008c36 <_malloc_r+0x1e>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	1b5b      	subs	r3, r3, r5
 8008c72:	d417      	bmi.n	8008ca4 <_malloc_r+0x8c>
 8008c74:	2b0b      	cmp	r3, #11
 8008c76:	d903      	bls.n	8008c80 <_malloc_r+0x68>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	441c      	add	r4, r3
 8008c7c:	6025      	str	r5, [r4, #0]
 8008c7e:	e004      	b.n	8008c8a <_malloc_r+0x72>
 8008c80:	6863      	ldr	r3, [r4, #4]
 8008c82:	42a2      	cmp	r2, r4
 8008c84:	bf0c      	ite	eq
 8008c86:	600b      	streq	r3, [r1, #0]
 8008c88:	6053      	strne	r3, [r2, #4]
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f9ec 	bl	8009068 <__malloc_unlock>
 8008c90:	f104 000b 	add.w	r0, r4, #11
 8008c94:	1d23      	adds	r3, r4, #4
 8008c96:	f020 0007 	bic.w	r0, r0, #7
 8008c9a:	1ac2      	subs	r2, r0, r3
 8008c9c:	d0cc      	beq.n	8008c38 <_malloc_r+0x20>
 8008c9e:	1a1b      	subs	r3, r3, r0
 8008ca0:	50a3      	str	r3, [r4, r2]
 8008ca2:	e7c9      	b.n	8008c38 <_malloc_r+0x20>
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	6864      	ldr	r4, [r4, #4]
 8008ca8:	e7cc      	b.n	8008c44 <_malloc_r+0x2c>
 8008caa:	1cc4      	adds	r4, r0, #3
 8008cac:	f024 0403 	bic.w	r4, r4, #3
 8008cb0:	42a0      	cmp	r0, r4
 8008cb2:	d0e3      	beq.n	8008c7c <_malloc_r+0x64>
 8008cb4:	1a21      	subs	r1, r4, r0
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f000 f964 	bl	8008f84 <_sbrk_r>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d1dd      	bne.n	8008c7c <_malloc_r+0x64>
 8008cc0:	e7cf      	b.n	8008c62 <_malloc_r+0x4a>
 8008cc2:	bf00      	nop
 8008cc4:	20000298 	.word	0x20000298
 8008cc8:	2000029c 	.word	0x2000029c

08008ccc <__ssputs_r>:
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	688e      	ldr	r6, [r1, #8]
 8008cd2:	429e      	cmp	r6, r3
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	4690      	mov	r8, r2
 8008cda:	461f      	mov	r7, r3
 8008cdc:	d838      	bhi.n	8008d50 <__ssputs_r+0x84>
 8008cde:	898a      	ldrh	r2, [r1, #12]
 8008ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ce4:	d032      	beq.n	8008d4c <__ssputs_r+0x80>
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	6909      	ldr	r1, [r1, #16]
 8008cea:	eba5 0901 	sub.w	r9, r5, r1
 8008cee:	6965      	ldr	r5, [r4, #20]
 8008cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	444b      	add	r3, r9
 8008cfc:	106d      	asrs	r5, r5, #1
 8008cfe:	429d      	cmp	r5, r3
 8008d00:	bf38      	it	cc
 8008d02:	461d      	movcc	r5, r3
 8008d04:	0553      	lsls	r3, r2, #21
 8008d06:	d531      	bpl.n	8008d6c <__ssputs_r+0xa0>
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7ff ff85 	bl	8008c18 <_malloc_r>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	b950      	cbnz	r0, 8008d28 <__ssputs_r+0x5c>
 8008d12:	230c      	movs	r3, #12
 8008d14:	f8ca 3000 	str.w	r3, [sl]
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d28:	6921      	ldr	r1, [r4, #16]
 8008d2a:	464a      	mov	r2, r9
 8008d2c:	f7ff fb88 	bl	8008440 <memcpy>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	6126      	str	r6, [r4, #16]
 8008d3e:	6165      	str	r5, [r4, #20]
 8008d40:	444e      	add	r6, r9
 8008d42:	eba5 0509 	sub.w	r5, r5, r9
 8008d46:	6026      	str	r6, [r4, #0]
 8008d48:	60a5      	str	r5, [r4, #8]
 8008d4a:	463e      	mov	r6, r7
 8008d4c:	42be      	cmp	r6, r7
 8008d4e:	d900      	bls.n	8008d52 <__ssputs_r+0x86>
 8008d50:	463e      	mov	r6, r7
 8008d52:	4632      	mov	r2, r6
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	4641      	mov	r1, r8
 8008d58:	f000 f966 	bl	8009028 <memmove>
 8008d5c:	68a3      	ldr	r3, [r4, #8]
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	1b9b      	subs	r3, r3, r6
 8008d62:	4432      	add	r2, r6
 8008d64:	60a3      	str	r3, [r4, #8]
 8008d66:	6022      	str	r2, [r4, #0]
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e7db      	b.n	8008d24 <__ssputs_r+0x58>
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	f000 f981 	bl	8009074 <_realloc_r>
 8008d72:	4606      	mov	r6, r0
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d1e1      	bne.n	8008d3c <__ssputs_r+0x70>
 8008d78:	6921      	ldr	r1, [r4, #16]
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	f7ff fefc 	bl	8008b78 <_free_r>
 8008d80:	e7c7      	b.n	8008d12 <__ssputs_r+0x46>
	...

08008d84 <_svfiprintf_r>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	4698      	mov	r8, r3
 8008d8a:	898b      	ldrh	r3, [r1, #12]
 8008d8c:	061b      	lsls	r3, r3, #24
 8008d8e:	b09d      	sub	sp, #116	; 0x74
 8008d90:	4607      	mov	r7, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	d50e      	bpl.n	8008db6 <_svfiprintf_r+0x32>
 8008d98:	690b      	ldr	r3, [r1, #16]
 8008d9a:	b963      	cbnz	r3, 8008db6 <_svfiprintf_r+0x32>
 8008d9c:	2140      	movs	r1, #64	; 0x40
 8008d9e:	f7ff ff3b 	bl	8008c18 <_malloc_r>
 8008da2:	6028      	str	r0, [r5, #0]
 8008da4:	6128      	str	r0, [r5, #16]
 8008da6:	b920      	cbnz	r0, 8008db2 <_svfiprintf_r+0x2e>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	e0d1      	b.n	8008f56 <_svfiprintf_r+0x1d2>
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	616b      	str	r3, [r5, #20]
 8008db6:	2300      	movs	r3, #0
 8008db8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dba:	2320      	movs	r3, #32
 8008dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc4:	2330      	movs	r3, #48	; 0x30
 8008dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f70 <_svfiprintf_r+0x1ec>
 8008dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dce:	f04f 0901 	mov.w	r9, #1
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	469a      	mov	sl, r3
 8008dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dda:	b10a      	cbz	r2, 8008de0 <_svfiprintf_r+0x5c>
 8008ddc:	2a25      	cmp	r2, #37	; 0x25
 8008dde:	d1f9      	bne.n	8008dd4 <_svfiprintf_r+0x50>
 8008de0:	ebba 0b04 	subs.w	fp, sl, r4
 8008de4:	d00b      	beq.n	8008dfe <_svfiprintf_r+0x7a>
 8008de6:	465b      	mov	r3, fp
 8008de8:	4622      	mov	r2, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	4638      	mov	r0, r7
 8008dee:	f7ff ff6d 	bl	8008ccc <__ssputs_r>
 8008df2:	3001      	adds	r0, #1
 8008df4:	f000 80aa 	beq.w	8008f4c <_svfiprintf_r+0x1c8>
 8008df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dfa:	445a      	add	r2, fp
 8008dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 80a2 	beq.w	8008f4c <_svfiprintf_r+0x1c8>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e12:	f10a 0a01 	add.w	sl, sl, #1
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	9307      	str	r3, [sp, #28]
 8008e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e20:	4654      	mov	r4, sl
 8008e22:	2205      	movs	r2, #5
 8008e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e28:	4851      	ldr	r0, [pc, #324]	; (8008f70 <_svfiprintf_r+0x1ec>)
 8008e2a:	f7f7 f9f9 	bl	8000220 <memchr>
 8008e2e:	9a04      	ldr	r2, [sp, #16]
 8008e30:	b9d8      	cbnz	r0, 8008e6a <_svfiprintf_r+0xe6>
 8008e32:	06d0      	lsls	r0, r2, #27
 8008e34:	bf44      	itt	mi
 8008e36:	2320      	movmi	r3, #32
 8008e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3c:	0711      	lsls	r1, r2, #28
 8008e3e:	bf44      	itt	mi
 8008e40:	232b      	movmi	r3, #43	; 0x2b
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e46:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4c:	d015      	beq.n	8008e7a <_svfiprintf_r+0xf6>
 8008e4e:	9a07      	ldr	r2, [sp, #28]
 8008e50:	4654      	mov	r4, sl
 8008e52:	2000      	movs	r0, #0
 8008e54:	f04f 0c0a 	mov.w	ip, #10
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5e:	3b30      	subs	r3, #48	; 0x30
 8008e60:	2b09      	cmp	r3, #9
 8008e62:	d94e      	bls.n	8008f02 <_svfiprintf_r+0x17e>
 8008e64:	b1b0      	cbz	r0, 8008e94 <_svfiprintf_r+0x110>
 8008e66:	9207      	str	r2, [sp, #28]
 8008e68:	e014      	b.n	8008e94 <_svfiprintf_r+0x110>
 8008e6a:	eba0 0308 	sub.w	r3, r0, r8
 8008e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	46a2      	mov	sl, r4
 8008e78:	e7d2      	b.n	8008e20 <_svfiprintf_r+0x9c>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	1d19      	adds	r1, r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	9103      	str	r1, [sp, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bfbb      	ittet	lt
 8008e86:	425b      	neglt	r3, r3
 8008e88:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8c:	9307      	strge	r3, [sp, #28]
 8008e8e:	9307      	strlt	r3, [sp, #28]
 8008e90:	bfb8      	it	lt
 8008e92:	9204      	strlt	r2, [sp, #16]
 8008e94:	7823      	ldrb	r3, [r4, #0]
 8008e96:	2b2e      	cmp	r3, #46	; 0x2e
 8008e98:	d10c      	bne.n	8008eb4 <_svfiprintf_r+0x130>
 8008e9a:	7863      	ldrb	r3, [r4, #1]
 8008e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9e:	d135      	bne.n	8008f0c <_svfiprintf_r+0x188>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	1d1a      	adds	r2, r3, #4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	9203      	str	r2, [sp, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfb8      	it	lt
 8008eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eb0:	3402      	adds	r4, #2
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f80 <_svfiprintf_r+0x1fc>
 8008eb8:	7821      	ldrb	r1, [r4, #0]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	f7f7 f9af 	bl	8000220 <memchr>
 8008ec2:	b140      	cbz	r0, 8008ed6 <_svfiprintf_r+0x152>
 8008ec4:	2340      	movs	r3, #64	; 0x40
 8008ec6:	eba0 000a 	sub.w	r0, r0, sl
 8008eca:	fa03 f000 	lsl.w	r0, r3, r0
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	4303      	orrs	r3, r0
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	4826      	ldr	r0, [pc, #152]	; (8008f74 <_svfiprintf_r+0x1f0>)
 8008edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ee0:	2206      	movs	r2, #6
 8008ee2:	f7f7 f99d 	bl	8000220 <memchr>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d038      	beq.n	8008f5c <_svfiprintf_r+0x1d8>
 8008eea:	4b23      	ldr	r3, [pc, #140]	; (8008f78 <_svfiprintf_r+0x1f4>)
 8008eec:	bb1b      	cbnz	r3, 8008f36 <_svfiprintf_r+0x1b2>
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	3307      	adds	r3, #7
 8008ef2:	f023 0307 	bic.w	r3, r3, #7
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efc:	4433      	add	r3, r6
 8008efe:	9309      	str	r3, [sp, #36]	; 0x24
 8008f00:	e767      	b.n	8008dd2 <_svfiprintf_r+0x4e>
 8008f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f06:	460c      	mov	r4, r1
 8008f08:	2001      	movs	r0, #1
 8008f0a:	e7a5      	b.n	8008e58 <_svfiprintf_r+0xd4>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	3401      	adds	r4, #1
 8008f10:	9305      	str	r3, [sp, #20]
 8008f12:	4619      	mov	r1, r3
 8008f14:	f04f 0c0a 	mov.w	ip, #10
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1e:	3a30      	subs	r2, #48	; 0x30
 8008f20:	2a09      	cmp	r2, #9
 8008f22:	d903      	bls.n	8008f2c <_svfiprintf_r+0x1a8>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0c5      	beq.n	8008eb4 <_svfiprintf_r+0x130>
 8008f28:	9105      	str	r1, [sp, #20]
 8008f2a:	e7c3      	b.n	8008eb4 <_svfiprintf_r+0x130>
 8008f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f30:	4604      	mov	r4, r0
 8008f32:	2301      	movs	r3, #1
 8008f34:	e7f0      	b.n	8008f18 <_svfiprintf_r+0x194>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <_svfiprintf_r+0x1f8>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7fd ffc3 	bl	8006ecc <_printf_float>
 8008f46:	1c42      	adds	r2, r0, #1
 8008f48:	4606      	mov	r6, r0
 8008f4a:	d1d6      	bne.n	8008efa <_svfiprintf_r+0x176>
 8008f4c:	89ab      	ldrh	r3, [r5, #12]
 8008f4e:	065b      	lsls	r3, r3, #25
 8008f50:	f53f af2c 	bmi.w	8008dac <_svfiprintf_r+0x28>
 8008f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f56:	b01d      	add	sp, #116	; 0x74
 8008f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5c:	ab03      	add	r3, sp, #12
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	462a      	mov	r2, r5
 8008f62:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <_svfiprintf_r+0x1f8>)
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	4638      	mov	r0, r7
 8008f68:	f7fe fa54 	bl	8007414 <_printf_i>
 8008f6c:	e7eb      	b.n	8008f46 <_svfiprintf_r+0x1c2>
 8008f6e:	bf00      	nop
 8008f70:	0800bd0c 	.word	0x0800bd0c
 8008f74:	0800bd16 	.word	0x0800bd16
 8008f78:	08006ecd 	.word	0x08006ecd
 8008f7c:	08008ccd 	.word	0x08008ccd
 8008f80:	0800bd12 	.word	0x0800bd12

08008f84 <_sbrk_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_sbrk_r+0x1c>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	f7f9 f8fe 	bl	8002190 <_sbrk>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_sbrk_r+0x1a>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_sbrk_r+0x1a>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	20000630 	.word	0x20000630

08008fa4 <__assert_func>:
 8008fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fa6:	4614      	mov	r4, r2
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <__assert_func+0x2c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4605      	mov	r5, r0
 8008fb0:	68d8      	ldr	r0, [r3, #12]
 8008fb2:	b14c      	cbz	r4, 8008fc8 <__assert_func+0x24>
 8008fb4:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <__assert_func+0x30>)
 8008fb6:	9100      	str	r1, [sp, #0]
 8008fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fbc:	4906      	ldr	r1, [pc, #24]	; (8008fd8 <__assert_func+0x34>)
 8008fbe:	462b      	mov	r3, r5
 8008fc0:	f000 f80e 	bl	8008fe0 <fiprintf>
 8008fc4:	f000 faa4 	bl	8009510 <abort>
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <__assert_func+0x38>)
 8008fca:	461c      	mov	r4, r3
 8008fcc:	e7f3      	b.n	8008fb6 <__assert_func+0x12>
 8008fce:	bf00      	nop
 8008fd0:	20000098 	.word	0x20000098
 8008fd4:	0800bd1d 	.word	0x0800bd1d
 8008fd8:	0800bd2a 	.word	0x0800bd2a
 8008fdc:	0800bd58 	.word	0x0800bd58

08008fe0 <fiprintf>:
 8008fe0:	b40e      	push	{r1, r2, r3}
 8008fe2:	b503      	push	{r0, r1, lr}
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	ab03      	add	r3, sp, #12
 8008fe8:	4805      	ldr	r0, [pc, #20]	; (8009000 <fiprintf+0x20>)
 8008fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fee:	6800      	ldr	r0, [r0, #0]
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	f000 f88f 	bl	8009114 <_vfiprintf_r>
 8008ff6:	b002      	add	sp, #8
 8008ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ffc:	b003      	add	sp, #12
 8008ffe:	4770      	bx	lr
 8009000:	20000098 	.word	0x20000098

08009004 <__ascii_mbtowc>:
 8009004:	b082      	sub	sp, #8
 8009006:	b901      	cbnz	r1, 800900a <__ascii_mbtowc+0x6>
 8009008:	a901      	add	r1, sp, #4
 800900a:	b142      	cbz	r2, 800901e <__ascii_mbtowc+0x1a>
 800900c:	b14b      	cbz	r3, 8009022 <__ascii_mbtowc+0x1e>
 800900e:	7813      	ldrb	r3, [r2, #0]
 8009010:	600b      	str	r3, [r1, #0]
 8009012:	7812      	ldrb	r2, [r2, #0]
 8009014:	1e10      	subs	r0, r2, #0
 8009016:	bf18      	it	ne
 8009018:	2001      	movne	r0, #1
 800901a:	b002      	add	sp, #8
 800901c:	4770      	bx	lr
 800901e:	4610      	mov	r0, r2
 8009020:	e7fb      	b.n	800901a <__ascii_mbtowc+0x16>
 8009022:	f06f 0001 	mvn.w	r0, #1
 8009026:	e7f8      	b.n	800901a <__ascii_mbtowc+0x16>

08009028 <memmove>:
 8009028:	4288      	cmp	r0, r1
 800902a:	b510      	push	{r4, lr}
 800902c:	eb01 0402 	add.w	r4, r1, r2
 8009030:	d902      	bls.n	8009038 <memmove+0x10>
 8009032:	4284      	cmp	r4, r0
 8009034:	4623      	mov	r3, r4
 8009036:	d807      	bhi.n	8009048 <memmove+0x20>
 8009038:	1e43      	subs	r3, r0, #1
 800903a:	42a1      	cmp	r1, r4
 800903c:	d008      	beq.n	8009050 <memmove+0x28>
 800903e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009046:	e7f8      	b.n	800903a <memmove+0x12>
 8009048:	4402      	add	r2, r0
 800904a:	4601      	mov	r1, r0
 800904c:	428a      	cmp	r2, r1
 800904e:	d100      	bne.n	8009052 <memmove+0x2a>
 8009050:	bd10      	pop	{r4, pc}
 8009052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800905a:	e7f7      	b.n	800904c <memmove+0x24>

0800905c <__malloc_lock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_lock+0x8>)
 800905e:	f000 bc17 	b.w	8009890 <__retarget_lock_acquire_recursive>
 8009062:	bf00      	nop
 8009064:	20000638 	.word	0x20000638

08009068 <__malloc_unlock>:
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <__malloc_unlock+0x8>)
 800906a:	f000 bc12 	b.w	8009892 <__retarget_lock_release_recursive>
 800906e:	bf00      	nop
 8009070:	20000638 	.word	0x20000638

08009074 <_realloc_r>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	4607      	mov	r7, r0
 8009078:	4614      	mov	r4, r2
 800907a:	460e      	mov	r6, r1
 800907c:	b921      	cbnz	r1, 8009088 <_realloc_r+0x14>
 800907e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009082:	4611      	mov	r1, r2
 8009084:	f7ff bdc8 	b.w	8008c18 <_malloc_r>
 8009088:	b922      	cbnz	r2, 8009094 <_realloc_r+0x20>
 800908a:	f7ff fd75 	bl	8008b78 <_free_r>
 800908e:	4625      	mov	r5, r4
 8009090:	4628      	mov	r0, r5
 8009092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009094:	f000 fc62 	bl	800995c <_malloc_usable_size_r>
 8009098:	42a0      	cmp	r0, r4
 800909a:	d20f      	bcs.n	80090bc <_realloc_r+0x48>
 800909c:	4621      	mov	r1, r4
 800909e:	4638      	mov	r0, r7
 80090a0:	f7ff fdba 	bl	8008c18 <_malloc_r>
 80090a4:	4605      	mov	r5, r0
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d0f2      	beq.n	8009090 <_realloc_r+0x1c>
 80090aa:	4631      	mov	r1, r6
 80090ac:	4622      	mov	r2, r4
 80090ae:	f7ff f9c7 	bl	8008440 <memcpy>
 80090b2:	4631      	mov	r1, r6
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7ff fd5f 	bl	8008b78 <_free_r>
 80090ba:	e7e9      	b.n	8009090 <_realloc_r+0x1c>
 80090bc:	4635      	mov	r5, r6
 80090be:	e7e7      	b.n	8009090 <_realloc_r+0x1c>

080090c0 <__sfputc_r>:
 80090c0:	6893      	ldr	r3, [r2, #8]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	b410      	push	{r4}
 80090c8:	6093      	str	r3, [r2, #8]
 80090ca:	da08      	bge.n	80090de <__sfputc_r+0x1e>
 80090cc:	6994      	ldr	r4, [r2, #24]
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	db01      	blt.n	80090d6 <__sfputc_r+0x16>
 80090d2:	290a      	cmp	r1, #10
 80090d4:	d103      	bne.n	80090de <__sfputc_r+0x1e>
 80090d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090da:	f000 b94b 	b.w	8009374 <__swbuf_r>
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	1c58      	adds	r0, r3, #1
 80090e2:	6010      	str	r0, [r2, #0]
 80090e4:	7019      	strb	r1, [r3, #0]
 80090e6:	4608      	mov	r0, r1
 80090e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <__sfputs_r>:
 80090ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f0:	4606      	mov	r6, r0
 80090f2:	460f      	mov	r7, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	18d5      	adds	r5, r2, r3
 80090f8:	42ac      	cmp	r4, r5
 80090fa:	d101      	bne.n	8009100 <__sfputs_r+0x12>
 80090fc:	2000      	movs	r0, #0
 80090fe:	e007      	b.n	8009110 <__sfputs_r+0x22>
 8009100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009104:	463a      	mov	r2, r7
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff ffda 	bl	80090c0 <__sfputc_r>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d1f3      	bne.n	80090f8 <__sfputs_r+0xa>
 8009110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009114 <_vfiprintf_r>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	460d      	mov	r5, r1
 800911a:	b09d      	sub	sp, #116	; 0x74
 800911c:	4614      	mov	r4, r2
 800911e:	4698      	mov	r8, r3
 8009120:	4606      	mov	r6, r0
 8009122:	b118      	cbz	r0, 800912c <_vfiprintf_r+0x18>
 8009124:	6983      	ldr	r3, [r0, #24]
 8009126:	b90b      	cbnz	r3, 800912c <_vfiprintf_r+0x18>
 8009128:	f000 fb14 	bl	8009754 <__sinit>
 800912c:	4b89      	ldr	r3, [pc, #548]	; (8009354 <_vfiprintf_r+0x240>)
 800912e:	429d      	cmp	r5, r3
 8009130:	d11b      	bne.n	800916a <_vfiprintf_r+0x56>
 8009132:	6875      	ldr	r5, [r6, #4]
 8009134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009136:	07d9      	lsls	r1, r3, #31
 8009138:	d405      	bmi.n	8009146 <_vfiprintf_r+0x32>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	059a      	lsls	r2, r3, #22
 800913e:	d402      	bmi.n	8009146 <_vfiprintf_r+0x32>
 8009140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009142:	f000 fba5 	bl	8009890 <__retarget_lock_acquire_recursive>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	071b      	lsls	r3, r3, #28
 800914a:	d501      	bpl.n	8009150 <_vfiprintf_r+0x3c>
 800914c:	692b      	ldr	r3, [r5, #16]
 800914e:	b9eb      	cbnz	r3, 800918c <_vfiprintf_r+0x78>
 8009150:	4629      	mov	r1, r5
 8009152:	4630      	mov	r0, r6
 8009154:	f000 f96e 	bl	8009434 <__swsetup_r>
 8009158:	b1c0      	cbz	r0, 800918c <_vfiprintf_r+0x78>
 800915a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915c:	07dc      	lsls	r4, r3, #31
 800915e:	d50e      	bpl.n	800917e <_vfiprintf_r+0x6a>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	b01d      	add	sp, #116	; 0x74
 8009166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916a:	4b7b      	ldr	r3, [pc, #492]	; (8009358 <_vfiprintf_r+0x244>)
 800916c:	429d      	cmp	r5, r3
 800916e:	d101      	bne.n	8009174 <_vfiprintf_r+0x60>
 8009170:	68b5      	ldr	r5, [r6, #8]
 8009172:	e7df      	b.n	8009134 <_vfiprintf_r+0x20>
 8009174:	4b79      	ldr	r3, [pc, #484]	; (800935c <_vfiprintf_r+0x248>)
 8009176:	429d      	cmp	r5, r3
 8009178:	bf08      	it	eq
 800917a:	68f5      	ldreq	r5, [r6, #12]
 800917c:	e7da      	b.n	8009134 <_vfiprintf_r+0x20>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	0598      	lsls	r0, r3, #22
 8009182:	d4ed      	bmi.n	8009160 <_vfiprintf_r+0x4c>
 8009184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009186:	f000 fb84 	bl	8009892 <__retarget_lock_release_recursive>
 800918a:	e7e9      	b.n	8009160 <_vfiprintf_r+0x4c>
 800918c:	2300      	movs	r3, #0
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	2320      	movs	r3, #32
 8009192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009196:	f8cd 800c 	str.w	r8, [sp, #12]
 800919a:	2330      	movs	r3, #48	; 0x30
 800919c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009360 <_vfiprintf_r+0x24c>
 80091a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a4:	f04f 0901 	mov.w	r9, #1
 80091a8:	4623      	mov	r3, r4
 80091aa:	469a      	mov	sl, r3
 80091ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b0:	b10a      	cbz	r2, 80091b6 <_vfiprintf_r+0xa2>
 80091b2:	2a25      	cmp	r2, #37	; 0x25
 80091b4:	d1f9      	bne.n	80091aa <_vfiprintf_r+0x96>
 80091b6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ba:	d00b      	beq.n	80091d4 <_vfiprintf_r+0xc0>
 80091bc:	465b      	mov	r3, fp
 80091be:	4622      	mov	r2, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ff93 	bl	80090ee <__sfputs_r>
 80091c8:	3001      	adds	r0, #1
 80091ca:	f000 80aa 	beq.w	8009322 <_vfiprintf_r+0x20e>
 80091ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d0:	445a      	add	r2, fp
 80091d2:	9209      	str	r2, [sp, #36]	; 0x24
 80091d4:	f89a 3000 	ldrb.w	r3, [sl]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 80a2 	beq.w	8009322 <_vfiprintf_r+0x20e>
 80091de:	2300      	movs	r3, #0
 80091e0:	f04f 32ff 	mov.w	r2, #4294967295
 80091e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e8:	f10a 0a01 	add.w	sl, sl, #1
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	9307      	str	r3, [sp, #28]
 80091f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f4:	931a      	str	r3, [sp, #104]	; 0x68
 80091f6:	4654      	mov	r4, sl
 80091f8:	2205      	movs	r2, #5
 80091fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fe:	4858      	ldr	r0, [pc, #352]	; (8009360 <_vfiprintf_r+0x24c>)
 8009200:	f7f7 f80e 	bl	8000220 <memchr>
 8009204:	9a04      	ldr	r2, [sp, #16]
 8009206:	b9d8      	cbnz	r0, 8009240 <_vfiprintf_r+0x12c>
 8009208:	06d1      	lsls	r1, r2, #27
 800920a:	bf44      	itt	mi
 800920c:	2320      	movmi	r3, #32
 800920e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009212:	0713      	lsls	r3, r2, #28
 8009214:	bf44      	itt	mi
 8009216:	232b      	movmi	r3, #43	; 0x2b
 8009218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921c:	f89a 3000 	ldrb.w	r3, [sl]
 8009220:	2b2a      	cmp	r3, #42	; 0x2a
 8009222:	d015      	beq.n	8009250 <_vfiprintf_r+0x13c>
 8009224:	9a07      	ldr	r2, [sp, #28]
 8009226:	4654      	mov	r4, sl
 8009228:	2000      	movs	r0, #0
 800922a:	f04f 0c0a 	mov.w	ip, #10
 800922e:	4621      	mov	r1, r4
 8009230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009234:	3b30      	subs	r3, #48	; 0x30
 8009236:	2b09      	cmp	r3, #9
 8009238:	d94e      	bls.n	80092d8 <_vfiprintf_r+0x1c4>
 800923a:	b1b0      	cbz	r0, 800926a <_vfiprintf_r+0x156>
 800923c:	9207      	str	r2, [sp, #28]
 800923e:	e014      	b.n	800926a <_vfiprintf_r+0x156>
 8009240:	eba0 0308 	sub.w	r3, r0, r8
 8009244:	fa09 f303 	lsl.w	r3, r9, r3
 8009248:	4313      	orrs	r3, r2
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	46a2      	mov	sl, r4
 800924e:	e7d2      	b.n	80091f6 <_vfiprintf_r+0xe2>
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	1d19      	adds	r1, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	9103      	str	r1, [sp, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	bfbb      	ittet	lt
 800925c:	425b      	neglt	r3, r3
 800925e:	f042 0202 	orrlt.w	r2, r2, #2
 8009262:	9307      	strge	r3, [sp, #28]
 8009264:	9307      	strlt	r3, [sp, #28]
 8009266:	bfb8      	it	lt
 8009268:	9204      	strlt	r2, [sp, #16]
 800926a:	7823      	ldrb	r3, [r4, #0]
 800926c:	2b2e      	cmp	r3, #46	; 0x2e
 800926e:	d10c      	bne.n	800928a <_vfiprintf_r+0x176>
 8009270:	7863      	ldrb	r3, [r4, #1]
 8009272:	2b2a      	cmp	r3, #42	; 0x2a
 8009274:	d135      	bne.n	80092e2 <_vfiprintf_r+0x1ce>
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	1d1a      	adds	r2, r3, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	9203      	str	r2, [sp, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfb8      	it	lt
 8009282:	f04f 33ff 	movlt.w	r3, #4294967295
 8009286:	3402      	adds	r4, #2
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009370 <_vfiprintf_r+0x25c>
 800928e:	7821      	ldrb	r1, [r4, #0]
 8009290:	2203      	movs	r2, #3
 8009292:	4650      	mov	r0, sl
 8009294:	f7f6 ffc4 	bl	8000220 <memchr>
 8009298:	b140      	cbz	r0, 80092ac <_vfiprintf_r+0x198>
 800929a:	2340      	movs	r3, #64	; 0x40
 800929c:	eba0 000a 	sub.w	r0, r0, sl
 80092a0:	fa03 f000 	lsl.w	r0, r3, r0
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	4303      	orrs	r3, r0
 80092a8:	3401      	adds	r4, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	482c      	ldr	r0, [pc, #176]	; (8009364 <_vfiprintf_r+0x250>)
 80092b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092b6:	2206      	movs	r2, #6
 80092b8:	f7f6 ffb2 	bl	8000220 <memchr>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d03f      	beq.n	8009340 <_vfiprintf_r+0x22c>
 80092c0:	4b29      	ldr	r3, [pc, #164]	; (8009368 <_vfiprintf_r+0x254>)
 80092c2:	bb1b      	cbnz	r3, 800930c <_vfiprintf_r+0x1f8>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	3307      	adds	r3, #7
 80092c8:	f023 0307 	bic.w	r3, r3, #7
 80092cc:	3308      	adds	r3, #8
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	443b      	add	r3, r7
 80092d4:	9309      	str	r3, [sp, #36]	; 0x24
 80092d6:	e767      	b.n	80091a8 <_vfiprintf_r+0x94>
 80092d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092dc:	460c      	mov	r4, r1
 80092de:	2001      	movs	r0, #1
 80092e0:	e7a5      	b.n	800922e <_vfiprintf_r+0x11a>
 80092e2:	2300      	movs	r3, #0
 80092e4:	3401      	adds	r4, #1
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	4620      	mov	r0, r4
 80092f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f4:	3a30      	subs	r2, #48	; 0x30
 80092f6:	2a09      	cmp	r2, #9
 80092f8:	d903      	bls.n	8009302 <_vfiprintf_r+0x1ee>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0c5      	beq.n	800928a <_vfiprintf_r+0x176>
 80092fe:	9105      	str	r1, [sp, #20]
 8009300:	e7c3      	b.n	800928a <_vfiprintf_r+0x176>
 8009302:	fb0c 2101 	mla	r1, ip, r1, r2
 8009306:	4604      	mov	r4, r0
 8009308:	2301      	movs	r3, #1
 800930a:	e7f0      	b.n	80092ee <_vfiprintf_r+0x1da>
 800930c:	ab03      	add	r3, sp, #12
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	462a      	mov	r2, r5
 8009312:	4b16      	ldr	r3, [pc, #88]	; (800936c <_vfiprintf_r+0x258>)
 8009314:	a904      	add	r1, sp, #16
 8009316:	4630      	mov	r0, r6
 8009318:	f7fd fdd8 	bl	8006ecc <_printf_float>
 800931c:	4607      	mov	r7, r0
 800931e:	1c78      	adds	r0, r7, #1
 8009320:	d1d6      	bne.n	80092d0 <_vfiprintf_r+0x1bc>
 8009322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009324:	07d9      	lsls	r1, r3, #31
 8009326:	d405      	bmi.n	8009334 <_vfiprintf_r+0x220>
 8009328:	89ab      	ldrh	r3, [r5, #12]
 800932a:	059a      	lsls	r2, r3, #22
 800932c:	d402      	bmi.n	8009334 <_vfiprintf_r+0x220>
 800932e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009330:	f000 faaf 	bl	8009892 <__retarget_lock_release_recursive>
 8009334:	89ab      	ldrh	r3, [r5, #12]
 8009336:	065b      	lsls	r3, r3, #25
 8009338:	f53f af12 	bmi.w	8009160 <_vfiprintf_r+0x4c>
 800933c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800933e:	e711      	b.n	8009164 <_vfiprintf_r+0x50>
 8009340:	ab03      	add	r3, sp, #12
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	462a      	mov	r2, r5
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <_vfiprintf_r+0x258>)
 8009348:	a904      	add	r1, sp, #16
 800934a:	4630      	mov	r0, r6
 800934c:	f7fe f862 	bl	8007414 <_printf_i>
 8009350:	e7e4      	b.n	800931c <_vfiprintf_r+0x208>
 8009352:	bf00      	nop
 8009354:	0800be84 	.word	0x0800be84
 8009358:	0800bea4 	.word	0x0800bea4
 800935c:	0800be64 	.word	0x0800be64
 8009360:	0800bd0c 	.word	0x0800bd0c
 8009364:	0800bd16 	.word	0x0800bd16
 8009368:	08006ecd 	.word	0x08006ecd
 800936c:	080090ef 	.word	0x080090ef
 8009370:	0800bd12 	.word	0x0800bd12

08009374 <__swbuf_r>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	4614      	mov	r4, r2
 800937a:	4605      	mov	r5, r0
 800937c:	b118      	cbz	r0, 8009386 <__swbuf_r+0x12>
 800937e:	6983      	ldr	r3, [r0, #24]
 8009380:	b90b      	cbnz	r3, 8009386 <__swbuf_r+0x12>
 8009382:	f000 f9e7 	bl	8009754 <__sinit>
 8009386:	4b21      	ldr	r3, [pc, #132]	; (800940c <__swbuf_r+0x98>)
 8009388:	429c      	cmp	r4, r3
 800938a:	d12b      	bne.n	80093e4 <__swbuf_r+0x70>
 800938c:	686c      	ldr	r4, [r5, #4]
 800938e:	69a3      	ldr	r3, [r4, #24]
 8009390:	60a3      	str	r3, [r4, #8]
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	071a      	lsls	r2, r3, #28
 8009396:	d52f      	bpl.n	80093f8 <__swbuf_r+0x84>
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	b36b      	cbz	r3, 80093f8 <__swbuf_r+0x84>
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	6820      	ldr	r0, [r4, #0]
 80093a0:	1ac0      	subs	r0, r0, r3
 80093a2:	6963      	ldr	r3, [r4, #20]
 80093a4:	b2f6      	uxtb	r6, r6
 80093a6:	4283      	cmp	r3, r0
 80093a8:	4637      	mov	r7, r6
 80093aa:	dc04      	bgt.n	80093b6 <__swbuf_r+0x42>
 80093ac:	4621      	mov	r1, r4
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 f93c 	bl	800962c <_fflush_r>
 80093b4:	bb30      	cbnz	r0, 8009404 <__swbuf_r+0x90>
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	60a3      	str	r3, [r4, #8]
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	6022      	str	r2, [r4, #0]
 80093c2:	701e      	strb	r6, [r3, #0]
 80093c4:	6963      	ldr	r3, [r4, #20]
 80093c6:	3001      	adds	r0, #1
 80093c8:	4283      	cmp	r3, r0
 80093ca:	d004      	beq.n	80093d6 <__swbuf_r+0x62>
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	07db      	lsls	r3, r3, #31
 80093d0:	d506      	bpl.n	80093e0 <__swbuf_r+0x6c>
 80093d2:	2e0a      	cmp	r6, #10
 80093d4:	d104      	bne.n	80093e0 <__swbuf_r+0x6c>
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	f000 f927 	bl	800962c <_fflush_r>
 80093de:	b988      	cbnz	r0, 8009404 <__swbuf_r+0x90>
 80093e0:	4638      	mov	r0, r7
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <__swbuf_r+0x9c>)
 80093e6:	429c      	cmp	r4, r3
 80093e8:	d101      	bne.n	80093ee <__swbuf_r+0x7a>
 80093ea:	68ac      	ldr	r4, [r5, #8]
 80093ec:	e7cf      	b.n	800938e <__swbuf_r+0x1a>
 80093ee:	4b09      	ldr	r3, [pc, #36]	; (8009414 <__swbuf_r+0xa0>)
 80093f0:	429c      	cmp	r4, r3
 80093f2:	bf08      	it	eq
 80093f4:	68ec      	ldreq	r4, [r5, #12]
 80093f6:	e7ca      	b.n	800938e <__swbuf_r+0x1a>
 80093f8:	4621      	mov	r1, r4
 80093fa:	4628      	mov	r0, r5
 80093fc:	f000 f81a 	bl	8009434 <__swsetup_r>
 8009400:	2800      	cmp	r0, #0
 8009402:	d0cb      	beq.n	800939c <__swbuf_r+0x28>
 8009404:	f04f 37ff 	mov.w	r7, #4294967295
 8009408:	e7ea      	b.n	80093e0 <__swbuf_r+0x6c>
 800940a:	bf00      	nop
 800940c:	0800be84 	.word	0x0800be84
 8009410:	0800bea4 	.word	0x0800bea4
 8009414:	0800be64 	.word	0x0800be64

08009418 <__ascii_wctomb>:
 8009418:	b149      	cbz	r1, 800942e <__ascii_wctomb+0x16>
 800941a:	2aff      	cmp	r2, #255	; 0xff
 800941c:	bf85      	ittet	hi
 800941e:	238a      	movhi	r3, #138	; 0x8a
 8009420:	6003      	strhi	r3, [r0, #0]
 8009422:	700a      	strbls	r2, [r1, #0]
 8009424:	f04f 30ff 	movhi.w	r0, #4294967295
 8009428:	bf98      	it	ls
 800942a:	2001      	movls	r0, #1
 800942c:	4770      	bx	lr
 800942e:	4608      	mov	r0, r1
 8009430:	4770      	bx	lr
	...

08009434 <__swsetup_r>:
 8009434:	4b32      	ldr	r3, [pc, #200]	; (8009500 <__swsetup_r+0xcc>)
 8009436:	b570      	push	{r4, r5, r6, lr}
 8009438:	681d      	ldr	r5, [r3, #0]
 800943a:	4606      	mov	r6, r0
 800943c:	460c      	mov	r4, r1
 800943e:	b125      	cbz	r5, 800944a <__swsetup_r+0x16>
 8009440:	69ab      	ldr	r3, [r5, #24]
 8009442:	b913      	cbnz	r3, 800944a <__swsetup_r+0x16>
 8009444:	4628      	mov	r0, r5
 8009446:	f000 f985 	bl	8009754 <__sinit>
 800944a:	4b2e      	ldr	r3, [pc, #184]	; (8009504 <__swsetup_r+0xd0>)
 800944c:	429c      	cmp	r4, r3
 800944e:	d10f      	bne.n	8009470 <__swsetup_r+0x3c>
 8009450:	686c      	ldr	r4, [r5, #4]
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009458:	0719      	lsls	r1, r3, #28
 800945a:	d42c      	bmi.n	80094b6 <__swsetup_r+0x82>
 800945c:	06dd      	lsls	r5, r3, #27
 800945e:	d411      	bmi.n	8009484 <__swsetup_r+0x50>
 8009460:	2309      	movs	r3, #9
 8009462:	6033      	str	r3, [r6, #0]
 8009464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009468:	81a3      	strh	r3, [r4, #12]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	e03e      	b.n	80094ee <__swsetup_r+0xba>
 8009470:	4b25      	ldr	r3, [pc, #148]	; (8009508 <__swsetup_r+0xd4>)
 8009472:	429c      	cmp	r4, r3
 8009474:	d101      	bne.n	800947a <__swsetup_r+0x46>
 8009476:	68ac      	ldr	r4, [r5, #8]
 8009478:	e7eb      	b.n	8009452 <__swsetup_r+0x1e>
 800947a:	4b24      	ldr	r3, [pc, #144]	; (800950c <__swsetup_r+0xd8>)
 800947c:	429c      	cmp	r4, r3
 800947e:	bf08      	it	eq
 8009480:	68ec      	ldreq	r4, [r5, #12]
 8009482:	e7e6      	b.n	8009452 <__swsetup_r+0x1e>
 8009484:	0758      	lsls	r0, r3, #29
 8009486:	d512      	bpl.n	80094ae <__swsetup_r+0x7a>
 8009488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800948a:	b141      	cbz	r1, 800949e <__swsetup_r+0x6a>
 800948c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009490:	4299      	cmp	r1, r3
 8009492:	d002      	beq.n	800949a <__swsetup_r+0x66>
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff fb6f 	bl	8008b78 <_free_r>
 800949a:	2300      	movs	r3, #0
 800949c:	6363      	str	r3, [r4, #52]	; 0x34
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	2300      	movs	r3, #0
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f043 0308 	orr.w	r3, r3, #8
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	b94b      	cbnz	r3, 80094ce <__swsetup_r+0x9a>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c4:	d003      	beq.n	80094ce <__swsetup_r+0x9a>
 80094c6:	4621      	mov	r1, r4
 80094c8:	4630      	mov	r0, r6
 80094ca:	f000 fa07 	bl	80098dc <__smakebuf_r>
 80094ce:	89a0      	ldrh	r0, [r4, #12]
 80094d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094d4:	f010 0301 	ands.w	r3, r0, #1
 80094d8:	d00a      	beq.n	80094f0 <__swsetup_r+0xbc>
 80094da:	2300      	movs	r3, #0
 80094dc:	60a3      	str	r3, [r4, #8]
 80094de:	6963      	ldr	r3, [r4, #20]
 80094e0:	425b      	negs	r3, r3
 80094e2:	61a3      	str	r3, [r4, #24]
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	b943      	cbnz	r3, 80094fa <__swsetup_r+0xc6>
 80094e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094ec:	d1ba      	bne.n	8009464 <__swsetup_r+0x30>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	0781      	lsls	r1, r0, #30
 80094f2:	bf58      	it	pl
 80094f4:	6963      	ldrpl	r3, [r4, #20]
 80094f6:	60a3      	str	r3, [r4, #8]
 80094f8:	e7f4      	b.n	80094e4 <__swsetup_r+0xb0>
 80094fa:	2000      	movs	r0, #0
 80094fc:	e7f7      	b.n	80094ee <__swsetup_r+0xba>
 80094fe:	bf00      	nop
 8009500:	20000098 	.word	0x20000098
 8009504:	0800be84 	.word	0x0800be84
 8009508:	0800bea4 	.word	0x0800bea4
 800950c:	0800be64 	.word	0x0800be64

08009510 <abort>:
 8009510:	b508      	push	{r3, lr}
 8009512:	2006      	movs	r0, #6
 8009514:	f000 fa52 	bl	80099bc <raise>
 8009518:	2001      	movs	r0, #1
 800951a:	f7f8 fdc1 	bl	80020a0 <_exit>
	...

08009520 <__sflush_r>:
 8009520:	898a      	ldrh	r2, [r1, #12]
 8009522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	4605      	mov	r5, r0
 8009528:	0710      	lsls	r0, r2, #28
 800952a:	460c      	mov	r4, r1
 800952c:	d458      	bmi.n	80095e0 <__sflush_r+0xc0>
 800952e:	684b      	ldr	r3, [r1, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	dc05      	bgt.n	8009540 <__sflush_r+0x20>
 8009534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	dc02      	bgt.n	8009540 <__sflush_r+0x20>
 800953a:	2000      	movs	r0, #0
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009542:	2e00      	cmp	r6, #0
 8009544:	d0f9      	beq.n	800953a <__sflush_r+0x1a>
 8009546:	2300      	movs	r3, #0
 8009548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800954c:	682f      	ldr	r7, [r5, #0]
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	d032      	beq.n	80095b8 <__sflush_r+0x98>
 8009552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	075a      	lsls	r2, r3, #29
 8009558:	d505      	bpl.n	8009566 <__sflush_r+0x46>
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	1ac0      	subs	r0, r0, r3
 800955e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009560:	b10b      	cbz	r3, 8009566 <__sflush_r+0x46>
 8009562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009564:	1ac0      	subs	r0, r0, r3
 8009566:	2300      	movs	r3, #0
 8009568:	4602      	mov	r2, r0
 800956a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800956c:	6a21      	ldr	r1, [r4, #32]
 800956e:	4628      	mov	r0, r5
 8009570:	47b0      	blx	r6
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	d106      	bne.n	8009586 <__sflush_r+0x66>
 8009578:	6829      	ldr	r1, [r5, #0]
 800957a:	291d      	cmp	r1, #29
 800957c:	d82c      	bhi.n	80095d8 <__sflush_r+0xb8>
 800957e:	4a2a      	ldr	r2, [pc, #168]	; (8009628 <__sflush_r+0x108>)
 8009580:	40ca      	lsrs	r2, r1
 8009582:	07d6      	lsls	r6, r2, #31
 8009584:	d528      	bpl.n	80095d8 <__sflush_r+0xb8>
 8009586:	2200      	movs	r2, #0
 8009588:	6062      	str	r2, [r4, #4]
 800958a:	04d9      	lsls	r1, r3, #19
 800958c:	6922      	ldr	r2, [r4, #16]
 800958e:	6022      	str	r2, [r4, #0]
 8009590:	d504      	bpl.n	800959c <__sflush_r+0x7c>
 8009592:	1c42      	adds	r2, r0, #1
 8009594:	d101      	bne.n	800959a <__sflush_r+0x7a>
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	b903      	cbnz	r3, 800959c <__sflush_r+0x7c>
 800959a:	6560      	str	r0, [r4, #84]	; 0x54
 800959c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800959e:	602f      	str	r7, [r5, #0]
 80095a0:	2900      	cmp	r1, #0
 80095a2:	d0ca      	beq.n	800953a <__sflush_r+0x1a>
 80095a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a8:	4299      	cmp	r1, r3
 80095aa:	d002      	beq.n	80095b2 <__sflush_r+0x92>
 80095ac:	4628      	mov	r0, r5
 80095ae:	f7ff fae3 	bl	8008b78 <_free_r>
 80095b2:	2000      	movs	r0, #0
 80095b4:	6360      	str	r0, [r4, #52]	; 0x34
 80095b6:	e7c1      	b.n	800953c <__sflush_r+0x1c>
 80095b8:	6a21      	ldr	r1, [r4, #32]
 80095ba:	2301      	movs	r3, #1
 80095bc:	4628      	mov	r0, r5
 80095be:	47b0      	blx	r6
 80095c0:	1c41      	adds	r1, r0, #1
 80095c2:	d1c7      	bne.n	8009554 <__sflush_r+0x34>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0c4      	beq.n	8009554 <__sflush_r+0x34>
 80095ca:	2b1d      	cmp	r3, #29
 80095cc:	d001      	beq.n	80095d2 <__sflush_r+0xb2>
 80095ce:	2b16      	cmp	r3, #22
 80095d0:	d101      	bne.n	80095d6 <__sflush_r+0xb6>
 80095d2:	602f      	str	r7, [r5, #0]
 80095d4:	e7b1      	b.n	800953a <__sflush_r+0x1a>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	e7ad      	b.n	800953c <__sflush_r+0x1c>
 80095e0:	690f      	ldr	r7, [r1, #16]
 80095e2:	2f00      	cmp	r7, #0
 80095e4:	d0a9      	beq.n	800953a <__sflush_r+0x1a>
 80095e6:	0793      	lsls	r3, r2, #30
 80095e8:	680e      	ldr	r6, [r1, #0]
 80095ea:	bf08      	it	eq
 80095ec:	694b      	ldreq	r3, [r1, #20]
 80095ee:	600f      	str	r7, [r1, #0]
 80095f0:	bf18      	it	ne
 80095f2:	2300      	movne	r3, #0
 80095f4:	eba6 0807 	sub.w	r8, r6, r7
 80095f8:	608b      	str	r3, [r1, #8]
 80095fa:	f1b8 0f00 	cmp.w	r8, #0
 80095fe:	dd9c      	ble.n	800953a <__sflush_r+0x1a>
 8009600:	6a21      	ldr	r1, [r4, #32]
 8009602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009604:	4643      	mov	r3, r8
 8009606:	463a      	mov	r2, r7
 8009608:	4628      	mov	r0, r5
 800960a:	47b0      	blx	r6
 800960c:	2800      	cmp	r0, #0
 800960e:	dc06      	bgt.n	800961e <__sflush_r+0xfe>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	f04f 30ff 	mov.w	r0, #4294967295
 800961c:	e78e      	b.n	800953c <__sflush_r+0x1c>
 800961e:	4407      	add	r7, r0
 8009620:	eba8 0800 	sub.w	r8, r8, r0
 8009624:	e7e9      	b.n	80095fa <__sflush_r+0xda>
 8009626:	bf00      	nop
 8009628:	20400001 	.word	0x20400001

0800962c <_fflush_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	690b      	ldr	r3, [r1, #16]
 8009630:	4605      	mov	r5, r0
 8009632:	460c      	mov	r4, r1
 8009634:	b913      	cbnz	r3, 800963c <_fflush_r+0x10>
 8009636:	2500      	movs	r5, #0
 8009638:	4628      	mov	r0, r5
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	b118      	cbz	r0, 8009646 <_fflush_r+0x1a>
 800963e:	6983      	ldr	r3, [r0, #24]
 8009640:	b90b      	cbnz	r3, 8009646 <_fflush_r+0x1a>
 8009642:	f000 f887 	bl	8009754 <__sinit>
 8009646:	4b14      	ldr	r3, [pc, #80]	; (8009698 <_fflush_r+0x6c>)
 8009648:	429c      	cmp	r4, r3
 800964a:	d11b      	bne.n	8009684 <_fflush_r+0x58>
 800964c:	686c      	ldr	r4, [r5, #4]
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0ef      	beq.n	8009636 <_fflush_r+0xa>
 8009656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009658:	07d0      	lsls	r0, r2, #31
 800965a:	d404      	bmi.n	8009666 <_fflush_r+0x3a>
 800965c:	0599      	lsls	r1, r3, #22
 800965e:	d402      	bmi.n	8009666 <_fflush_r+0x3a>
 8009660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009662:	f000 f915 	bl	8009890 <__retarget_lock_acquire_recursive>
 8009666:	4628      	mov	r0, r5
 8009668:	4621      	mov	r1, r4
 800966a:	f7ff ff59 	bl	8009520 <__sflush_r>
 800966e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009670:	07da      	lsls	r2, r3, #31
 8009672:	4605      	mov	r5, r0
 8009674:	d4e0      	bmi.n	8009638 <_fflush_r+0xc>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	059b      	lsls	r3, r3, #22
 800967a:	d4dd      	bmi.n	8009638 <_fflush_r+0xc>
 800967c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967e:	f000 f908 	bl	8009892 <__retarget_lock_release_recursive>
 8009682:	e7d9      	b.n	8009638 <_fflush_r+0xc>
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <_fflush_r+0x70>)
 8009686:	429c      	cmp	r4, r3
 8009688:	d101      	bne.n	800968e <_fflush_r+0x62>
 800968a:	68ac      	ldr	r4, [r5, #8]
 800968c:	e7df      	b.n	800964e <_fflush_r+0x22>
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <_fflush_r+0x74>)
 8009690:	429c      	cmp	r4, r3
 8009692:	bf08      	it	eq
 8009694:	68ec      	ldreq	r4, [r5, #12]
 8009696:	e7da      	b.n	800964e <_fflush_r+0x22>
 8009698:	0800be84 	.word	0x0800be84
 800969c:	0800bea4 	.word	0x0800bea4
 80096a0:	0800be64 	.word	0x0800be64

080096a4 <std>:
 80096a4:	2300      	movs	r3, #0
 80096a6:	b510      	push	{r4, lr}
 80096a8:	4604      	mov	r4, r0
 80096aa:	e9c0 3300 	strd	r3, r3, [r0]
 80096ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096b2:	6083      	str	r3, [r0, #8]
 80096b4:	8181      	strh	r1, [r0, #12]
 80096b6:	6643      	str	r3, [r0, #100]	; 0x64
 80096b8:	81c2      	strh	r2, [r0, #14]
 80096ba:	6183      	str	r3, [r0, #24]
 80096bc:	4619      	mov	r1, r3
 80096be:	2208      	movs	r2, #8
 80096c0:	305c      	adds	r0, #92	; 0x5c
 80096c2:	f7fd fb5b 	bl	8006d7c <memset>
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <std+0x38>)
 80096c8:	6263      	str	r3, [r4, #36]	; 0x24
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <std+0x3c>)
 80096cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x40>)
 80096d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <std+0x44>)
 80096d4:	6224      	str	r4, [r4, #32]
 80096d6:	6323      	str	r3, [r4, #48]	; 0x30
 80096d8:	bd10      	pop	{r4, pc}
 80096da:	bf00      	nop
 80096dc:	080099f5 	.word	0x080099f5
 80096e0:	08009a17 	.word	0x08009a17
 80096e4:	08009a4f 	.word	0x08009a4f
 80096e8:	08009a73 	.word	0x08009a73

080096ec <_cleanup_r>:
 80096ec:	4901      	ldr	r1, [pc, #4]	; (80096f4 <_cleanup_r+0x8>)
 80096ee:	f000 b8af 	b.w	8009850 <_fwalk_reent>
 80096f2:	bf00      	nop
 80096f4:	0800962d 	.word	0x0800962d

080096f8 <__sfmoreglue>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	1e4a      	subs	r2, r1, #1
 80096fc:	2568      	movs	r5, #104	; 0x68
 80096fe:	4355      	muls	r5, r2
 8009700:	460e      	mov	r6, r1
 8009702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009706:	f7ff fa87 	bl	8008c18 <_malloc_r>
 800970a:	4604      	mov	r4, r0
 800970c:	b140      	cbz	r0, 8009720 <__sfmoreglue+0x28>
 800970e:	2100      	movs	r1, #0
 8009710:	e9c0 1600 	strd	r1, r6, [r0]
 8009714:	300c      	adds	r0, #12
 8009716:	60a0      	str	r0, [r4, #8]
 8009718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800971c:	f7fd fb2e 	bl	8006d7c <memset>
 8009720:	4620      	mov	r0, r4
 8009722:	bd70      	pop	{r4, r5, r6, pc}

08009724 <__sfp_lock_acquire>:
 8009724:	4801      	ldr	r0, [pc, #4]	; (800972c <__sfp_lock_acquire+0x8>)
 8009726:	f000 b8b3 	b.w	8009890 <__retarget_lock_acquire_recursive>
 800972a:	bf00      	nop
 800972c:	2000063c 	.word	0x2000063c

08009730 <__sfp_lock_release>:
 8009730:	4801      	ldr	r0, [pc, #4]	; (8009738 <__sfp_lock_release+0x8>)
 8009732:	f000 b8ae 	b.w	8009892 <__retarget_lock_release_recursive>
 8009736:	bf00      	nop
 8009738:	2000063c 	.word	0x2000063c

0800973c <__sinit_lock_acquire>:
 800973c:	4801      	ldr	r0, [pc, #4]	; (8009744 <__sinit_lock_acquire+0x8>)
 800973e:	f000 b8a7 	b.w	8009890 <__retarget_lock_acquire_recursive>
 8009742:	bf00      	nop
 8009744:	20000637 	.word	0x20000637

08009748 <__sinit_lock_release>:
 8009748:	4801      	ldr	r0, [pc, #4]	; (8009750 <__sinit_lock_release+0x8>)
 800974a:	f000 b8a2 	b.w	8009892 <__retarget_lock_release_recursive>
 800974e:	bf00      	nop
 8009750:	20000637 	.word	0x20000637

08009754 <__sinit>:
 8009754:	b510      	push	{r4, lr}
 8009756:	4604      	mov	r4, r0
 8009758:	f7ff fff0 	bl	800973c <__sinit_lock_acquire>
 800975c:	69a3      	ldr	r3, [r4, #24]
 800975e:	b11b      	cbz	r3, 8009768 <__sinit+0x14>
 8009760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009764:	f7ff bff0 	b.w	8009748 <__sinit_lock_release>
 8009768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800976c:	6523      	str	r3, [r4, #80]	; 0x50
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <__sinit+0x68>)
 8009770:	4a13      	ldr	r2, [pc, #76]	; (80097c0 <__sinit+0x6c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	62a2      	str	r2, [r4, #40]	; 0x28
 8009776:	42a3      	cmp	r3, r4
 8009778:	bf04      	itt	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	61a3      	streq	r3, [r4, #24]
 800977e:	4620      	mov	r0, r4
 8009780:	f000 f820 	bl	80097c4 <__sfp>
 8009784:	6060      	str	r0, [r4, #4]
 8009786:	4620      	mov	r0, r4
 8009788:	f000 f81c 	bl	80097c4 <__sfp>
 800978c:	60a0      	str	r0, [r4, #8]
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f818 	bl	80097c4 <__sfp>
 8009794:	2200      	movs	r2, #0
 8009796:	60e0      	str	r0, [r4, #12]
 8009798:	2104      	movs	r1, #4
 800979a:	6860      	ldr	r0, [r4, #4]
 800979c:	f7ff ff82 	bl	80096a4 <std>
 80097a0:	68a0      	ldr	r0, [r4, #8]
 80097a2:	2201      	movs	r2, #1
 80097a4:	2109      	movs	r1, #9
 80097a6:	f7ff ff7d 	bl	80096a4 <std>
 80097aa:	68e0      	ldr	r0, [r4, #12]
 80097ac:	2202      	movs	r2, #2
 80097ae:	2112      	movs	r1, #18
 80097b0:	f7ff ff78 	bl	80096a4 <std>
 80097b4:	2301      	movs	r3, #1
 80097b6:	61a3      	str	r3, [r4, #24]
 80097b8:	e7d2      	b.n	8009760 <__sinit+0xc>
 80097ba:	bf00      	nop
 80097bc:	0800bae4 	.word	0x0800bae4
 80097c0:	080096ed 	.word	0x080096ed

080097c4 <__sfp>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	4607      	mov	r7, r0
 80097c8:	f7ff ffac 	bl	8009724 <__sfp_lock_acquire>
 80097cc:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <__sfp+0x84>)
 80097ce:	681e      	ldr	r6, [r3, #0]
 80097d0:	69b3      	ldr	r3, [r6, #24]
 80097d2:	b913      	cbnz	r3, 80097da <__sfp+0x16>
 80097d4:	4630      	mov	r0, r6
 80097d6:	f7ff ffbd 	bl	8009754 <__sinit>
 80097da:	3648      	adds	r6, #72	; 0x48
 80097dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	d503      	bpl.n	80097ec <__sfp+0x28>
 80097e4:	6833      	ldr	r3, [r6, #0]
 80097e6:	b30b      	cbz	r3, 800982c <__sfp+0x68>
 80097e8:	6836      	ldr	r6, [r6, #0]
 80097ea:	e7f7      	b.n	80097dc <__sfp+0x18>
 80097ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097f0:	b9d5      	cbnz	r5, 8009828 <__sfp+0x64>
 80097f2:	4b16      	ldr	r3, [pc, #88]	; (800984c <__sfp+0x88>)
 80097f4:	60e3      	str	r3, [r4, #12]
 80097f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097fa:	6665      	str	r5, [r4, #100]	; 0x64
 80097fc:	f000 f847 	bl	800988e <__retarget_lock_init_recursive>
 8009800:	f7ff ff96 	bl	8009730 <__sfp_lock_release>
 8009804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800980c:	6025      	str	r5, [r4, #0]
 800980e:	61a5      	str	r5, [r4, #24]
 8009810:	2208      	movs	r2, #8
 8009812:	4629      	mov	r1, r5
 8009814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009818:	f7fd fab0 	bl	8006d7c <memset>
 800981c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009824:	4620      	mov	r0, r4
 8009826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009828:	3468      	adds	r4, #104	; 0x68
 800982a:	e7d9      	b.n	80097e0 <__sfp+0x1c>
 800982c:	2104      	movs	r1, #4
 800982e:	4638      	mov	r0, r7
 8009830:	f7ff ff62 	bl	80096f8 <__sfmoreglue>
 8009834:	4604      	mov	r4, r0
 8009836:	6030      	str	r0, [r6, #0]
 8009838:	2800      	cmp	r0, #0
 800983a:	d1d5      	bne.n	80097e8 <__sfp+0x24>
 800983c:	f7ff ff78 	bl	8009730 <__sfp_lock_release>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	e7ee      	b.n	8009824 <__sfp+0x60>
 8009846:	bf00      	nop
 8009848:	0800bae4 	.word	0x0800bae4
 800984c:	ffff0001 	.word	0xffff0001

08009850 <_fwalk_reent>:
 8009850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009854:	4606      	mov	r6, r0
 8009856:	4688      	mov	r8, r1
 8009858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800985c:	2700      	movs	r7, #0
 800985e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009862:	f1b9 0901 	subs.w	r9, r9, #1
 8009866:	d505      	bpl.n	8009874 <_fwalk_reent+0x24>
 8009868:	6824      	ldr	r4, [r4, #0]
 800986a:	2c00      	cmp	r4, #0
 800986c:	d1f7      	bne.n	800985e <_fwalk_reent+0xe>
 800986e:	4638      	mov	r0, r7
 8009870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009874:	89ab      	ldrh	r3, [r5, #12]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d907      	bls.n	800988a <_fwalk_reent+0x3a>
 800987a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800987e:	3301      	adds	r3, #1
 8009880:	d003      	beq.n	800988a <_fwalk_reent+0x3a>
 8009882:	4629      	mov	r1, r5
 8009884:	4630      	mov	r0, r6
 8009886:	47c0      	blx	r8
 8009888:	4307      	orrs	r7, r0
 800988a:	3568      	adds	r5, #104	; 0x68
 800988c:	e7e9      	b.n	8009862 <_fwalk_reent+0x12>

0800988e <__retarget_lock_init_recursive>:
 800988e:	4770      	bx	lr

08009890 <__retarget_lock_acquire_recursive>:
 8009890:	4770      	bx	lr

08009892 <__retarget_lock_release_recursive>:
 8009892:	4770      	bx	lr

08009894 <__swhatbuf_r>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	460e      	mov	r6, r1
 8009898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989c:	2900      	cmp	r1, #0
 800989e:	b096      	sub	sp, #88	; 0x58
 80098a0:	4614      	mov	r4, r2
 80098a2:	461d      	mov	r5, r3
 80098a4:	da07      	bge.n	80098b6 <__swhatbuf_r+0x22>
 80098a6:	2300      	movs	r3, #0
 80098a8:	602b      	str	r3, [r5, #0]
 80098aa:	89b3      	ldrh	r3, [r6, #12]
 80098ac:	061a      	lsls	r2, r3, #24
 80098ae:	d410      	bmi.n	80098d2 <__swhatbuf_r+0x3e>
 80098b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b4:	e00e      	b.n	80098d4 <__swhatbuf_r+0x40>
 80098b6:	466a      	mov	r2, sp
 80098b8:	f000 f902 	bl	8009ac0 <_fstat_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	dbf2      	blt.n	80098a6 <__swhatbuf_r+0x12>
 80098c0:	9a01      	ldr	r2, [sp, #4]
 80098c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098ca:	425a      	negs	r2, r3
 80098cc:	415a      	adcs	r2, r3
 80098ce:	602a      	str	r2, [r5, #0]
 80098d0:	e7ee      	b.n	80098b0 <__swhatbuf_r+0x1c>
 80098d2:	2340      	movs	r3, #64	; 0x40
 80098d4:	2000      	movs	r0, #0
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	b016      	add	sp, #88	; 0x58
 80098da:	bd70      	pop	{r4, r5, r6, pc}

080098dc <__smakebuf_r>:
 80098dc:	898b      	ldrh	r3, [r1, #12]
 80098de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098e0:	079d      	lsls	r5, r3, #30
 80098e2:	4606      	mov	r6, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	d507      	bpl.n	80098f8 <__smakebuf_r+0x1c>
 80098e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	6123      	str	r3, [r4, #16]
 80098f0:	2301      	movs	r3, #1
 80098f2:	6163      	str	r3, [r4, #20]
 80098f4:	b002      	add	sp, #8
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	ab01      	add	r3, sp, #4
 80098fa:	466a      	mov	r2, sp
 80098fc:	f7ff ffca 	bl	8009894 <__swhatbuf_r>
 8009900:	9900      	ldr	r1, [sp, #0]
 8009902:	4605      	mov	r5, r0
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff f987 	bl	8008c18 <_malloc_r>
 800990a:	b948      	cbnz	r0, 8009920 <__smakebuf_r+0x44>
 800990c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009910:	059a      	lsls	r2, r3, #22
 8009912:	d4ef      	bmi.n	80098f4 <__smakebuf_r+0x18>
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	f043 0302 	orr.w	r3, r3, #2
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	e7e3      	b.n	80098e8 <__smakebuf_r+0xc>
 8009920:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <__smakebuf_r+0x7c>)
 8009922:	62b3      	str	r3, [r6, #40]	; 0x28
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	6020      	str	r0, [r4, #0]
 8009928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	6163      	str	r3, [r4, #20]
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	6120      	str	r0, [r4, #16]
 8009936:	b15b      	cbz	r3, 8009950 <__smakebuf_r+0x74>
 8009938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800993c:	4630      	mov	r0, r6
 800993e:	f000 f8d1 	bl	8009ae4 <_isatty_r>
 8009942:	b128      	cbz	r0, 8009950 <__smakebuf_r+0x74>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f023 0303 	bic.w	r3, r3, #3
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	81a3      	strh	r3, [r4, #12]
 8009950:	89a0      	ldrh	r0, [r4, #12]
 8009952:	4305      	orrs	r5, r0
 8009954:	81a5      	strh	r5, [r4, #12]
 8009956:	e7cd      	b.n	80098f4 <__smakebuf_r+0x18>
 8009958:	080096ed 	.word	0x080096ed

0800995c <_malloc_usable_size_r>:
 800995c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009960:	1f18      	subs	r0, r3, #4
 8009962:	2b00      	cmp	r3, #0
 8009964:	bfbc      	itt	lt
 8009966:	580b      	ldrlt	r3, [r1, r0]
 8009968:	18c0      	addlt	r0, r0, r3
 800996a:	4770      	bx	lr

0800996c <_raise_r>:
 800996c:	291f      	cmp	r1, #31
 800996e:	b538      	push	{r3, r4, r5, lr}
 8009970:	4604      	mov	r4, r0
 8009972:	460d      	mov	r5, r1
 8009974:	d904      	bls.n	8009980 <_raise_r+0x14>
 8009976:	2316      	movs	r3, #22
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	f04f 30ff 	mov.w	r0, #4294967295
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009982:	b112      	cbz	r2, 800998a <_raise_r+0x1e>
 8009984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009988:	b94b      	cbnz	r3, 800999e <_raise_r+0x32>
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f830 	bl	80099f0 <_getpid_r>
 8009990:	462a      	mov	r2, r5
 8009992:	4601      	mov	r1, r0
 8009994:	4620      	mov	r0, r4
 8009996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800999a:	f000 b817 	b.w	80099cc <_kill_r>
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d00a      	beq.n	80099b8 <_raise_r+0x4c>
 80099a2:	1c59      	adds	r1, r3, #1
 80099a4:	d103      	bne.n	80099ae <_raise_r+0x42>
 80099a6:	2316      	movs	r3, #22
 80099a8:	6003      	str	r3, [r0, #0]
 80099aa:	2001      	movs	r0, #1
 80099ac:	e7e7      	b.n	800997e <_raise_r+0x12>
 80099ae:	2400      	movs	r4, #0
 80099b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099b4:	4628      	mov	r0, r5
 80099b6:	4798      	blx	r3
 80099b8:	2000      	movs	r0, #0
 80099ba:	e7e0      	b.n	800997e <_raise_r+0x12>

080099bc <raise>:
 80099bc:	4b02      	ldr	r3, [pc, #8]	; (80099c8 <raise+0xc>)
 80099be:	4601      	mov	r1, r0
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	f7ff bfd3 	b.w	800996c <_raise_r>
 80099c6:	bf00      	nop
 80099c8:	20000098 	.word	0x20000098

080099cc <_kill_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d07      	ldr	r5, [pc, #28]	; (80099ec <_kill_r+0x20>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	602b      	str	r3, [r5, #0]
 80099da:	f7f8 fb51 	bl	8002080 <_kill>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	d102      	bne.n	80099e8 <_kill_r+0x1c>
 80099e2:	682b      	ldr	r3, [r5, #0]
 80099e4:	b103      	cbz	r3, 80099e8 <_kill_r+0x1c>
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	bd38      	pop	{r3, r4, r5, pc}
 80099ea:	bf00      	nop
 80099ec:	20000630 	.word	0x20000630

080099f0 <_getpid_r>:
 80099f0:	f7f8 bb3e 	b.w	8002070 <_getpid>

080099f4 <__sread>:
 80099f4:	b510      	push	{r4, lr}
 80099f6:	460c      	mov	r4, r1
 80099f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fc:	f000 f894 	bl	8009b28 <_read_r>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	bfab      	itete	ge
 8009a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a06:	89a3      	ldrhlt	r3, [r4, #12]
 8009a08:	181b      	addge	r3, r3, r0
 8009a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a0e:	bfac      	ite	ge
 8009a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a12:	81a3      	strhlt	r3, [r4, #12]
 8009a14:	bd10      	pop	{r4, pc}

08009a16 <__swrite>:
 8009a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1a:	461f      	mov	r7, r3
 8009a1c:	898b      	ldrh	r3, [r1, #12]
 8009a1e:	05db      	lsls	r3, r3, #23
 8009a20:	4605      	mov	r5, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	4616      	mov	r6, r2
 8009a26:	d505      	bpl.n	8009a34 <__swrite+0x1e>
 8009a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f000 f868 	bl	8009b04 <_lseek_r>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	4632      	mov	r2, r6
 8009a42:	463b      	mov	r3, r7
 8009a44:	4628      	mov	r0, r5
 8009a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4a:	f000 b817 	b.w	8009a7c <_write_r>

08009a4e <__sseek>:
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	460c      	mov	r4, r1
 8009a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a56:	f000 f855 	bl	8009b04 <_lseek_r>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	bf15      	itete	ne
 8009a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a6a:	81a3      	strheq	r3, [r4, #12]
 8009a6c:	bf18      	it	ne
 8009a6e:	81a3      	strhne	r3, [r4, #12]
 8009a70:	bd10      	pop	{r4, pc}

08009a72 <__sclose>:
 8009a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a76:	f000 b813 	b.w	8009aa0 <_close_r>
	...

08009a7c <_write_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_write_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f8 fb2f 	bl	80020ee <_write>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_write_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_write_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20000630 	.word	0x20000630

08009aa0 <_close_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	; (8009abc <_close_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f8 fb3b 	bl	8002126 <_close>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_close_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_close_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20000630 	.word	0x20000630

08009ac0 <_fstat_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	; (8009ae0 <_fstat_r+0x20>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	4611      	mov	r1, r2
 8009acc:	602b      	str	r3, [r5, #0]
 8009ace:	f7f8 fb36 	bl	800213e <_fstat>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d102      	bne.n	8009adc <_fstat_r+0x1c>
 8009ad6:	682b      	ldr	r3, [r5, #0]
 8009ad8:	b103      	cbz	r3, 8009adc <_fstat_r+0x1c>
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	bf00      	nop
 8009ae0:	20000630 	.word	0x20000630

08009ae4 <_isatty_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d06      	ldr	r5, [pc, #24]	; (8009b00 <_isatty_r+0x1c>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	602b      	str	r3, [r5, #0]
 8009af0:	f7f8 fb35 	bl	800215e <_isatty>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_isatty_r+0x1a>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_isatty_r+0x1a>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	20000630 	.word	0x20000630

08009b04 <_lseek_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d07      	ldr	r5, [pc, #28]	; (8009b24 <_lseek_r+0x20>)
 8009b08:	4604      	mov	r4, r0
 8009b0a:	4608      	mov	r0, r1
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	2200      	movs	r2, #0
 8009b10:	602a      	str	r2, [r5, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f7f8 fb2e 	bl	8002174 <_lseek>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_lseek_r+0x1e>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_lseek_r+0x1e>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20000630 	.word	0x20000630

08009b28 <_read_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d07      	ldr	r5, [pc, #28]	; (8009b48 <_read_r+0x20>)
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	4608      	mov	r0, r1
 8009b30:	4611      	mov	r1, r2
 8009b32:	2200      	movs	r2, #0
 8009b34:	602a      	str	r2, [r5, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f7f8 fabc 	bl	80020b4 <_read>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_read_r+0x1e>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_read_r+0x1e>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	20000630 	.word	0x20000630

08009b4c <_init>:
 8009b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4e:	bf00      	nop
 8009b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b52:	bc08      	pop	{r3}
 8009b54:	469e      	mov	lr, r3
 8009b56:	4770      	bx	lr

08009b58 <_fini>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	bf00      	nop
 8009b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5e:	bc08      	pop	{r3}
 8009b60:	469e      	mov	lr, r3
 8009b62:	4770      	bx	lr
